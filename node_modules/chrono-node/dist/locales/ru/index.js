"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createConfiguration = exports.createCasualConfiguration = exports.parseDate = exports.parse = exports.strict = exports.casual = void 0;
const RUTimeUnitWithinFormatParser_1 = __importDefault(require("./parsers/RUTimeUnitWithinFormatParser"));
const RUMonthNameLittleEndianParser_1 = __importDefault(require("./parsers/RUMonthNameLittleEndianParser"));
const RUMonthNameParser_1 = __importDefault(require("./parsers/RUMonthNameParser"));
const RUTimeExpressionParser_1 = __importDefault(require("./parsers/RUTimeExpressionParser"));
const RUTimeUnitAgoFormatParser_1 = __importDefault(require("./parsers/RUTimeUnitAgoFormatParser"));
const RUMergeDateRangeRefiner_1 = __importDefault(require("./refiners/RUMergeDateRangeRefiner"));
const RUMergeDateTimeRefiner_1 = __importDefault(require("./refiners/RUMergeDateTimeRefiner"));
const configurations_1 = require("../../configurations");
const RUCasualDateParser_1 = __importDefault(require("./parsers/RUCasualDateParser"));
const RUCasualTimeParser_1 = __importDefault(require("./parsers/RUCasualTimeParser"));
const RUWeekdayParser_1 = __importDefault(require("./parsers/RUWeekdayParser"));
const RURelativeDateFormatParser_1 = __importDefault(require("./parsers/RURelativeDateFormatParser"));
const chrono_1 = require("../../chrono");
const SlashDateFormatParser_1 = __importDefault(require("../../common/parsers/SlashDateFormatParser"));
const RUTimeUnitCasualRelativeFormatParser_1 = __importDefault(require("./parsers/RUTimeUnitCasualRelativeFormatParser"));
exports.casual = new chrono_1.Chrono(createCasualConfiguration());
exports.strict = new chrono_1.Chrono(createConfiguration(true));
function parse(text, ref, option) {
    return exports.casual.parse(text, ref, option);
}
exports.parse = parse;
function parseDate(text, ref, option) {
    return exports.casual.parseDate(text, ref, option);
}
exports.parseDate = parseDate;
function createCasualConfiguration() {
    const option = createConfiguration(false);
    option.parsers.unshift(new RUCasualDateParser_1.default());
    option.parsers.unshift(new RUCasualTimeParser_1.default());
    option.parsers.unshift(new RUMonthNameParser_1.default());
    option.parsers.unshift(new RURelativeDateFormatParser_1.default());
    option.parsers.unshift(new RUTimeUnitCasualRelativeFormatParser_1.default());
    return option;
}
exports.createCasualConfiguration = createCasualConfiguration;
function createConfiguration(strictMode = true) {
    return configurations_1.includeCommonConfiguration({
        parsers: [
            new SlashDateFormatParser_1.default(true),
            new RUTimeUnitWithinFormatParser_1.default(),
            new RUMonthNameLittleEndianParser_1.default(),
            new RUWeekdayParser_1.default(),
            new RUTimeExpressionParser_1.default(strictMode),
            new RUTimeUnitAgoFormatParser_1.default(),
        ],
        refiners: [new RUMergeDateTimeRefiner_1.default(), new RUMergeDateRangeRefiner_1.default()],
    }, strictMode);
}
exports.createConfiguration = createConfiguration;
//# sourceMappingURL=index.js.map