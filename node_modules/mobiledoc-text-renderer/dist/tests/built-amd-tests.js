QUnit.module('JSHint - tests/jshint/cards');
QUnit.test('tests/jshint/cards/image.js should pass jshint', function(assert) { 
  assert.expect(1);
  assert.ok(true, 'tests/jshint/cards/image.js should pass jshint.'); 
});

QUnit.module('JSHint - tests/jshint');
QUnit.test('tests/jshint/index.js should pass jshint', function(assert) { 
  assert.expect(1);
  assert.ok(true, 'tests/jshint/index.js should pass jshint.'); 
});

QUnit.module('JSHint - tests/jshint');
QUnit.test('tests/jshint/renderer-factory.js should pass jshint', function(assert) { 
  assert.expect(1);
  assert.ok(true, 'tests/jshint/renderer-factory.js should pass jshint.'); 
});

QUnit.module('JSHint - tests/jshint/renderers');
QUnit.test('tests/jshint/renderers/0-2.js should pass jshint', function(assert) { 
  assert.expect(1);
  assert.ok(true, 'tests/jshint/renderers/0-2.js should pass jshint.'); 
});

QUnit.module('JSHint - tests/jshint/renderers');
QUnit.test('tests/jshint/renderers/0-3.js should pass jshint', function(assert) { 
  assert.expect(1);
  assert.ok(true, 'tests/jshint/renderers/0-3.js should pass jshint.'); 
});

QUnit.module('JSHint - tests/jshint/unit/renderers');
QUnit.test('tests/jshint/unit/renderers/0-2-test.js should pass jshint', function(assert) { 
  assert.expect(1);
  assert.ok(true, 'tests/jshint/unit/renderers/0-2-test.js should pass jshint.'); 
});

QUnit.module('JSHint - tests/jshint/unit/renderers');
QUnit.test('tests/jshint/unit/renderers/0-3-test.js should pass jshint', function(assert) { 
  assert.expect(1);
  assert.ok(true, 'tests/jshint/unit/renderers/0-3-test.js should pass jshint.'); 
});

QUnit.module('JSHint - tests/jshint/utils');
QUnit.test('tests/jshint/utils/marker-types.js should pass jshint', function(assert) { 
  assert.expect(1);
  assert.ok(true, 'tests/jshint/utils/marker-types.js should pass jshint.'); 
});

QUnit.module('JSHint - tests/jshint/utils');
QUnit.test('tests/jshint/utils/render-type.js should pass jshint', function(assert) { 
  assert.expect(1);
  assert.ok(true, 'tests/jshint/utils/render-type.js should pass jshint.'); 
});

QUnit.module('JSHint - tests/jshint/utils');
QUnit.test('tests/jshint/utils/section-types.js should pass jshint', function(assert) { 
  assert.expect(1);
  assert.ok(true, 'tests/jshint/utils/section-types.js should pass jshint.'); 
});

define('tests/unit/renderers/0-2-test', ['exports', 'mobiledoc-text-renderer', 'mobiledoc-text-renderer/utils/section-types'], function (exports, _mobiledocTextRenderer, _mobiledocTextRendererUtilsSectionTypes) {
  /* global QUnit */

  'use strict';

  var _QUnit = QUnit;
  var test = _QUnit.test;
  var _module = _QUnit.module;

  var MOBILEDOC_VERSION = '0.2.0';

  var renderer = undefined;
  _module('Unit: Mobiledoc Text Renderer - 0.2', {
    beforeEach: function beforeEach() {
      renderer = new _mobiledocTextRenderer['default']();
    }
  });

  test('renders an empty mobiledoc', function (assert) {
    var mobiledoc = {
      version: MOBILEDOC_VERSION,
      sections: [[], // markers
      [] // sections
      ]
    };

    var _renderer$render = renderer.render(mobiledoc);

    var rendered = _renderer$render.result;

    assert.equal(rendered, '', 'output is empty');
  });

  test('renders a mobiledoc without markers', function (assert) {
    var mobiledoc = {
      version: MOBILEDOC_VERSION,
      sections: [[], // markers
      [// sections
      [_mobiledocTextRendererUtilsSectionTypes.MARKUP_SECTION_TYPE, 'P', [[[], 0, 'hello world']]]]]
    };

    var _renderer$render2 = renderer.render(mobiledoc);

    var rendered = _renderer$render2.result;

    assert.equal(rendered, 'hello world');
  });

  test('renders a mobiledoc with simple (no attributes) marker', function (assert) {
    var mobiledoc = {
      version: MOBILEDOC_VERSION,
      sections: [[// markers
      ['B']], [// sections
      [_mobiledocTextRendererUtilsSectionTypes.MARKUP_SECTION_TYPE, 'P', [[[0], 1, 'hello world']]]]]
    };

    var _renderer$render3 = renderer.render(mobiledoc);

    var rendered = _renderer$render3.result;

    assert.equal(rendered, 'hello world');
  });

  test('renders a mobiledoc with complex (has attributes) marker', function (assert) {
    var mobiledoc = {
      version: MOBILEDOC_VERSION,
      sections: [[// markers
      ['A', ['href', 'http://google.com']]], [// sections
      [_mobiledocTextRendererUtilsSectionTypes.MARKUP_SECTION_TYPE, 'P', [[[0], 1, 'hello world']]]]]
    };

    var _renderer$render4 = renderer.render(mobiledoc);

    var rendered = _renderer$render4.result;

    assert.equal(rendered, 'hello world');
  });

  test('renders a mobiledoc with multiple markups in a section', function (assert) {
    var mobiledoc = {
      version: MOBILEDOC_VERSION,
      sections: [[// markers
      ['B'], ['I']], [// sections
      [_mobiledocTextRendererUtilsSectionTypes.MARKUP_SECTION_TYPE, 'P', [[[0], 0, 'hello '], // b
      [[1], 0, 'brave '], // b+i
      [[], 1, 'new '], // close i
      [[], 1, 'world'] // close b
      ]]]]
    };

    var _renderer$render5 = renderer.render(mobiledoc);

    var rendered = _renderer$render5.result;

    assert.equal(rendered, 'hello brave new world');
  });

  test('renders a mobiledoc with image section', function (assert) {
    var mobiledoc = {
      version: MOBILEDOC_VERSION,
      sections: [[], // markers
      [// sections
      [_mobiledocTextRendererUtilsSectionTypes.IMAGE_SECTION_TYPE, 'imageUrl']]]
    };

    var _renderer$render6 = renderer.render(mobiledoc);

    var rendered = _renderer$render6.result;

    assert.equal(rendered, '', 'image section is empty string');
  });

  test('renders a mobiledoc with built-in image card (as empty string)', function (assert) {
    assert.expect(1);
    var cardName = 'image-card';
    var payload = { src: 'bob.gif' };
    var mobiledoc = {
      version: MOBILEDOC_VERSION,
      sections: [[], // markers
      [// sections
      [_mobiledocTextRendererUtilsSectionTypes.CARD_SECTION_TYPE, cardName, payload]]]
    };

    var _renderer$render7 = renderer.render(mobiledoc);

    var rendered = _renderer$render7.result;

    assert.equal(rendered, '', 'card section is empty');
  });

  test('render mobiledoc with list section and list items', function (assert) {
    var mobiledoc = {
      version: MOBILEDOC_VERSION,
      sections: [[], [[_mobiledocTextRendererUtilsSectionTypes.LIST_SECTION_TYPE, 'ul', [[[[], 0, 'first item']], [[[], 0, 'second item']]]]]]
    };

    var _renderer$render8 = renderer.render(mobiledoc);

    var rendered = _renderer$render8.result;

    assert.equal(rendered, ['first item', 'second item'].join('\n'));
  });

  test('renders a mobiledoc with card section', function (assert) {
    var cardName = 'title-card';
    var card = {
      name: cardName,
      type: 'text',
      render: function render() {
        return 'Hello';
      }
    };
    var mobiledoc = {
      version: MOBILEDOC_VERSION,
      sections: [[], // markers
      [// sections
      [_mobiledocTextRendererUtilsSectionTypes.CARD_SECTION_TYPE, cardName]]]
    };
    renderer = new _mobiledocTextRenderer['default']({ cards: [card] });

    var _renderer$render9 = renderer.render(mobiledoc);

    var rendered = _renderer$render9.result;

    assert.equal(rendered, 'Hello');
  });

  test('throws when given card with invalid type', function (assert) {
    var card = {
      name: 'bad',
      type: 'other',
      render: function render() {}
    };
    assert.throws(function () {
      new _mobiledocTextRenderer['default']({ cards: [card] });
    }, // jshint ignore:line
    /Card "bad" must be type "text"/);
  });

  test('throws when given card without `render`', function (assert) {
    var card = {
      name: 'bad',
      type: 'text',
      render: undefined
    };
    assert.throws(function () {
      new _mobiledocTextRenderer['default']({ cards: [card] });
    }, // jshint ignore:line
    /Card "bad" must define.*render/);
  });

  test('throws if card render returns invalid result', function (assert) {
    var card = {
      name: 'bad',
      type: 'text',
      render: function render() {
        return [];
      }
    };
    var mobiledoc = {
      version: MOBILEDOC_VERSION,
      sections: [[], // markers
      [[_mobiledocTextRendererUtilsSectionTypes.CARD_SECTION_TYPE, card.name]] // sections
      ]
    };
    renderer = new _mobiledocTextRenderer['default']({ cards: [card] });
    assert.throws(function () {
      return renderer.render(mobiledoc);
    }, /Card "bad" must render text/);
  });

  test('card may render nothing', function (assert) {
    var card = {
      name: 'ok',
      type: 'text',
      render: function render() {}
    };
    var mobiledoc = {
      version: MOBILEDOC_VERSION,
      sections: [[], [[_mobiledocTextRendererUtilsSectionTypes.CARD_SECTION_TYPE, card.name]]]
    };

    renderer = new _mobiledocTextRenderer['default']({ cards: [card] });
    renderer.render(mobiledoc);

    assert.ok(true, 'No error thrown');
  });

  test('rendering nested mobiledocs in cards', function (assert) {
    var cards = [{
      name: 'nested-card',
      type: 'text',
      render: function render(_ref) {
        var payload = _ref.payload;

        var _renderer$render10 = renderer.render(payload.mobiledoc);

        var rendered = _renderer$render10.result;

        return rendered;
      }
    }];

    var innerMobiledoc = {
      version: MOBILEDOC_VERSION,
      sections: [[], // markers
      [// sections
      [_mobiledocTextRendererUtilsSectionTypes.MARKUP_SECTION_TYPE, 'P', [[[], 0, 'hello world']]]]]
    };

    var mobiledoc = {
      version: MOBILEDOC_VERSION,
      sections: [[], // markers
      [// sections
      [_mobiledocTextRendererUtilsSectionTypes.CARD_SECTION_TYPE, 'nested-card', { mobiledoc: innerMobiledoc }]]]
    };

    renderer = new _mobiledocTextRenderer['default']({ cards: cards });

    var _renderer$render11 = renderer.render(mobiledoc);

    var rendered = _renderer$render11.result;

    assert.equal(rendered, 'hello world');
  });

  test('rendering unknown card without unknownCardHandler does nothing', function (assert) {
    var mobiledoc = {
      version: MOBILEDOC_VERSION,
      sections: [[], // markers
      [[_mobiledocTextRendererUtilsSectionTypes.CARD_SECTION_TYPE, 'missing-card']]]
    };
    renderer = new _mobiledocTextRenderer['default']({ cards: [], unknownCardHandler: undefined });

    var _renderer$render12 = renderer.render(mobiledoc);

    var result = _renderer$render12.result;

    assert.equal(result, '', 'empty result');
  });

  test('rendering unknown card uses unknownCardHandler', function (assert) {
    assert.expect(5);

    var cardName = 'missing-card';
    var expectedPayload = {};
    var cardOptions = {};
    var mobiledoc = {
      version: MOBILEDOC_VERSION,
      sections: [[], // markers
      [// sections
      [_mobiledocTextRendererUtilsSectionTypes.CARD_SECTION_TYPE, cardName, expectedPayload]]]
    };
    var unknownCardHandler = function unknownCardHandler(_ref2) {
      var env = _ref2.env;
      var payload = _ref2.payload;
      var options = _ref2.options;

      assert.equal(env.name, cardName, 'correct name');
      assert.ok(!env.isInEditor, 'correct isInEditor');
      assert.ok(!!env.onTeardown, 'onTeardown hook exists');

      assert.deepEqual(payload, expectedPayload, 'correct payload');
      assert.deepEqual(options, cardOptions, 'correct options');
    };
    renderer = new _mobiledocTextRenderer['default']({ cards: [], unknownCardHandler: unknownCardHandler, cardOptions: cardOptions });
    renderer.render(mobiledoc);
  });

  test('throws if given an object of cards', function (assert) {
    var cards = {};
    assert.throws(function () {
      new _mobiledocTextRenderer['default']({ cards: cards });
    }, // jshint ignore: line
    /`cards` must be passed as an array/);
  });

  test('teardown hook calls registered teardown methods', function (assert) {
    var didTeardown = undefined;
    var card = {
      name: 'ok',
      type: 'text',
      render: function render(_ref3) {
        var env = _ref3.env;

        env.onTeardown(function () {
          return didTeardown = true;
        });
      }
    };
    var mobiledoc = {
      version: MOBILEDOC_VERSION,
      sections: [[], // markers
      [[_mobiledocTextRendererUtilsSectionTypes.CARD_SECTION_TYPE, card.name]]]
    };
    renderer = new _mobiledocTextRenderer['default']({ cards: [card] });

    var _renderer$render13 = renderer.render(mobiledoc);

    var teardown = _renderer$render13.teardown;

    assert.ok(!didTeardown, 'precond - no teardown');

    teardown();

    assert.ok(didTeardown, 'teardown callback called');
  });

  test('throws when given an unexpected mobiledoc version', function (assert) {
    var mobiledoc = {
      version: '0.1.0',
      sections: [[], []]
    };
    assert.throws(function () {
      return renderer.render(mobiledoc);
    }, /Unexpected Mobiledoc version.*0.1.0/);

    mobiledoc.version = '0.2.1';
    assert.throws(function () {
      return renderer.render(mobiledoc);
    }, /Unexpected Mobiledoc version.*0.2.1/);
  });

  test('renders a mobiledoc with multiple sections', function (assert) {
    var mobiledoc = {
      version: MOBILEDOC_VERSION,
      sections: [[], // markers
      [// sections
      [_mobiledocTextRendererUtilsSectionTypes.MARKUP_SECTION_TYPE, 'P', [[[], 0, 'first section']]], [_mobiledocTextRendererUtilsSectionTypes.MARKUP_SECTION_TYPE, 'P', [[[], 0, 'second section']]]]]
    };

    var _renderer$render14 = renderer.render(mobiledoc);

    var rendered = _renderer$render14.result;

    assert.equal(rendered, ['first section', 'second section'].join('\n'));
  });

  test('XSS: unexpected markup and list section tag names are not renderered', function (assert) {
    var mobiledoc = {
      version: MOBILEDOC_VERSION,
      sections: [[], [[_mobiledocTextRendererUtilsSectionTypes.MARKUP_SECTION_TYPE, 'script', [[[], 0, 'alert("markup section XSS")']]], [_mobiledocTextRendererUtilsSectionTypes.LIST_SECTION_TYPE, 'script', [[[[], 0, 'alert("list section XSS")']]]]]]
    };

    var _renderer$render15 = renderer.render(mobiledoc);

    var result = _renderer$render15.result;

    assert.ok(result.indexOf('script') === -1, 'no script tag rendered');
  });

  test('XSS: unexpected markup types are not rendered', function (assert) {
    var mobiledoc = {
      version: MOBILEDOC_VERSION,
      sections: [[['b'], // valid
      ['em'], // valid
      ['script'] // invalid
      ], [[_mobiledocTextRendererUtilsSectionTypes.MARKUP_SECTION_TYPE, 'p', [[[0], 0, 'bold text'], [[1, 2], 3, 'alert("markup XSS")'], [[], 0, 'plain text']]]]]
    };

    var _renderer$render16 = renderer.render(mobiledoc);

    var result = _renderer$render16.result;

    assert.ok(result.indexOf('script') === -1, 'no script tag rendered');
  });
});
define('tests/unit/renderers/0-3-test', ['exports', 'mobiledoc-text-renderer', 'mobiledoc-text-renderer/utils/section-types', 'mobiledoc-text-renderer/utils/marker-types'], function (exports, _mobiledocTextRenderer, _mobiledocTextRendererUtilsSectionTypes, _mobiledocTextRendererUtilsMarkerTypes) {
  /* global QUnit */

  'use strict';

  var _QUnit = QUnit;
  var test = _QUnit.test;
  var _module = _QUnit.module;

  var MOBILEDOC_VERSION_0_3 = '0.3.0';
  var MOBILEDOC_VERSION_0_3_1 = '0.3.1';
  var MOBILEDOC_VERSION_0_3_2 = '0.3.2';

  var renderer = undefined;
  _module('Unit: Mobiledoc Text Renderer - 0.3', {
    beforeEach: function beforeEach() {
      renderer = new _mobiledocTextRenderer['default']();
    }
  });

  test('renders an empty mobiledoc', function (assert) {
    var mobiledoc = {
      version: MOBILEDOC_VERSION_0_3,
      atoms: [],
      cards: [],
      markups: [],
      sections: []
    };

    var _renderer$render = renderer.render(mobiledoc);

    var rendered = _renderer$render.result;

    assert.equal(rendered, '', 'output is empty');
  });

  test('renders a mobiledoc without markers', function (assert) {
    var mobiledoc = {
      version: MOBILEDOC_VERSION_0_3,
      atoms: [],
      cards: [],
      markups: [],
      sections: [[_mobiledocTextRendererUtilsSectionTypes.MARKUP_SECTION_TYPE, 'P', [[_mobiledocTextRendererUtilsMarkerTypes.MARKUP_MARKER_TYPE, [], 0, 'hello world']]]]
    };

    var _renderer$render2 = renderer.render(mobiledoc);

    var rendered = _renderer$render2.result;

    assert.equal(rendered, 'hello world');
  });

  test('renders a mobiledoc 0.3.1 without markers with aside', function (assert) {
    var mobiledoc = {
      version: MOBILEDOC_VERSION_0_3_1,
      atoms: [],
      cards: [],
      markups: [],
      sections: [[_mobiledocTextRendererUtilsSectionTypes.MARKUP_SECTION_TYPE, 'ASIDE', [[_mobiledocTextRendererUtilsMarkerTypes.MARKUP_MARKER_TYPE, [], 0, 'hello world']]]]
    };

    var _renderer$render3 = renderer.render(mobiledoc);

    var rendered = _renderer$render3.result;

    assert.equal(rendered, 'hello world');
  });

  test('renders a mobiledoc 0.3.2', function (assert) {
    var mobiledoc = {
      version: MOBILEDOC_VERSION_0_3_2,
      atoms: [],
      cards: [],
      markups: [],
      sections: []
    };

    var _renderer$render4 = renderer.render(mobiledoc);

    var rendered = _renderer$render4.result;

    assert.equal(rendered, '');
  });

  test('renders a mobiledoc with simple (no attributes) marker', function (assert) {
    var mobiledoc = {
      version: MOBILEDOC_VERSION_0_3,
      atoms: [],
      cards: [],
      markups: [['B']],
      sections: [[_mobiledocTextRendererUtilsSectionTypes.MARKUP_SECTION_TYPE, 'P', [[_mobiledocTextRendererUtilsMarkerTypes.MARKUP_MARKER_TYPE, [0], 1, 'hello world']]]]
    };

    var _renderer$render5 = renderer.render(mobiledoc);

    var rendered = _renderer$render5.result;

    assert.equal(rendered, 'hello world');
  });

  test('renders a mobiledoc with complex (has attributes) marker', function (assert) {
    var mobiledoc = {
      version: MOBILEDOC_VERSION_0_3,
      atoms: [],
      cards: [],
      markups: [['A', ['href', 'http://google.com']]],
      sections: [[_mobiledocTextRendererUtilsSectionTypes.MARKUP_SECTION_TYPE, 'P', [[_mobiledocTextRendererUtilsMarkerTypes.MARKUP_MARKER_TYPE, [0], 1, 'hello world']]]]
    };

    var _renderer$render6 = renderer.render(mobiledoc);

    var rendered = _renderer$render6.result;

    assert.equal(rendered, 'hello world');
  });

  test('renders a mobiledoc with multiple markups in a section', function (assert) {
    var mobiledoc = {
      version: MOBILEDOC_VERSION_0_3,
      atoms: [],
      cards: [],
      markups: [['B'], ['I']],
      sections: [[_mobiledocTextRendererUtilsSectionTypes.MARKUP_SECTION_TYPE, 'P', [[_mobiledocTextRendererUtilsMarkerTypes.MARKUP_MARKER_TYPE, [0], 0, 'hello '], // b
      [_mobiledocTextRendererUtilsMarkerTypes.MARKUP_MARKER_TYPE, [1], 0, 'brave '], // b+i
      [_mobiledocTextRendererUtilsMarkerTypes.MARKUP_MARKER_TYPE, [], 1, 'new '], // close i
      [_mobiledocTextRendererUtilsMarkerTypes.MARKUP_MARKER_TYPE, [], 1, 'world'] // close b
      ]]]
    };

    var _renderer$render7 = renderer.render(mobiledoc);

    var rendered = _renderer$render7.result;

    assert.equal(rendered, 'hello brave new world');
  });

  test('renders a mobiledoc with image section', function (assert) {
    var mobiledoc = {
      version: MOBILEDOC_VERSION_0_3,
      atoms: [],
      cards: [],
      markups: [],
      sections: [[_mobiledocTextRendererUtilsSectionTypes.IMAGE_SECTION_TYPE, 'imageUrl']]
    };

    var _renderer$render8 = renderer.render(mobiledoc);

    var rendered = _renderer$render8.result;

    assert.equal(rendered, '', 'image section is empty string');
  });

  test('renders a mobiledoc with built-in image card (as empty string)', function (assert) {
    assert.expect(1);
    var cardName = 'image-card';
    var payload = { src: 'bob.gif' };
    var mobiledoc = {
      version: MOBILEDOC_VERSION_0_3,
      atoms: [],
      cards: [[cardName, payload]],
      markups: [],
      sections: [[_mobiledocTextRendererUtilsSectionTypes.CARD_SECTION_TYPE, 0]]
    };

    var _renderer$render9 = renderer.render(mobiledoc);

    var rendered = _renderer$render9.result;

    assert.equal(rendered, '', 'card section is empty');
  });

  test('render mobiledoc with list section and list items', function (assert) {
    var mobiledoc = {
      version: MOBILEDOC_VERSION_0_3,
      atoms: [],
      cards: [],
      markups: [],
      sections: [[_mobiledocTextRendererUtilsSectionTypes.LIST_SECTION_TYPE, 'ul', [[[_mobiledocTextRendererUtilsMarkerTypes.MARKUP_MARKER_TYPE, [], 0, 'first item']], [[_mobiledocTextRendererUtilsMarkerTypes.MARKUP_MARKER_TYPE, [], 0, 'second item']]]]]
    };

    var _renderer$render10 = renderer.render(mobiledoc);

    var rendered = _renderer$render10.result;

    assert.equal(rendered, ['first item', 'second item'].join('\n'));
  });

  test('renders a mobiledoc with card section', function (assert) {
    var cardName = 'title-card';
    var card = {
      name: cardName,
      type: 'text',
      render: function render() {
        return 'Hello';
      }
    };
    var mobiledoc = {
      version: MOBILEDOC_VERSION_0_3,
      atoms: [],
      cards: [[cardName]],
      markups: [],
      sections: [[_mobiledocTextRendererUtilsSectionTypes.CARD_SECTION_TYPE, 0]]
    };
    renderer = new _mobiledocTextRenderer['default']({ cards: [card] });

    var _renderer$render11 = renderer.render(mobiledoc);

    var rendered = _renderer$render11.result;

    assert.equal(rendered, 'Hello');
  });

  test('throws when given card with invalid type', function (assert) {
    var card = {
      name: 'bad',
      type: 'other',
      render: function render() {}
    };
    assert.throws(function () {
      new _mobiledocTextRenderer['default']({ cards: [card] });
    }, // jshint ignore:line
    /Card "bad" must be type "text"/);
  });

  test('throws when given card without `render`', function (assert) {
    var card = {
      name: 'bad',
      type: 'text',
      render: undefined
    };
    assert.throws(function () {
      new _mobiledocTextRenderer['default']({ cards: [card] });
    }, // jshint ignore:line
    /Card "bad" must define.*render/);
  });

  test('throws if card render returns invalid result', function (assert) {
    var card = {
      name: 'bad',
      type: 'text',
      render: function render() {
        return [];
      }
    };
    var mobiledoc = {
      version: MOBILEDOC_VERSION_0_3,
      atoms: [],
      cards: [[card.name]],
      markups: [],
      sections: [[_mobiledocTextRendererUtilsSectionTypes.CARD_SECTION_TYPE, 0]]
    };
    renderer = new _mobiledocTextRenderer['default']({ cards: [card] });
    assert.throws(function () {
      return renderer.render(mobiledoc);
    }, /Card "bad" must render text/);
  });

  test('card may render nothing', function (assert) {
    var card = {
      name: 'ok',
      type: 'text',
      render: function render() {}
    };
    var mobiledoc = {
      version: MOBILEDOC_VERSION_0_3,
      atoms: [],
      cards: [[card.name]],
      markups: [],
      sections: [[_mobiledocTextRendererUtilsSectionTypes.CARD_SECTION_TYPE, 0]]
    };

    renderer = new _mobiledocTextRenderer['default']({ cards: [card] });
    renderer.render(mobiledoc);

    assert.ok(true, 'No error thrown');
  });

  test('rendering nested mobiledocs in cards', function (assert) {
    var cards = [{
      name: 'nested-card',
      type: 'text',
      render: function render(_ref) {
        var payload = _ref.payload;

        var _renderer$render12 = renderer.render(payload.mobiledoc);

        var rendered = _renderer$render12.result;

        return rendered;
      }
    }];

    var innerMobiledoc = {
      version: MOBILEDOC_VERSION_0_3,
      atoms: [],
      cards: [],
      markups: [],
      sections: [[_mobiledocTextRendererUtilsSectionTypes.MARKUP_SECTION_TYPE, 'P', [[_mobiledocTextRendererUtilsMarkerTypes.MARKUP_MARKER_TYPE, [], 0, 'hello world']]]]
    };

    var mobiledoc = {
      version: MOBILEDOC_VERSION_0_3,
      atoms: [],
      cards: [['nested-card', { mobiledoc: innerMobiledoc }]],
      markups: [],
      sections: [[_mobiledocTextRendererUtilsSectionTypes.CARD_SECTION_TYPE, 0]]
    };

    renderer = new _mobiledocTextRenderer['default']({ cards: cards });

    var _renderer$render13 = renderer.render(mobiledoc);

    var rendered = _renderer$render13.result;

    assert.equal(rendered, 'hello world');
  });

  test('rendering unknown card without unknownCardHandler does nothing', function (assert) {
    var mobiledoc = {
      version: MOBILEDOC_VERSION_0_3,
      atoms: [],
      cards: [['missing-card']],
      markups: [],
      sections: [[_mobiledocTextRendererUtilsSectionTypes.CARD_SECTION_TYPE, 0]]
    };
    renderer = new _mobiledocTextRenderer['default']({ cards: [], unknownCardHandler: undefined });

    var _renderer$render14 = renderer.render(mobiledoc);

    var result = _renderer$render14.result;

    assert.equal(result, '', 'empty result');
  });

  test('rendering unknown card uses unknownCardHandler', function (assert) {
    assert.expect(5);

    var cardName = 'missing-card';
    var expectedPayload = {};
    var cardOptions = {};
    var mobiledoc = {
      version: MOBILEDOC_VERSION_0_3,
      atoms: [],
      cards: [[cardName, expectedPayload]],
      markups: [],
      sections: [[_mobiledocTextRendererUtilsSectionTypes.CARD_SECTION_TYPE, 0]]
    };
    var unknownCardHandler = function unknownCardHandler(_ref2) {
      var env = _ref2.env;
      var payload = _ref2.payload;
      var options = _ref2.options;

      assert.equal(env.name, cardName, 'correct name');
      assert.ok(!env.isInEditor, 'correct isInEditor');
      assert.ok(!!env.onTeardown, 'onTeardown hook exists');

      assert.deepEqual(payload, expectedPayload, 'correct payload');
      assert.deepEqual(options, cardOptions, 'correct options');
    };
    renderer = new _mobiledocTextRenderer['default']({ cards: [], unknownCardHandler: unknownCardHandler, cardOptions: cardOptions });
    renderer.render(mobiledoc);
  });

  test('throws if given an object of cards', function (assert) {
    var cards = {};
    assert.throws(function () {
      new _mobiledocTextRenderer['default']({ cards: cards });
    }, // jshint ignore: line
    /`cards` must be passed as an array/);
  });

  test('teardown hook calls registered teardown methods', function (assert) {
    var didTeardown = undefined;
    var card = {
      name: 'ok',
      type: 'text',
      render: function render(_ref3) {
        var env = _ref3.env;

        env.onTeardown(function () {
          return didTeardown = true;
        });
      }
    };
    var mobiledoc = {
      version: MOBILEDOC_VERSION_0_3,
      atoms: [],
      cards: [[card.name]],
      markups: [],
      sections: [[_mobiledocTextRendererUtilsSectionTypes.CARD_SECTION_TYPE, 0]]
    };
    renderer = new _mobiledocTextRenderer['default']({ cards: [card] });

    var _renderer$render15 = renderer.render(mobiledoc);

    var teardown = _renderer$render15.teardown;

    assert.ok(!didTeardown, 'precond - no teardown');

    teardown();

    assert.ok(didTeardown, 'teardown callback called');
  });

  test('throws when given an unexpected mobiledoc version', function (assert) {
    var mobiledoc = {
      version: '0.1.0',
      atoms: [],
      cards: [],
      markups: [],
      sections: []
    };
    assert.throws(function () {
      return renderer.render(mobiledoc);
    }, /Unexpected Mobiledoc version.*0.1.0/);

    mobiledoc.version = '0.2.1';
    assert.throws(function () {
      return renderer.render(mobiledoc);
    }, /Unexpected Mobiledoc version.*0.2.1/);
  });

  test('renders a mobiledoc with multiple sections', function (assert) {
    var mobiledoc = {
      version: MOBILEDOC_VERSION_0_3,
      atoms: [],
      cards: [],
      markups: [],
      sections: [[_mobiledocTextRendererUtilsSectionTypes.MARKUP_SECTION_TYPE, 'P', [[_mobiledocTextRendererUtilsMarkerTypes.MARKUP_MARKER_TYPE, [], 0, 'first section']]], [_mobiledocTextRendererUtilsSectionTypes.MARKUP_SECTION_TYPE, 'P', [[_mobiledocTextRendererUtilsMarkerTypes.MARKUP_MARKER_TYPE, [], 0, 'second section']]]]
    };

    var _renderer$render16 = renderer.render(mobiledoc);

    var rendered = _renderer$render16.result;

    assert.equal(rendered, ['first section', 'second section'].join('\n'));
  });

  test('XSS: unexpected markup and list section tag names are not renderered', function (assert) {
    var mobiledoc = {
      version: MOBILEDOC_VERSION_0_3,
      atoms: [],
      cards: [],
      markups: [],
      sections: [[_mobiledocTextRendererUtilsSectionTypes.MARKUP_SECTION_TYPE, 'script', [[_mobiledocTextRendererUtilsMarkerTypes.MARKUP_MARKER_TYPE, [], 0, 'alert("markup section XSS")']]], [_mobiledocTextRendererUtilsSectionTypes.LIST_SECTION_TYPE, 'script', [[[_mobiledocTextRendererUtilsMarkerTypes.MARKUP_MARKER_TYPE, [], 0, 'alert("list section XSS")']]]]]
    };

    var _renderer$render17 = renderer.render(mobiledoc);

    var result = _renderer$render17.result;

    assert.ok(result.indexOf('script') === -1, 'no script tag rendered');
  });

  test('XSS: unexpected markup types are not rendered', function (assert) {
    var mobiledoc = {
      version: MOBILEDOC_VERSION_0_3,
      atoms: [],
      cards: [],
      markups: [['b'], // valid
      ['em'], // valid
      ['script'] // invalid
      ],
      sections: [[_mobiledocTextRendererUtilsSectionTypes.MARKUP_SECTION_TYPE, 'p', [[_mobiledocTextRendererUtilsMarkerTypes.MARKUP_MARKER_TYPE, [0], 0, 'bold text'], [_mobiledocTextRendererUtilsMarkerTypes.MARKUP_MARKER_TYPE, [1, 2], 3, 'alert("markup XSS")'], [_mobiledocTextRendererUtilsMarkerTypes.MARKUP_MARKER_TYPE, [], 0, 'plain text']]]]
    };

    var _renderer$render18 = renderer.render(mobiledoc);

    var result = _renderer$render18.result;

    assert.ok(result.indexOf('script') === -1, 'no script tag rendered');
  });

  test('renders a mobiledoc with atom', function (assert) {
    var atomName = 'hello-atom';
    var atom = {
      name: atomName,
      type: 'text',
      render: function render(_ref4) {
        var value = _ref4.value;

        return 'Hello ' + value;
      }
    };
    var mobiledoc = {
      version: MOBILEDOC_VERSION_0_3,
      atoms: [['hello-atom', 'Bob', { id: 42 }]],
      cards: [],
      markups: [],
      sections: [[_mobiledocTextRendererUtilsSectionTypes.MARKUP_SECTION_TYPE, 'P', [[_mobiledocTextRendererUtilsMarkerTypes.ATOM_MARKER_TYPE, [], 0, 0]]]]
    };
    renderer = new _mobiledocTextRenderer['default']({ atoms: [atom] });

    var _renderer$render19 = renderer.render(mobiledoc);

    var rendered = _renderer$render19.result;

    assert.equal(rendered, 'Hello Bob');
  });

  test('throws when given atom with invalid type', function (assert) {
    var atom = {
      name: 'bad',
      type: 'other',
      render: function render() {}
    };
    assert.throws(function () {
      new _mobiledocTextRenderer['default']({ atoms: [atom] });
    }, // jshint ignore:line
    /Atom "bad" must be type "text"/);
  });

  test('throws when given atom without `render`', function (assert) {
    var atom = {
      name: 'bad',
      type: 'text',
      render: undefined
    };
    assert.throws(function () {
      new _mobiledocTextRenderer['default']({ atoms: [atom] });
    }, // jshint ignore:line
    /Atom "bad" must define.*render/);
  });

  test('throws if atom render returns invalid result', function (assert) {
    var atom = {
      name: 'bad',
      type: 'text',
      render: function render() {
        return [];
      }
    };
    var mobiledoc = {
      version: MOBILEDOC_VERSION_0_3,
      atoms: [['bad', 'Bob', { id: 42 }]],
      cards: [],
      markups: [],
      sections: [[_mobiledocTextRendererUtilsSectionTypes.MARKUP_SECTION_TYPE, 'P', [[_mobiledocTextRendererUtilsMarkerTypes.ATOM_MARKER_TYPE, [], 0, 0]]]]
    };
    renderer = new _mobiledocTextRenderer['default']({ atoms: [atom] });
    assert.throws(function () {
      return renderer.render(mobiledoc);
    }, /Atom "bad" must render text/);
  });

  test('atom may render nothing', function (assert) {
    var atom = {
      name: 'ok',
      type: 'text',
      render: function render() {}
    };
    var mobiledoc = {
      version: MOBILEDOC_VERSION_0_3,
      atoms: [['ok', 'Bob', { id: 42 }]],
      cards: [],
      markups: [],
      sections: [[_mobiledocTextRendererUtilsSectionTypes.MARKUP_SECTION_TYPE, 'P', [[_mobiledocTextRendererUtilsMarkerTypes.ATOM_MARKER_TYPE, [], 0, 0]]]]
    };

    renderer = new _mobiledocTextRenderer['default']({ atoms: [atom] });
    renderer.render(mobiledoc);

    assert.ok(true, 'No error thrown');
  });

  test('rendering unknown atom without unknownAtomHandler renders value', function (assert) {
    var mobiledoc = {
      version: MOBILEDOC_VERSION_0_3,
      atoms: [['missing-atom', 'Bob', { id: 42 }]],
      cards: [],
      markups: [],
      sections: [[_mobiledocTextRendererUtilsSectionTypes.MARKUP_SECTION_TYPE, 'P', [[_mobiledocTextRendererUtilsMarkerTypes.ATOM_MARKER_TYPE, [], 0, 0]]]]
    };
    renderer = new _mobiledocTextRenderer['default']({ atoms: [], unknownAtomHandler: undefined });

    var _renderer$render20 = renderer.render(mobiledoc);

    var result = _renderer$render20.result;

    assert.equal(result, 'Bob', 'uses value');
  });

  test('rendering unknown atom uses unknownAtomHandler', function (assert) {
    assert.expect(5);

    var atomName = 'missing-atom';
    var expectedPayload = { id: 42 };
    var cardOptions = {};
    var mobiledoc = {
      version: MOBILEDOC_VERSION_0_3,
      atoms: [['missing-atom', 'Bob', { id: 42 }]],
      cards: [],
      markups: [],
      sections: [[_mobiledocTextRendererUtilsSectionTypes.MARKUP_SECTION_TYPE, 'P', [[_mobiledocTextRendererUtilsMarkerTypes.ATOM_MARKER_TYPE, [], 0, 0]]]]
    };
    var unknownAtomHandler = function unknownAtomHandler(_ref5) {
      var env = _ref5.env;
      var payload = _ref5.payload;
      var options = _ref5.options;

      assert.equal(env.name, atomName, 'correct name');
      assert.ok(!env.isInEditor, 'correct isInEditor');
      assert.ok(!!env.onTeardown, 'onTeardown hook exists');

      assert.deepEqual(payload, expectedPayload, 'correct payload');
      assert.deepEqual(options, cardOptions, 'correct options');
    };
    renderer = new _mobiledocTextRenderer['default']({ atoms: [], unknownAtomHandler: unknownAtomHandler, cardOptions: cardOptions });
    renderer.render(mobiledoc);
  });

  test('renders a mobiledoc 0.3.2 with attributes', function (assert) {
    var mobiledoc = {
      version: MOBILEDOC_VERSION_0_3_2,
      atoms: [],
      cards: [],
      markups: [],
      sections: [[_mobiledocTextRendererUtilsSectionTypes.MARKUP_SECTION_TYPE, 'P', [[0, [], 0, "Simple aligned example"]], ['data-md-text-align', 'center']]]
    };

    var _renderer$render21 = renderer.render(mobiledoc);

    var rendered = _renderer$render21.result;

    assert.equal(rendered, 'Simple aligned example');
  });
});//# sourceMappingURL=built-amd-tests.map
