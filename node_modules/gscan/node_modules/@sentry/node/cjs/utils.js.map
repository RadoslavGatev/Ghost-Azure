{"version":3,"file":"utils.js","sources":["../../src/utils.ts"],"sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\n\n/**\n * Recursively read the contents of a directory.\n *\n * @param targetDir Absolute or relative path of the directory to scan. All returned paths will be relative to this\n * directory.\n * @returns Array holding all relative paths\n */\nexport function deepReadDirSync(targetDir: string): string[] {\n  const targetDirAbsPath = path.resolve(targetDir);\n\n  if (!fs.existsSync(targetDirAbsPath)) {\n    throw new Error(`Cannot read contents of ${targetDirAbsPath}. Directory does not exist.`);\n  }\n\n  if (!fs.statSync(targetDirAbsPath).isDirectory()) {\n    throw new Error(`Cannot read contents of ${targetDirAbsPath}, because it is not a directory.`);\n  }\n\n  // This does the same thing as its containing function, `deepReadDirSync` (except that - purely for convenience - it\n  // deals in absolute paths rather than relative ones). We need this to be separate from the outer function to preserve\n  // the difference between `targetDirAbsPath` and `currentDirAbsPath`.\n  const deepReadCurrentDir = (currentDirAbsPath: string): string[] => {\n    return fs.readdirSync(currentDirAbsPath).reduce((absPaths: string[], itemName: string) => {\n      const itemAbsPath = path.join(currentDirAbsPath, itemName);\n\n      if (fs.statSync(itemAbsPath).isDirectory()) {\n        return [...absPaths, ...deepReadCurrentDir(itemAbsPath)];\n      }\n\n      return [...absPaths, itemAbsPath];\n    }, []);\n  };\n\n  return deepReadCurrentDir(targetDirAbsPath).map(absPath => path.relative(targetDirAbsPath, absPath));\n}\n"],"names":[],"mappings":";;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,eAAA,CAAA,SAAA,EAAA;AACA,EAAA,MAAA,gBAAA,GAAA,IAAA,CAAA,OAAA,CAAA,SAAA,CAAA,CAAA;AACA;AACA,EAAA,IAAA,CAAA,EAAA,CAAA,UAAA,CAAA,gBAAA,CAAA,EAAA;AACA,IAAA,MAAA,IAAA,KAAA,CAAA,CAAA,wBAAA,EAAA,gBAAA,CAAA,2BAAA,CAAA,CAAA,CAAA;AACA,GAAA;AACA;AACA,EAAA,IAAA,CAAA,EAAA,CAAA,QAAA,CAAA,gBAAA,CAAA,CAAA,WAAA,EAAA,EAAA;AACA,IAAA,MAAA,IAAA,KAAA,CAAA,CAAA,wBAAA,EAAA,gBAAA,CAAA,gCAAA,CAAA,CAAA,CAAA;AACA,GAAA;AACA;AACA;AACA;AACA;AACA,EAAA,MAAA,kBAAA,GAAA,CAAA,iBAAA,KAAA;AACA,IAAA,OAAA,EAAA,CAAA,WAAA,CAAA,iBAAA,CAAA,CAAA,MAAA,CAAA,CAAA,QAAA,EAAA,QAAA,KAAA;AACA,MAAA,MAAA,WAAA,GAAA,IAAA,CAAA,IAAA,CAAA,iBAAA,EAAA,QAAA,CAAA,CAAA;AACA;AACA,MAAA,IAAA,EAAA,CAAA,QAAA,CAAA,WAAA,CAAA,CAAA,WAAA,EAAA,EAAA;AACA,QAAA,OAAA,CAAA,GAAA,QAAA,EAAA,GAAA,kBAAA,CAAA,WAAA,CAAA,CAAA,CAAA;AACA,OAAA;AACA;AACA,MAAA,OAAA,CAAA,GAAA,QAAA,EAAA,WAAA,CAAA,CAAA;AACA,KAAA,EAAA,EAAA,CAAA,CAAA;AACA,GAAA,CAAA;AACA;AACA,EAAA,OAAA,kBAAA,CAAA,gBAAA,CAAA,CAAA,GAAA,CAAA,OAAA,IAAA,IAAA,CAAA,QAAA,CAAA,gBAAA,EAAA,OAAA,CAAA,CAAA,CAAA;AACA;;;;"}