{"version":3,"file":"console.js","sources":["../../../src/integrations/console.ts"],"sourcesContent":["import { getCurrentHub } from '@sentry/core';\nimport type { Integration } from '@sentry/types';\nimport { fill, severityLevelFromString } from '@sentry/utils';\nimport * as util from 'util';\n\n/** Console module integration */\nexport class Console implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Console';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Console.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    for (const level of ['debug', 'info', 'warn', 'error', 'log']) {\n      fill(console, level, createConsoleWrapper(level));\n    }\n  }\n}\n\n/**\n * Wrapper function that'll be used for every console level\n */\nfunction createConsoleWrapper(level: string): (originalConsoleMethod: () => void) => void {\n  return function consoleWrapper(originalConsoleMethod: () => void): () => void {\n    const sentryLevel = severityLevelFromString(level);\n\n    /* eslint-disable prefer-rest-params */\n    return function (this: typeof console): void {\n      if (getCurrentHub().getIntegration(Console)) {\n        getCurrentHub().addBreadcrumb(\n          {\n            category: 'console',\n            level: sentryLevel,\n            message: util.format.apply(undefined, arguments),\n          },\n          {\n            input: [...arguments],\n            level,\n          },\n        );\n      }\n\n      originalConsoleMethod.apply(this, arguments);\n    };\n    /* eslint-enable prefer-rest-params */\n  };\n}\n"],"names":[],"mappings":";;;;AAKA;AACA,MAAA,OAAA,EAAA,CAAA,WAAA,GAAA,EAAA,OAAA,CAAA,SAAA,CAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,EAAA;AACA;AACA;AACA;AACA,GAAA,OAAA,YAAA,GAAA,CAAA,IAAA,CAAA,EAAA,GAAA,UAAA,CAAA;AACA;AACA;AACA;AACA;AACA,GAAA,MAAA,GAAA,CAAA,IAAA,CAAA,IAAA,GAAA,OAAA,CAAA,GAAA,CAAA;AACA;AACA;AACA;AACA;AACA,GAAA,SAAA,GAAA;AACA,IAAA,KAAA,MAAA,KAAA,IAAA,CAAA,OAAA,EAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,KAAA,CAAA,EAAA;AACA,MAAA,IAAA,CAAA,OAAA,EAAA,KAAA,EAAA,oBAAA,CAAA,KAAA,CAAA,CAAA,CAAA;AACA,KAAA;AACA,GAAA;AACA,CAAA,CAAA,OAAA,CAAA,YAAA,EAAA,CAAA;AACA;AACA;AACA;AACA;AACA,SAAA,oBAAA,CAAA,KAAA,EAAA;AACA,EAAA,OAAA,SAAA,cAAA,CAAA,qBAAA,EAAA;AACA,IAAA,MAAA,WAAA,GAAA,uBAAA,CAAA,KAAA,CAAA,CAAA;AACA;AACA;AACA,IAAA,OAAA,YAAA;AACA,MAAA,IAAA,aAAA,EAAA,CAAA,cAAA,CAAA,OAAA,CAAA,EAAA;AACA,QAAA,aAAA,EAAA,CAAA,aAAA;AACA,UAAA;AACA,YAAA,QAAA,EAAA,SAAA;AACA,YAAA,KAAA,EAAA,WAAA;AACA,YAAA,OAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,CAAA,SAAA,EAAA,SAAA,CAAA;AACA,WAAA;AACA,UAAA;AACA,YAAA,KAAA,EAAA,CAAA,GAAA,SAAA,CAAA;AACA,YAAA,KAAA;AACA,WAAA;AACA,SAAA,CAAA;AACA,OAAA;AACA;AACA,MAAA,qBAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AACA,KAAA,CAAA;AACA;AACA,GAAA,CAAA;AACA;;;;"}