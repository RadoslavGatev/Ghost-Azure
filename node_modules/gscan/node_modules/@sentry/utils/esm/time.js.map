{"version":3,"file":"time.js","sources":["../../src/time.ts"],"sourcesContent":["import { dynamicRequire, isNodeEnv } from './node';\nimport { getGlobalObject } from './worldwide';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject<Window>();\n\n/**\n * An object that can return the current timestamp in seconds since the UNIX epoch.\n */\ninterface TimestampSource {\n  nowSeconds(): number;\n}\n\n/**\n * A TimestampSource implementation for environments that do not support the Performance Web API natively.\n *\n * Note that this TimestampSource does not use a monotonic clock. A call to `nowSeconds` may return a timestamp earlier\n * than a previously returned value. We do not try to emulate a monotonic behavior in order to facilitate debugging. It\n * is more obvious to explain \"why does my span have negative duration\" than \"why my spans have zero duration\".\n */\nconst dateTimestampSource: TimestampSource = {\n  nowSeconds: () => Date.now() / 1000,\n};\n\n/**\n * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n * for accessing a high-resolution monotonic clock.\n */\ninterface Performance {\n  /**\n   * The millisecond timestamp at which measurement began, measured in Unix time.\n   */\n  timeOrigin: number;\n  /**\n   * Returns the current millisecond timestamp, where 0 represents the start of measurement.\n   */\n  now(): number;\n}\n\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\nfunction getBrowserPerformance(): Performance | undefined {\n  const { performance } = WINDOW;\n  if (!performance || !performance.now) {\n    return undefined;\n  }\n\n  // Replace performance.timeOrigin with our own timeOrigin based on Date.now().\n  //\n  // This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +\n  // performance.now() gives a date arbitrarily in the past.\n  //\n  // Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is\n  // undefined.\n  //\n  // The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to\n  // interact with data coming out of performance entries.\n  //\n  // Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that\n  // might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes\n  // performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have\n  // observed skews that can be as long as days, weeks or months.\n  //\n  // See https://github.com/getsentry/sentry-javascript/issues/2590.\n  //\n  // BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload\n  // transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation\n  // transactions of long-lived web pages.\n  const timeOrigin = Date.now() - performance.now();\n\n  return {\n    now: () => performance.now(),\n    timeOrigin,\n  };\n}\n\n/**\n * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't\n * implement the API.\n */\nfunction getNodePerformance(): Performance | undefined {\n  try {\n    const perfHooks = dynamicRequire(module, 'perf_hooks') as { performance: Performance };\n    return perfHooks.performance;\n  } catch (_) {\n    return undefined;\n  }\n}\n\n/**\n * The Performance API implementation for the current platform, if available.\n */\nconst platformPerformance: Performance | undefined = isNodeEnv() ? getNodePerformance() : getBrowserPerformance();\n\nconst timestampSource: TimestampSource =\n  platformPerformance === undefined\n    ? dateTimestampSource\n    : {\n        nowSeconds: () => (platformPerformance.timeOrigin + platformPerformance.now()) / 1000,\n      };\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */\nexport const dateTimestampInSeconds: () => number = dateTimestampSource.nowSeconds.bind(dateTimestampSource);\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * See `usingPerformanceAPI` to test whether the Performance API is used.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\nexport const timestampInSeconds: () => number = timestampSource.nowSeconds.bind(timestampSource);\n\n// Re-exported with an old name for backwards-compatibility.\nexport const timestampWithMs = timestampInSeconds;\n\n/**\n * A boolean that is true when timestampInSeconds uses the Performance API to produce monotonic timestamps.\n */\nexport const usingPerformanceAPI = platformPerformance !== undefined;\n\n/**\n * Internal helper to store what is the source of browserPerformanceTimeOrigin below. For debugging only.\n */\nexport let _browserPerformanceTimeOriginMode: string;\n\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\nexport const browserPerformanceTimeOrigin = ((): number | undefined => {\n  // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n  // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n  // data as reliable if they are within a reasonable threshold of the current time.\n\n  const { performance } = WINDOW;\n  if (!performance || !performance.now) {\n    _browserPerformanceTimeOriginMode = 'none';\n    return undefined;\n  }\n\n  const threshold = 3600 * 1000;\n  const performanceNow = performance.now();\n  const dateNow = Date.now();\n\n  // if timeOrigin isn't available set delta to threshold so it isn't used\n  const timeOriginDelta = performance.timeOrigin\n    ? Math.abs(performance.timeOrigin + performanceNow - dateNow)\n    : threshold;\n  const timeOriginIsReliable = timeOriginDelta < threshold;\n\n  // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n  // eslint-disable-next-line deprecation/deprecation\n  const navigationStart = performance.timing && performance.timing.navigationStart;\n  const hasNavigationStart = typeof navigationStart === 'number';\n  // if navigationStart isn't available set delta to threshold so it isn't used\n  const navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;\n  const navigationStartIsReliable = navigationStartDelta < threshold;\n\n  if (timeOriginIsReliable || navigationStartIsReliable) {\n    // Use the more reliable time origin\n    if (timeOriginDelta <= navigationStartDelta) {\n      _browserPerformanceTimeOriginMode = 'timeOrigin';\n      return performance.timeOrigin;\n    } else {\n      _browserPerformanceTimeOriginMode = 'navigationStart';\n      return navigationStart;\n    }\n  }\n\n  // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n  _browserPerformanceTimeOriginMode = 'dateNow';\n  return dateNow;\n})();\n"],"names":[],"mappings":";;;AAGA;AACA,MAAA,MAAA,GAAA,eAAA,EAAA,CAAA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAA,mBAAA,GAAA;AACA,EAAA,UAAA,EAAA,MAAA,IAAA,CAAA,GAAA,EAAA,GAAA,IAAA;AACA,CAAA,CAAA;AACA;AACA;AACA;AACA;AACA;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,qBAAA,GAAA;AACA,EAAA,MAAA,EAAA,WAAA,EAAA,GAAA,MAAA,CAAA;AACA,EAAA,IAAA,CAAA,WAAA,IAAA,CAAA,WAAA,CAAA,GAAA,EAAA;AACA,IAAA,OAAA,SAAA,CAAA;AACA,GAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAA,MAAA,UAAA,GAAA,IAAA,CAAA,GAAA,EAAA,GAAA,WAAA,CAAA,GAAA,EAAA,CAAA;AACA;AACA,EAAA,OAAA;AACA,IAAA,GAAA,EAAA,MAAA,WAAA,CAAA,GAAA,EAAA;AACA,IAAA,UAAA;AACA,GAAA,CAAA;AACA,CAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,kBAAA,GAAA;AACA,EAAA,IAAA;AACA,IAAA,MAAA,SAAA,GAAA,cAAA,CAAA,MAAA,EAAA,YAAA,CAAA,EAAA;AACA,IAAA,OAAA,SAAA,CAAA,WAAA,CAAA;AACA,GAAA,CAAA,OAAA,CAAA,EAAA;AACA,IAAA,OAAA,SAAA,CAAA;AACA,GAAA;AACA,CAAA;AACA;AACA;AACA;AACA;AACA,MAAA,mBAAA,GAAA,SAAA,EAAA,GAAA,kBAAA,EAAA,GAAA,qBAAA,EAAA,CAAA;AACA;AACA,MAAA,eAAA;AACA,EAAA,mBAAA,KAAA,SAAA;AACA,MAAA,mBAAA;AACA,MAAA;AACA,QAAA,UAAA,EAAA,MAAA,CAAA,mBAAA,CAAA,UAAA,GAAA,mBAAA,CAAA,GAAA,EAAA,IAAA,IAAA;AACA,OAAA,CAAA;AACA;AACA;AACA;AACA;AACA,MAAA,sBAAA,GAAA,mBAAA,CAAA,UAAA,CAAA,IAAA,CAAA,mBAAA,EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAA,kBAAA,GAAA,eAAA,CAAA,UAAA,CAAA,IAAA,CAAA,eAAA,EAAA;AACA;AACA;AACA,MAAA,eAAA,GAAA,mBAAA;AACA;AACA;AACA;AACA;AACA,MAAA,mBAAA,GAAA,mBAAA,KAAA,UAAA;AACA;AACA;AACA;AACA;AACA,IAAA,kCAAA;AACA;AACA;AACA;AACA;AACA;AACA,MAAA,4BAAA,GAAA,CAAA,MAAA;AACA;AACA;AACA;AACA;AACA,EAAA,MAAA,EAAA,WAAA,EAAA,GAAA,MAAA,CAAA;AACA,EAAA,IAAA,CAAA,WAAA,IAAA,CAAA,WAAA,CAAA,GAAA,EAAA;AACA,IAAA,iCAAA,GAAA,MAAA,CAAA;AACA,IAAA,OAAA,SAAA,CAAA;AACA,GAAA;AACA;AACA,EAAA,MAAA,SAAA,GAAA,IAAA,GAAA,IAAA,CAAA;AACA,EAAA,MAAA,cAAA,GAAA,WAAA,CAAA,GAAA,EAAA,CAAA;AACA,EAAA,MAAA,OAAA,GAAA,IAAA,CAAA,GAAA,EAAA,CAAA;AACA;AACA;AACA,EAAA,MAAA,eAAA,GAAA,WAAA,CAAA,UAAA;AACA,MAAA,IAAA,CAAA,GAAA,CAAA,WAAA,CAAA,UAAA,GAAA,cAAA,GAAA,OAAA,CAAA;AACA,MAAA,SAAA,CAAA;AACA,EAAA,MAAA,oBAAA,GAAA,eAAA,GAAA,SAAA,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAA,MAAA,eAAA,GAAA,WAAA,CAAA,MAAA,IAAA,WAAA,CAAA,MAAA,CAAA,eAAA,CAAA;AACA,EAAA,MAAA,kBAAA,GAAA,OAAA,eAAA,KAAA,QAAA,CAAA;AACA;AACA,EAAA,MAAA,oBAAA,GAAA,kBAAA,GAAA,IAAA,CAAA,GAAA,CAAA,eAAA,GAAA,cAAA,GAAA,OAAA,CAAA,GAAA,SAAA,CAAA;AACA,EAAA,MAAA,yBAAA,GAAA,oBAAA,GAAA,SAAA,CAAA;AACA;AACA,EAAA,IAAA,oBAAA,IAAA,yBAAA,EAAA;AACA;AACA,IAAA,IAAA,eAAA,IAAA,oBAAA,EAAA;AACA,MAAA,iCAAA,GAAA,YAAA,CAAA;AACA,MAAA,OAAA,WAAA,CAAA,UAAA,CAAA;AACA,KAAA,MAAA;AACA,MAAA,iCAAA,GAAA,iBAAA,CAAA;AACA,MAAA,OAAA,eAAA,CAAA;AACA,KAAA;AACA,GAAA;AACA;AACA;AACA,EAAA,iCAAA,GAAA,SAAA,CAAA;AACA,EAAA,OAAA,OAAA,CAAA;AACA,CAAA;;;;"}