{"version":3,"file":"logger.js","sources":["../../src/logger.ts"],"sourcesContent":["import type { WrappedFunction } from '@sentry/types';\n\nimport { getGlobalSingleton, GLOBAL_OBJ } from './worldwide';\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\nexport const CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert', 'trace'] as const;\nexport type ConsoleLevel = typeof CONSOLE_LEVELS[number];\n\ntype LoggerMethod = (...args: unknown[]) => void;\ntype LoggerConsoleMethods = Record<typeof CONSOLE_LEVELS[number], LoggerMethod>;\n\n/** JSDoc */\ninterface Logger extends LoggerConsoleMethods {\n  disable(): void;\n  enable(): void;\n}\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nexport function consoleSandbox<T>(callback: () => T): T {\n  if (!('console' in GLOBAL_OBJ)) {\n    return callback();\n  }\n\n  const originalConsole = GLOBAL_OBJ.console as Console & Record<string, unknown>;\n  const wrappedLevels: Partial<LoggerConsoleMethods> = {};\n\n  // Restore all wrapped console methods\n  CONSOLE_LEVELS.forEach(level => {\n    // TODO(v7): Remove this check as it's only needed for Node 6\n    const originalWrappedFunc =\n      originalConsole[level] && (originalConsole[level] as WrappedFunction).__sentry_original__;\n    if (level in originalConsole && originalWrappedFunc) {\n      wrappedLevels[level] = originalConsole[level] as LoggerConsoleMethods[typeof level];\n      originalConsole[level] = originalWrappedFunc as Console[typeof level];\n    }\n  });\n\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    Object.keys(wrappedLevels).forEach(level => {\n      originalConsole[level] = wrappedLevels[level as typeof CONSOLE_LEVELS[number]];\n    });\n  }\n}\n\nfunction makeLogger(): Logger {\n  let enabled = false;\n  const logger: Partial<Logger> = {\n    enable: () => {\n      enabled = true;\n    },\n    disable: () => {\n      enabled = false;\n    },\n  };\n\n  if (__DEBUG_BUILD__) {\n    CONSOLE_LEVELS.forEach(name => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      logger[name] = (...args: any[]) => {\n        if (enabled) {\n          consoleSandbox(() => {\n            GLOBAL_OBJ.console[name](`${PREFIX}[${name}]:`, ...args);\n          });\n        }\n      };\n    });\n  } else {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = () => undefined;\n    });\n  }\n\n  return logger as Logger;\n}\n\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nlet logger: Logger;\nif (__DEBUG_BUILD__) {\n  logger = getGlobalSingleton('logger', makeLogger);\n} else {\n  logger = makeLogger();\n}\n\nexport { logger };\n"],"names":[],"mappings":";;AAIA;AACA,MAAA,MAAA,GAAA,gBAAA,CAAA;AACA;AACA,MAAA,cAAA,GAAA,CAAA,OAAA,EAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,KAAA,EAAA,QAAA,EAAA,OAAA,CAAA,EAAA;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,cAAA,CAAA,QAAA,EAAA;AACA,EAAA,IAAA,EAAA,SAAA,IAAA,UAAA,CAAA,EAAA;AACA,IAAA,OAAA,QAAA,EAAA,CAAA;AACA,GAAA;AACA;AACA,EAAA,MAAA,eAAA,GAAA,UAAA,CAAA,OAAA,EAAA;AACA,EAAA,MAAA,aAAA,GAAA,EAAA,CAAA;AACA;AACA;AACA,EAAA,cAAA,CAAA,OAAA,CAAA,KAAA,IAAA;AACA;AACA,IAAA,MAAA,mBAAA;AACA,MAAA,eAAA,CAAA,KAAA,CAAA,IAAA,CAAA,eAAA,CAAA,KAAA,CAAA,GAAA,mBAAA,CAAA;AACA,IAAA,IAAA,KAAA,IAAA,eAAA,IAAA,mBAAA,EAAA;AACA,MAAA,aAAA,CAAA,KAAA,CAAA,GAAA,eAAA,CAAA,KAAA,CAAA,EAAA;AACA,MAAA,eAAA,CAAA,KAAA,CAAA,GAAA,mBAAA,EAAA;AACA,KAAA;AACA,GAAA,CAAA,CAAA;AACA;AACA,EAAA,IAAA;AACA,IAAA,OAAA,QAAA,EAAA,CAAA;AACA,GAAA,SAAA;AACA;AACA,IAAA,MAAA,CAAA,IAAA,CAAA,aAAA,CAAA,CAAA,OAAA,CAAA,KAAA,IAAA;AACA,MAAA,eAAA,CAAA,KAAA,CAAA,GAAA,aAAA,CAAA,KAAA,EAAA,CAAA;AACA,KAAA,CAAA,CAAA;AACA,GAAA;AACA,CAAA;AACA;AACA,SAAA,UAAA,GAAA;AACA,EAAA,IAAA,OAAA,GAAA,KAAA,CAAA;AACA,EAAA,MAAA,MAAA,GAAA;AACA,IAAA,MAAA,EAAA,MAAA;AACA,MAAA,OAAA,GAAA,IAAA,CAAA;AACA,KAAA;AACA,IAAA,OAAA,EAAA,MAAA;AACA,MAAA,OAAA,GAAA,KAAA,CAAA;AACA,KAAA;AACA,GAAA,CAAA;AACA;AACA,EAAA,KAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,GAAA;AACA,IAAA,cAAA,CAAA,OAAA,CAAA,IAAA,IAAA;AACA;AACA,MAAA,MAAA,CAAA,IAAA,CAAA,GAAA,CAAA,GAAA,IAAA,KAAA;AACA,QAAA,IAAA,OAAA,EAAA;AACA,UAAA,cAAA,CAAA,MAAA;AACA,YAAA,UAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,CAAA,EAAA,IAAA,CAAA,EAAA,CAAA,EAAA,GAAA,IAAA,CAAA,CAAA;AACA,WAAA,CAAA,CAAA;AACA,SAAA;AACA,OAAA,CAAA;AACA,KAAA,CAAA,CAAA;AACA,GAAA,MAAA;AACA,IAAA,cAAA,CAAA,OAAA,CAAA,IAAA,IAAA;AACA,MAAA,MAAA,CAAA,IAAA,CAAA,GAAA,MAAA,SAAA,CAAA;AACA,KAAA,CAAA,CAAA;AACA,GAAA;AACA;AACA,EAAA,OAAA,MAAA,EAAA;AACA,CAAA;AACA;AACA;AACA,IAAA,OAAA;AACA,KAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,GAAA;AACA,EAAA,MAAA,GAAA,kBAAA,CAAA,QAAA,EAAA,UAAA,CAAA,CAAA;AACA,CAAA,MAAA;AACA,EAAA,MAAA,GAAA,UAAA,EAAA,CAAA;AACA;;;;"}