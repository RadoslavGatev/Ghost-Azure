{"version":3,"file":"applicationinsights.js","sourceRoot":"","sources":["../applicationinsights.ts"],"names":[],"mappings":"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","sourcesContent":["import CorrelationContextManager = require(\"./AutoCollection/CorrelationContextManager\"); // Keep this first\r\nimport AutoCollectConsole = require(\"./AutoCollection/Console\");\r\nimport AutoCollectExceptions = require(\"./AutoCollection/Exceptions\");\r\nimport AutoCollectPerformance = require(\"./AutoCollection/Performance\");\r\nimport HeartBeat = require(\"./AutoCollection/HeartBeat\");\r\nimport AutoCollectHttpDependencies = require(\"./AutoCollection/HttpDependencies\");\r\nimport AutoCollectHttpRequests = require(\"./AutoCollection/HttpRequests\");\r\nimport CorrelationIdManager = require(\"./Library/CorrelationIdManager\");\r\nimport Logging = require(\"./Library/Logging\");\r\nimport QuickPulseClient = require(\"./Library/QuickPulseStateManager\");\r\nimport Traceparent = require(\"./Library/Traceparent\");\r\nimport Tracestate = require(\"./Library/Tracestate\");\r\nimport HttpRequestParser = require(\"./AutoCollection/HttpRequestParser\");\r\nimport { IncomingMessage } from \"http\";\r\nimport { ISpanContext } from \"diagnostic-channel\";\r\n\r\nimport { AutoCollectNativePerformance, IDisabledExtendedMetrics } from \"./AutoCollection/NativePerformance\";\r\n\r\n// We export these imports so that SDK users may use these classes directly.\r\n// They're exposed using \"export import\" so that types are passed along as expected\r\nexport import TelemetryClient = require(\"./Library/NodeClient\");\r\nexport import Contracts = require(\"./Declarations/Contracts\");\r\nexport import azureFunctionsTypes = require(\"./Library/Functions\");\r\n\r\nexport enum DistributedTracingModes {\r\n    /**\r\n     * (Default) Send Application Insights correlation headers\r\n     */\r\n\r\n    AI=0,\r\n\r\n    /**\r\n     * Send both W3C Trace Context headers and back-compatibility Application Insights headers\r\n     */\r\n    AI_AND_W3C\r\n}\r\n\r\n// Default autocollection configuration\r\nlet _isConsole = true;\r\nlet _isConsoleLog = false;\r\nlet _isExceptions = true;\r\nlet _isPerformance = true;\r\nlet _isHeartBeat = false; // off by default for now\r\nlet _isRequests = true;\r\nlet _isDependencies = true;\r\nlet _isDiskRetry = true;\r\nlet _isCorrelating = true;\r\nlet _forceClsHooked: boolean;\r\nlet _isSendingLiveMetrics = false; // Off by default\r\nlet _isNativePerformance = true;\r\nlet _disabledExtendedMetrics: IDisabledExtendedMetrics;\r\n\r\nlet _diskRetryInterval: number = undefined;\r\nlet _diskRetryMaxBytes: number = undefined;\r\n\r\nlet _console: AutoCollectConsole;\r\nlet _exceptions: AutoCollectExceptions;\r\nlet _performance: AutoCollectPerformance;\r\nlet _heartbeat: HeartBeat;\r\nlet _nativePerformance: AutoCollectNativePerformance;\r\nlet _serverRequests: AutoCollectHttpRequests;\r\nlet _clientRequests: AutoCollectHttpDependencies;\r\n\r\nlet _isStarted = false;\r\n\r\n/**\r\n* The default client, initialized when setup was called. To initialize a different client\r\n* with its own configuration, use `new TelemetryClient(instrumentationKey?)`.\r\n*/\r\nexport let defaultClient: TelemetryClient;\r\nexport let liveMetricsClient: QuickPulseClient;\r\nlet _performanceLiveMetrics: AutoCollectPerformance;\r\n\r\n/**\r\n * Initializes the default client. Should be called after setting\r\n * configuration options.\r\n *\r\n * @param setupString the Connection String or Instrumentation Key to use. Optional, if\r\n * this is not specified, the value will be read from the environment\r\n * variable APPLICATIONINSIGHTS_CONNECTION_STRING or APPINSIGHTS_INSTRUMENTATIONKEY.\r\n * @returns {Configuration} the configuration class to initialize\r\n * and start the SDK.\r\n */\r\nexport function setup(setupString?: string) {\r\n    if(!defaultClient) {\r\n        defaultClient = new TelemetryClient(setupString);\r\n        _console = new AutoCollectConsole(defaultClient);\r\n        _exceptions = new AutoCollectExceptions(defaultClient);\r\n        _performance = new AutoCollectPerformance(defaultClient);\r\n        _heartbeat = new HeartBeat(defaultClient);\r\n        _serverRequests = new AutoCollectHttpRequests(defaultClient);\r\n        _clientRequests = new AutoCollectHttpDependencies(defaultClient);\r\n        if (!_nativePerformance) {\r\n            _nativePerformance = new AutoCollectNativePerformance(defaultClient);\r\n        }\r\n    } else {\r\n        Logging.info(\"The default client is already setup\");\r\n    }\r\n\r\n    if (defaultClient && defaultClient.channel) {\r\n        defaultClient.channel.setUseDiskRetryCaching(_isDiskRetry, _diskRetryInterval, _diskRetryMaxBytes);\r\n    }\r\n\r\n    return Configuration;\r\n}\r\n\r\n/**\r\n * Starts automatic collection of telemetry. Prior to calling start no\r\n * telemetry will be *automatically* collected, though manual collection\r\n * is enabled.\r\n * @returns {ApplicationInsights} this class\r\n */\r\nexport function start() {\r\n    if(!!defaultClient) {\r\n        _isStarted = true;\r\n        _console.enable(_isConsole, _isConsoleLog);\r\n        _exceptions.enable(_isExceptions);\r\n        _performance.enable(_isPerformance);\r\n        _heartbeat.enable(_isHeartBeat, defaultClient.config);\r\n        _nativePerformance.enable(_isNativePerformance, _disabledExtendedMetrics);\r\n        _serverRequests.useAutoCorrelation(_isCorrelating, _forceClsHooked);\r\n        _serverRequests.enable(_isRequests);\r\n        _clientRequests.enable(_isDependencies);\r\n        if (liveMetricsClient && _isSendingLiveMetrics) {\r\n            liveMetricsClient.enable(_isSendingLiveMetrics);\r\n        }\r\n    } else {\r\n        Logging.warn(\"Start cannot be called before setup\");\r\n    }\r\n\r\n    return Configuration;\r\n}\r\n\r\n/**\r\n * Returns an object that is shared across all code handling a given request.\r\n * This can be used similarly to thread-local storage in other languages.\r\n * Properties set on this object will be available to telemetry processors.\r\n *\r\n * Do not store sensitive information here.\r\n * Custom properties set on this object can be exposed in a future SDK\r\n * release via outgoing HTTP headers.\r\n * This is to allow for correlating data cross-component.\r\n *\r\n * This method will return null if automatic dependency correlation is disabled.\r\n * @returns A plain object for request storage or null if automatic dependency correlation is disabled.\r\n */\r\nexport function getCorrelationContext(): CorrelationContextManager.CorrelationContext {\r\n    if (_isCorrelating) {\r\n        return CorrelationContextManager.CorrelationContextManager.getCurrentContext();\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n/**\r\n * **(Experimental!)**\r\n * Starts a fresh context or propagates the current internal one.\r\n */\r\nexport function startOperation(context: ISpanContext, name: string): CorrelationContextManager.CorrelationContext | null;\r\nexport function startOperation(context: azureFunctionsTypes.Context, request: azureFunctionsTypes.HttpRequest): CorrelationContextManager.CorrelationContext | null;\r\nexport function startOperation(context: azureFunctionsTypes.Context, name: string): CorrelationContextManager.CorrelationContext | null;\r\nexport function startOperation(context: IncomingMessage | azureFunctionsTypes.HttpRequest, request?: never): CorrelationContextManager.CorrelationContext | null;\r\nexport function startOperation(context: azureFunctionsTypes.Context | (IncomingMessage | azureFunctionsTypes.HttpRequest) | (ISpanContext), request?: azureFunctionsTypes.HttpRequest | string): CorrelationContextManager.CorrelationContext | null {\r\n    return CorrelationContextManager.CorrelationContextManager.startOperation(context, request);\r\n}\r\n\r\n/**\r\n * Returns a function that will get the same correlation context within its\r\n * function body as the code executing this function.\r\n * Use this method if automatic dependency correlation is not propagating\r\n * correctly to an asynchronous callback.\r\n */\r\nexport function wrapWithCorrelationContext<T extends Function>(fn: T, context?: CorrelationContextManager.CorrelationContext): T {\r\n    return CorrelationContextManager.CorrelationContextManager.wrapCallback(fn, context);\r\n}\r\n\r\n/**\r\n * The active configuration for global SDK behaviors, such as autocollection.\r\n */\r\nexport class Configuration {\r\n    // Convenience shortcut to ApplicationInsights.start\r\n    public static start = start;\r\n\r\n     /**\r\n      * Sets the distributed tracing modes. If W3C mode is enabled, W3C trace context\r\n      * headers (traceparent/tracestate) will be parsed in all incoming requests, and included in outgoing\r\n      * requests. In W3C mode, existing back-compatibility AI headers will also be parsed and included.\r\n      * Enabling W3C mode will not break existing correlation with other Application Insights instrumented\r\n      * services. Default=AI\r\n     */\r\n    public static setDistributedTracingMode(value: DistributedTracingModes) {\r\n        CorrelationIdManager.w3cEnabled = value === DistributedTracingModes.AI_AND_W3C;\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of console and logger tracking (enabled by default for third-party loggers only)\r\n     * @param value if true logger activity will be sent to Application Insights\r\n     * @param collectConsoleLog if true, logger autocollection will include console.log calls (default false)\r\n     * @returns {Configuration} this class\r\n     */\r\n    public static setAutoCollectConsole(value: boolean, collectConsoleLog: boolean = false) {\r\n        _isConsole = value;\r\n        _isConsoleLog = collectConsoleLog;\r\n        if (_isStarted){\r\n            _console.enable(value, collectConsoleLog);\r\n        }\r\n\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of exception tracking (enabled by default)\r\n     * @param value if true uncaught exceptions will be sent to Application Insights\r\n     * @returns {Configuration} this class\r\n     */\r\n    public static setAutoCollectExceptions(value: boolean) {\r\n        _isExceptions = value;\r\n        if (_isStarted){\r\n            _exceptions.enable(value);\r\n        }\r\n\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of performance tracking (enabled by default)\r\n     * @param value if true performance counters will be collected every second and sent to Application Insights\r\n     * @param collectExtendedMetrics if true, extended metrics counters will be collected every minute and sent to Application Insights\r\n     * @returns {Configuration} this class\r\n     */\r\n    public static setAutoCollectPerformance(value: boolean, collectExtendedMetrics: boolean | IDisabledExtendedMetrics = true) {\r\n        _isPerformance = value;\r\n        const extendedMetricsConfig = AutoCollectNativePerformance.parseEnabled(collectExtendedMetrics);\r\n        _isNativePerformance = extendedMetricsConfig.isEnabled;\r\n        _disabledExtendedMetrics = extendedMetricsConfig.disabledMetrics;\r\n        if (_isStarted) {\r\n            _performance.enable(value);\r\n            _nativePerformance.enable(extendedMetricsConfig.isEnabled, extendedMetricsConfig.disabledMetrics);\r\n        }\r\n\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of request tracking (enabled by default)\r\n     * @param value if true HeartBeat metric data will be collected every 15 mintues and sent to Application Insights\r\n     * @returns {Configuration} this class\r\n     */\r\n    public static setAutoCollectHeartbeat(value: boolean) {\r\n        _isHeartBeat = value;\r\n        if (_isStarted) {\r\n            _heartbeat.enable(value, defaultClient.config);\r\n        }\r\n\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of request tracking (enabled by default)\r\n     * @param value if true requests will be sent to Application Insights\r\n     * @returns {Configuration} this class\r\n     */\r\n    public static setAutoCollectRequests(value: boolean) {\r\n        _isRequests = value;\r\n        if (_isStarted) {\r\n            _serverRequests.enable(value);\r\n        }\r\n\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of dependency tracking (enabled by default)\r\n     * @param value if true dependencies will be sent to Application Insights\r\n     * @returns {Configuration} this class\r\n     */\r\n    public static setAutoCollectDependencies(value: boolean) {\r\n        _isDependencies = value;\r\n        if (_isStarted) {\r\n            _clientRequests.enable(value);\r\n        }\r\n\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Sets the state of automatic dependency correlation (enabled by default)\r\n     * @param value if true dependencies will be correlated with requests\r\n     * @param useAsyncHooks if true, forces use of experimental async_hooks module to provide correlation. If false, instead uses only patching-based techniques. If left blank, the best option is chosen for you based on your version of Node.js.\r\n     * @returns {Configuration} this class\r\n     */\r\n    public static setAutoDependencyCorrelation(value: boolean, useAsyncHooks?: boolean) {\r\n        _isCorrelating = value;\r\n        _forceClsHooked = useAsyncHooks;\r\n        if (_isStarted) {\r\n            _serverRequests.useAutoCorrelation(value, useAsyncHooks);\r\n        }\r\n\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable disk-backed retry caching to cache events when client is offline (enabled by default)\r\n     * Note that this method only applies to the default client. Disk-backed retry caching is disabled by default for additional clients.\r\n     * For enable for additional clients, use client.channel.setUseDiskRetryCaching(true).\r\n     * These cached events are stored in your system or user's temporary directory and access restricted to your user when possible.\r\n     * @param value if true events that occured while client is offline will be cached on disk\r\n     * @param resendInterval The wait interval for resending cached events.\r\n     * @param maxBytesOnDisk The maximum size (in bytes) that the created temporary directory for cache events can grow to, before caching is disabled.\r\n     * @returns {Configuration} this class\r\n     */\r\n    public static setUseDiskRetryCaching(value: boolean, resendInterval?: number, maxBytesOnDisk?: number) {\r\n        _isDiskRetry = value;\r\n        _diskRetryInterval = resendInterval;\r\n        _diskRetryMaxBytes = maxBytesOnDisk\r\n        if (defaultClient && defaultClient.channel){\r\n            defaultClient.channel.setUseDiskRetryCaching(value, resendInterval, maxBytesOnDisk);\r\n        }\r\n\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Enables debug and warning logging for AppInsights itself.\r\n     * @param enableDebugLogging if true, enables debug logging\r\n     * @param enableWarningLogging if true, enables warning logging\r\n     * @returns {Configuration} this class\r\n     */\r\n    public static setInternalLogging(enableDebugLogging = false, enableWarningLogging = true) {\r\n        Logging.enableDebug = enableDebugLogging;\r\n        Logging.disableWarnings = !enableWarningLogging;\r\n        return Configuration;\r\n    }\r\n\r\n    /**\r\n     * Enables communication with Application Insights Live Metrics.\r\n     * @param enable if true, enables communication with the live metrics service\r\n     */\r\n    public static setSendLiveMetrics(enable = false) {\r\n        if (!defaultClient) {\r\n            // Need a defaultClient so that we can add the QPS telemetry processor to it\r\n            Logging.warn(\"Live metrics client cannot be setup without the default client\");\r\n            return Configuration;\r\n        }\r\n\r\n        if (!liveMetricsClient && enable) {\r\n            // No qps client exists. Create one and prepare it to be enabled at .start()\r\n            liveMetricsClient = new QuickPulseClient(defaultClient.config.instrumentationKey);\r\n            _performanceLiveMetrics = new AutoCollectPerformance(liveMetricsClient as any, 1000, true);\r\n            liveMetricsClient.addCollector(_performanceLiveMetrics);\r\n            defaultClient.quickPulseClient = liveMetricsClient; // Need this so we can forward all manual tracks to live metrics via PerformanceMetricsTelemetryProcessor\r\n        } else if (liveMetricsClient) {\r\n            // qps client already exists; enable/disable it\r\n            liveMetricsClient.enable(enable);\r\n        }\r\n        _isSendingLiveMetrics = enable;\r\n\r\n        return Configuration;\r\n    }\r\n}\r\n\r\n/**\r\n * Disposes the default client and all the auto collectors so they can be reinitialized with different configuration\r\n*/\r\nexport function dispose() {\r\n    CorrelationIdManager.w3cEnabled = true; // reset to default\r\n    defaultClient = null;\r\n    _isStarted = false;\r\n    if (_console) {\r\n        _console.dispose();\r\n    }\r\n    if (_exceptions) {\r\n        _exceptions.dispose();\r\n    }\r\n    if (_performance) {\r\n        _performance.dispose();\r\n    }\r\n    if (_heartbeat) {\r\n        _heartbeat.dispose();\r\n    }\r\n    if (_nativePerformance) {\r\n        _nativePerformance.dispose();\r\n    }\r\n    if(_serverRequests) {\r\n        _serverRequests.dispose();\r\n    }\r\n    if(_clientRequests) {\r\n        _clientRequests.dispose();\r\n    }\r\n    if(liveMetricsClient) {\r\n        liveMetricsClient.enable(false);\r\n        _isSendingLiveMetrics = false;\r\n        liveMetricsClient = undefined;\r\n    }\r\n}\r\n"]}