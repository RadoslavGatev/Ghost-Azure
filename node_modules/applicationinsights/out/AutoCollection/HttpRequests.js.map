{"version":3,"file":"HttpRequests.js","sourceRoot":"","sources":["../../AutoCollection/HttpRequests.ts"],"names":[],"mappings":"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","sourcesContent":["import http = require(\"http\");\r\nimport https = require(\"https\");\r\nimport url = require(\"url\");\r\n\r\nimport Contracts = require(\"../Declarations/Contracts\");\r\nimport TelemetryClient = require(\"../Library/TelemetryClient\");\r\nimport Logging = require(\"../Library/Logging\");\r\nimport Util = require(\"../Library/Util\");\r\nimport RequestResponseHeaders = require(\"../Library/RequestResponseHeaders\");\r\nimport HttpRequestParser = require(\"./HttpRequestParser\");\r\nimport { CorrelationContextManager, CorrelationContext, PrivateCustomProperties } from \"./CorrelationContextManager\";\r\nimport AutoCollectPerformance = require(\"./Performance\");\r\n\r\nclass AutoCollectHttpRequests {\r\n\r\n    public static INSTANCE: AutoCollectHttpRequests;\r\n\r\n    private static alreadyAutoCollectedFlag = '_appInsightsAutoCollected';\r\n\r\n    private _client: TelemetryClient;\r\n    private _isEnabled: boolean;\r\n    private _isInitialized: boolean;\r\n    private _isAutoCorrelating: boolean;\r\n\r\n    constructor(client: TelemetryClient) {\r\n        if (!!AutoCollectHttpRequests.INSTANCE) {\r\n            throw new Error(\"Server request tracking should be configured from the applicationInsights object\");\r\n        }\r\n\r\n        AutoCollectHttpRequests.INSTANCE = this;\r\n        this._client = client;\r\n    }\r\n\r\n    public enable(isEnabled: boolean) {\r\n        this._isEnabled = isEnabled;\r\n\r\n        // Autocorrelation requires automatic monitoring of incoming server requests\r\n        // Disabling autocollection but enabling autocorrelation will still enable\r\n        // request monitoring but will not produce request events\r\n        if ((this._isAutoCorrelating || this._isEnabled || AutoCollectPerformance.isEnabled()) && !this._isInitialized) {\r\n            this.useAutoCorrelation(this._isAutoCorrelating);\r\n            this._initialize();\r\n        }\r\n    }\r\n\r\n    public useAutoCorrelation(isEnabled: boolean, forceClsHooked?: boolean) {\r\n        if (isEnabled && !this._isAutoCorrelating) {\r\n            CorrelationContextManager.enable(forceClsHooked);\r\n        } else if (!isEnabled && this._isAutoCorrelating) {\r\n            CorrelationContextManager.disable();\r\n        }\r\n        this._isAutoCorrelating = isEnabled;\r\n    }\r\n\r\n    public isInitialized() {\r\n        return this._isInitialized;\r\n    }\r\n\r\n    public isAutoCorrelating() {\r\n        return this._isAutoCorrelating;\r\n    }\r\n\r\n    private _generateCorrelationContext(requestParser: HttpRequestParser): CorrelationContext {\r\n        if (!this._isAutoCorrelating) {\r\n            return;\r\n        }\r\n\r\n        return CorrelationContextManager.generateContextObject(\r\n            requestParser.getOperationId(this._client.context.tags),\r\n            requestParser.getRequestId(),\r\n            requestParser.getOperationName(this._client.context.tags),\r\n            requestParser.getCorrelationContextHeader(),\r\n            requestParser.getTraceparent(),\r\n            requestParser.getTracestate()\r\n        );\r\n    }\r\n\r\n    private _initialize() {\r\n        this._isInitialized = true;\r\n\r\n        const wrapOnRequestHandler: Function = (onRequest?: Function) => {\r\n            if (!onRequest) {\r\n                return undefined;\r\n            }\r\n            if (typeof onRequest !== 'function') {\r\n                throw new Error('onRequest handler must be a function');\r\n            }\r\n            return (request: http.ServerRequest, response: http.ServerResponse) => {\r\n                CorrelationContextManager.wrapEmitter(request);\r\n                CorrelationContextManager.wrapEmitter(response);\r\n                const shouldCollect: boolean = request && !(<any>request)[AutoCollectHttpRequests.alreadyAutoCollectedFlag];\r\n\r\n                if (request && shouldCollect) {\r\n                    // Set up correlation context\r\n                    const requestParser = new HttpRequestParser(request);\r\n                    const correlationContext = this._generateCorrelationContext(requestParser);\r\n\r\n                    // Note: Check for if correlation is enabled happens within this method.\r\n                    // If not enabled, function will directly call the callback.\r\n                    CorrelationContextManager.runWithContext(correlationContext, () => {\r\n                        if (this._isEnabled) {\r\n                            // Mark as auto collected\r\n                            (<any>request)[AutoCollectHttpRequests.alreadyAutoCollectedFlag] = true;\r\n\r\n                            // Auto collect request\r\n                            AutoCollectHttpRequests.trackRequest(this._client, { request: request, response: response }, requestParser);\r\n                        }\r\n\r\n                        if (typeof onRequest === \"function\") {\r\n                            onRequest(request, response);\r\n                        }\r\n                    });\r\n                } else {\r\n                    if (typeof onRequest === \"function\") {\r\n                        onRequest(request, response);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // The `http.createServer` function will instantiate a new http.Server object.\r\n        // Inside the Server's constructor, it is using addListener to register the\r\n        // onRequest handler. So there are two ways to inject the wrapped onRequest handler:\r\n        // 1) Overwrite Server.prototype.addListener (and .on()) globally and not patching\r\n        //    the http.createServer call. Or\r\n        // 2) Overwrite the http.createServer method and add a patched addListener to the\r\n        //    fresh server instance. This seems more stable for possible future changes as\r\n        //    it also covers the case where the Server might not use addListener to manage\r\n        //    the callback internally.\r\n        //    And also as long as the constructor uses addListener to add the handle, it is\r\n        //    ok to patch the addListener after construction only. Because if we would patch\r\n        //    the prototype one and the createServer method, we would wrap the handler twice\r\n        //    in case of the constructor call.\r\n        const wrapServerEventHandler: Function = (server: (http.Server | https.Server)) => {\r\n            const originalAddListener = server.addListener.bind(server);\r\n            server.addListener = (eventType: string, eventHandler: Function) => {\r\n                switch (eventType) {\r\n                    case 'request':\r\n                    case 'checkContinue':\r\n                        return originalAddListener(eventType, wrapOnRequestHandler(eventHandler));\r\n                    default:\r\n                        return originalAddListener(eventType, eventHandler);\r\n                }\r\n            };\r\n            // on is an alias to addListener only\r\n            server.on = server.addListener;\r\n        }\r\n\r\n        const originalHttpServer: any = http.createServer;\r\n\r\n        // options parameter was added in Node.js v9.6.0, v8.12.0\r\n        // function createServer(requestListener?: RequestListener): Server;\r\n        // function createServer(options: ServerOptions, requestListener?: RequestListener): Server;\r\n        http.createServer = (param1?: Object, param2?: Function) => {\r\n            // todo: get a pointer to the server so the IP address can be read from server.address\r\n            if (param2 && typeof param2 === 'function') {\r\n                const server: http.Server = originalHttpServer(param1, wrapOnRequestHandler(param2));\r\n                wrapServerEventHandler(server);\r\n                return server;\r\n            }\r\n            else {\r\n                const server: http.Server = originalHttpServer(wrapOnRequestHandler(param1));\r\n                wrapServerEventHandler(server);\r\n                return server;\r\n            }\r\n        }\r\n\r\n        const originalHttpsServer = https.createServer;\r\n        https.createServer = (options: https.ServerOptions, onRequest?: Function) => {\r\n            const server: https.Server = originalHttpsServer(options, wrapOnRequestHandler(onRequest));\r\n            wrapServerEventHandler(server);\r\n            return server;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tracks a request synchronously (doesn't wait for response 'finish' event)\r\n     */\r\n    public static trackRequestSync(client: TelemetryClient, telemetry: Contracts.NodeHttpRequestTelemetry) {\r\n        if (!telemetry.request || !telemetry.response || !client) {\r\n            Logging.info(\"AutoCollectHttpRequests.trackRequestSync was called with invalid parameters: \", !telemetry.request, !telemetry.response, !client);\r\n            return;\r\n        }\r\n\r\n        AutoCollectHttpRequests.addResponseCorrelationIdHeader(client, telemetry.response);\r\n\r\n        // store data about the request\r\n        var correlationContext = CorrelationContextManager.getCurrentContext();\r\n        var requestParser = new HttpRequestParser(telemetry.request, (correlationContext && correlationContext.operation.parentId));\r\n\r\n        // Overwrite correlation context with request parser results\r\n        if (correlationContext) {\r\n            correlationContext.operation.id = requestParser.getOperationId(client.context.tags) || correlationContext.operation.id;\r\n            correlationContext.operation.name = requestParser.getOperationName(client.context.tags) || correlationContext.operation.name;\r\n            correlationContext.operation.parentId = requestParser.getRequestId() || correlationContext.operation.parentId;\r\n            (<PrivateCustomProperties>correlationContext.customProperties).addHeaderData(requestParser.getCorrelationContextHeader());\r\n        }\r\n\r\n        AutoCollectHttpRequests.endRequest(client, requestParser, telemetry, telemetry.duration, telemetry.error);\r\n    }\r\n\r\n    /**\r\n     * Tracks a request by listening to the response 'finish' event\r\n     */\r\n    public static trackRequest(client: TelemetryClient, telemetry: Contracts.NodeHttpRequestTelemetry, _requestParser?: HttpRequestParser) {\r\n        if (!telemetry.request || !telemetry.response || !client) {\r\n            Logging.info(\"AutoCollectHttpRequests.trackRequest was called with invalid parameters: \", !telemetry.request, !telemetry.response, !client);\r\n            return;\r\n        }\r\n\r\n        // store data about the request\r\n        var correlationContext = CorrelationContextManager.getCurrentContext();\r\n        var requestParser = _requestParser || new HttpRequestParser(telemetry.request, correlationContext && correlationContext.operation.parentId);\r\n\r\n        if (Util.canIncludeCorrelationHeader(client, requestParser.getUrl())) {\r\n            AutoCollectHttpRequests.addResponseCorrelationIdHeader(client, telemetry.response);\r\n        }\r\n\r\n        // Overwrite correlation context with request parser results (if not an automatic track. we've already precalculated the correlation context in that case)\r\n        if (correlationContext && !_requestParser) {\r\n            correlationContext.operation.id = requestParser.getOperationId(client.context.tags) || correlationContext.operation.id;\r\n            correlationContext.operation.name = requestParser.getOperationName(client.context.tags) || correlationContext.operation.name;\r\n            correlationContext.operation.parentId = requestParser.getOperationParentId(client.context.tags) || correlationContext.operation.parentId;\r\n            (<PrivateCustomProperties>correlationContext.customProperties).addHeaderData(requestParser.getCorrelationContextHeader());\r\n        }\r\n\r\n        // response listeners\r\n        if (telemetry.response.once) {\r\n            telemetry.response.once(\"finish\", () => {\r\n                AutoCollectHttpRequests.endRequest(client, requestParser, telemetry, null, null);\r\n            });\r\n        }\r\n\r\n        // track a failed request if an error is emitted\r\n        if (telemetry.request.on) {\r\n            telemetry.request.on(\"error\", (error: any) => {\r\n                AutoCollectHttpRequests.endRequest(client, requestParser, telemetry, null, error);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add the target correlationId to the response headers, if not already provided.\r\n     */\r\n    private static addResponseCorrelationIdHeader(client: TelemetryClient, response: http.ServerResponse) {\r\n        if (client.config && client.config.correlationId &&\r\n            response.getHeader && response.setHeader && !(<any>response).headersSent) {\r\n            const correlationHeader = <any>response.getHeader(RequestResponseHeaders.requestContextHeader);\r\n            Util.safeIncludeCorrelationHeader(client, response, correlationHeader);\r\n        }\r\n    }\r\n\r\n    private static endRequest(client: TelemetryClient, requestParser: HttpRequestParser, telemetry: Contracts.NodeHttpRequestTelemetry, ellapsedMilliseconds?: number, error?: any) {\r\n        if (error) {\r\n            requestParser.onError(error, ellapsedMilliseconds);\r\n        } else {\r\n            requestParser.onResponse(telemetry.response, ellapsedMilliseconds);\r\n        }\r\n\r\n        var requestTelemetry = requestParser.getRequestTelemetry(telemetry);\r\n\r\n        requestTelemetry.tagOverrides = requestParser.getRequestTags(client.context.tags);\r\n        if (telemetry.tagOverrides) {\r\n            for (let key in telemetry.tagOverrides) {\r\n                requestTelemetry.tagOverrides[key] = telemetry.tagOverrides[key];\r\n            }\r\n        }\r\n\r\n        const legacyRootId = requestParser.getLegacyRootId();\r\n        if (legacyRootId) {\r\n            requestTelemetry.properties[\"ai_legacyRootId\"] = legacyRootId;\r\n        }\r\n\r\n        requestTelemetry.contextObjects = requestTelemetry.contextObjects || {};\r\n        requestTelemetry.contextObjects[\"http.ServerRequest\"] = telemetry.request;\r\n        requestTelemetry.contextObjects[\"http.ServerResponse\"] = telemetry.response;\r\n\r\n        client.trackRequest(requestTelemetry);\r\n    }\r\n\r\n    public dispose() {\r\n        AutoCollectHttpRequests.INSTANCE = null;\r\n        this.enable(false);\r\n        this._isInitialized = false;\r\n        CorrelationContextManager.disable();\r\n        this._isAutoCorrelating = false;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport = AutoCollectHttpRequests;\r\n"]}