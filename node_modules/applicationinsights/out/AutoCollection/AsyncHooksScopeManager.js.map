{"version":3,"file":"AsyncHooksScopeManager.js","sourceRoot":"","sources":["../../AutoCollection/AsyncHooksScopeManager.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,yEAA2F;AAE3F,iCAAsC;AAEtC;;;GAGG;AACH,IAAY,QA6BX;AA7BD,WAAY,QAAQ;IAChB,iEAAiE;IACjE,+CAAY,CAAA;IAEZ;;;OAGG;IACH,2CAAU,CAAA;IAEV;;;OAGG;IACH,2CAAU,CAAA;IAEV;;;;OAIG;IACH,+CAAY,CAAA;IAEZ;;;;OAIG;IACH,+CAAY,CAAA;AAChB,CAAC,EA7BW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QA6BnB;AAyCD;IAAA;IA2DA,CAAC;IAxDU,iDAAM,GAAb;QAAA,iBAmBC;QAlBG,IAAM,OAAO,GAAG,qDAAyB,CAAC,iBAAiB,EAAS,CAAC;QACrE,MAAM,cACC,OAAO,IACV,QAAQ,EAAE,UAAC,GAAW;gBAClB,wDAAwD;gBACxD,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,aAAa,CAAC,CAAC,CAAC;oBACtB,KAAI,CAAC,aAAa,GAAG,GAAG,CAAC;oBACzB,MAAM,CAAC,OAAO,CAAC;gBACnB,CAAC;gBAED,EAAE,CAAC,CAAC,GAAG,KAAK,KAAI,CAAC,aAAa,CAAC,CAAC,CAAC;oBAC7B,MAAM,CAAC,OAAO,CAAC;gBACnB,CAAC;gBAED,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC,EACD,QAAQ,EAAE,cAAQ,CAAC,IACrB;IACN,CAAC;IAEM,+CAAI,GAAX,UAAY,IAAU,EAAE,EAAa;QACjC,IAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;QACvC,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACvB,IAAM,kBAAkB,GAAG,gCAAgC,CAAC,cAAc,CAAC,IAAI,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;QACrG,MAAM,CAAC,qDAAyB,CAAC,cAAc,CAAC,kBAAkB,EAAE,EAAE,CAAC,EAAE,CAAC;IAC9E,CAAC;IAEM,+CAAI,GAAX,UAAe,MAAS;QACpB,EAAE,CAAC,CAAC,OAAO,MAAM,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/B,MAAM,CAAC,qDAAyB,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QAC1D,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,YAAY,qBAAY,CAAC,CAAC,CAAC;YACxC,qDAAyB,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAClD,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAEM,iDAAM,GAAb;QACI,qDAAyB,CAAC,MAAM,EAAE,CAAC;QACnC,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEM,kDAAO,GAAd;QACI,qDAAyB,CAAC,OAAO,EAAE,CAAC;QACpC,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEc,+CAAc,GAA7B,UAA8B,IAAU,EAAE,YAAqB,EAAE,IAAa;QAC1E,IAAM,SAAS,GAAG,YAAY,GAAG,MAAI,IAAI,CAAC,OAAO,EAAE,CAAC,OAAO,SAAI,YAAY,MAAG,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC;QACxG,IAAM,OAAO,gBACN,IAAI,CAAC,OAAO,EAAE,IACjB,UAAU,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,GACnD,CAAC;QACF,IAAM,kBAAkB,GAAG,qDAAyB,CAAC,mBAAmB,CAAC,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,CAAA;QAClG,MAAM,CAAC,kBAAkB,CAAC;IAC9B,CAAC;IACL,uCAAC;AAAD,CAAC,AA3DD,IA2DC;AA3DY,4EAAgC;AA6DhC,QAAA,iBAAiB,GAAG,IAAI,gCAAgC,EAAE,CAAC","sourcesContent":["import { CorrelationContextManager, CorrelationContext } from \"./CorrelationContextManager\"\r\nimport { ISpanContext } from \"diagnostic-channel\";\r\nimport { EventEmitter } from \"events\";\r\n\r\n/**\r\n * Type of span. Can be used to specify additional relationships between spans\r\n * in addition to a parent/child relationship.\r\n */\r\nexport enum SpanKind {\r\n    /** Default value. Indicates that the span is used internally. */\r\n    INTERNAL = 0,\r\n\r\n    /**\r\n     * Indicates that the span covers server-side handling of an RPC or other\r\n     * remote request.\r\n     */\r\n    SERVER = 1,\r\n\r\n    /**\r\n     * Indicates that the span covers the client-side wrapper around an RPC or\r\n     * other remote request.\r\n     */\r\n    CLIENT = 2,\r\n\r\n    /**\r\n     * Indicates that the span describes producer sending a message to a\r\n     * broker. Unlike client and server, there is no direct critical path latency\r\n     * relationship between producer and consumer spans.\r\n     */\r\n    PRODUCER = 3,\r\n\r\n    /**\r\n     * Indicates that the span describes consumer receiving a message from a\r\n     * broker. Unlike client and server, there is no direct critical path latency\r\n     * relationship between producer and consumer spans.\r\n     */\r\n    CONSUMER = 4,\r\n}\r\n\r\nexport type LinkContext = Pick<SpanContext, 'traceId' | 'spanId'>;\r\n\r\nexport interface Attributes {\r\n    [attributeKey: string]: AttributeValue | undefined;\r\n  }\r\n\r\n  export type AttributeValue =\r\n    | string\r\n    | number\r\n    | boolean\r\n    | Array<null | undefined | string>\r\n    | Array<null | undefined | number>\r\n    | Array<null | undefined | boolean>;\r\n\r\nexport interface Link {\r\n    /** The {@link SpanContext} of a linked span. */\r\n    context: LinkContext;\r\n    /** A set of {@link Attributes} on the link. */\r\n    attributes?: Attributes;\r\n}\r\n\r\nexport interface SpanContext {\r\n    traceId: string;\r\n    spanId: string;\r\n    traceFlags?: { toString: () => string };\r\n    tracestate?: string;\r\n}\r\n\r\nexport interface Span {\r\n    _duration: [number, number]; // hrTime\r\n    name: string;\r\n    parentSpanId?: string;\r\n    status: { code: number, message?: string },\r\n    attributes: Record<string, string>,\r\n    kind: SpanKind;\r\n    links: Link[];\r\n    context: () => SpanContext;\r\n}\r\n\r\nexport class OpenTelemetryScopeManagerWrapper {\r\n    private _activeSymbol: symbol | undefined;\r\n\r\n    public active() {\r\n        const context = CorrelationContextManager.getCurrentContext() as any;\r\n        return {\r\n            ...context,\r\n            getValue: (key: symbol) => {\r\n                // todo: lazy import activeSymbol from opentelemetry/api\r\n                if (!this._activeSymbol) {\r\n                    this._activeSymbol = key;\r\n                    return context;\r\n                }\r\n\r\n                if (key === this._activeSymbol) {\r\n                    return context;\r\n                }\r\n\r\n                return false;\r\n            },\r\n            setValue: () => { }\r\n        };\r\n    }\r\n\r\n    public with(span: Span, fn: () => any) {\r\n        const parentSpanId = span.parentSpanId;\r\n        const name = span.name;\r\n        const correlationContext = OpenTelemetryScopeManagerWrapper._spanToContext(span, parentSpanId, name);\r\n        return CorrelationContextManager.runWithContext(correlationContext, fn)();\r\n    }\r\n\r\n    public bind<T>(target: T): T {\r\n        if (typeof target === \"function\") {\r\n            return CorrelationContextManager.wrapCallback(target);\r\n        } else if (target instanceof EventEmitter) {\r\n            CorrelationContextManager.wrapEmitter(target);\r\n        }\r\n        return target;\r\n    }\r\n\r\n    public enable(): this {\r\n        CorrelationContextManager.enable();\r\n        return this;\r\n    }\r\n\r\n    public disable(): this {\r\n        CorrelationContextManager.disable();\r\n        return this;\r\n    }\r\n\r\n    private static _spanToContext(span: Span, parentSpanId?: string, name?: string): CorrelationContext {\r\n        const _parentId = parentSpanId ? `|${span.context().traceId}.${parentSpanId}.` : span.context().traceId;\r\n        const context: ISpanContext = {\r\n            ...span.context(),\r\n            traceFlags: span.context().traceFlags.toString()\r\n        };\r\n        const correlationContext = CorrelationContextManager.spanToContextObject(context, _parentId, name)\r\n        return correlationContext;\r\n    }\r\n}\r\n\r\nexport const AsyncScopeManager = new OpenTelemetryScopeManagerWrapper();\r\n"]}