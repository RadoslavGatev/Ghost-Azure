{"version":3,"file":"HttpRequestParser.js","sourceRoot":"","sources":["../../AutoCollection/HttpRequestParser.ts"],"names":[],"mappings":"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","sourcesContent":["import http = require(\"http\");\r\nimport url = require(\"url\");\r\nimport net = require(\"net\");\r\n\r\nimport Contracts = require(\"../Declarations/Contracts\");\r\nimport TelemetryClient = require(\"../Library/TelemetryClient\");\r\nimport Logging = require(\"../Library/Logging\");\r\nimport Util = require(\"../Library/Util\");\r\nimport RequestResponseHeaders = require(\"../Library/RequestResponseHeaders\");\r\nimport RequestParser = require(\"./RequestParser\");\r\nimport CorrelationIdManager = require(\"../Library/CorrelationIdManager\");\r\nimport Tracestate = require(\"../Library/Tracestate\");\r\nimport Traceparent = require(\"../Library/Traceparent\");\r\nimport { HttpRequest } from \"../Library/Functions\";\r\n\r\n/**\r\n * Helper class to read data from the request/response objects and convert them into the telemetry contract\r\n */\r\nclass HttpRequestParser extends RequestParser {\r\n    private static keys = new Contracts.ContextTagKeys();\r\n\r\n    private rawHeaders: { [key: string]: string };\r\n    private socketRemoteAddress: string;\r\n    private connectionRemoteAddress: string;\r\n    private legacySocketRemoteAddress: string;\r\n    private userAgent: string;\r\n    private sourceCorrelationId: string;\r\n    private parentId: string;\r\n    private operationId: string;\r\n    private requestId: string;\r\n    private traceparent: Traceparent;\r\n    private tracestate: Tracestate;\r\n    private legacyRootId: string; // if original operationId is not w3c compat, move it here\r\n\r\n    private correlationContextHeader: string;\r\n\r\n    constructor(request: http.IncomingMessage | HttpRequest, requestId?: string) {\r\n        super();\r\n        if (request) {\r\n            this.method = request.method;\r\n            this.url = this._getAbsoluteUrl(request);\r\n            this.startTime = +new Date();\r\n            this.socketRemoteAddress = (<any>request).socket && (<any>request).socket.remoteAddress;\r\n            this.parseHeaders(request, requestId);\r\n            if ((<any>request).connection) {\r\n                this.connectionRemoteAddress = ((<any>request).connection as net.Socket).remoteAddress;\r\n                this.legacySocketRemoteAddress = (<any>(<any>request).connection)[\"socket\"] && (<any>(<any>request).connection)[\"socket\"].remoteAddress;\r\n            }\r\n        }\r\n    }\r\n\r\n    public onError(error: Error | string, ellapsedMilliseconds?: number) {\r\n        this._setStatus(undefined, error);\r\n\r\n        // This parameter is only for overrides. setStatus handles this internally for the autocollected case\r\n        if (ellapsedMilliseconds) {\r\n            this.duration = ellapsedMilliseconds;\r\n        }\r\n    }\r\n\r\n    public onResponse(response: http.ServerResponse, ellapsedMilliseconds?: number) {\r\n        this._setStatus(response.statusCode, undefined);\r\n\r\n        // This parameter is only for overrides. setStatus handles this internally for the autocollected case\r\n        if (ellapsedMilliseconds) {\r\n            this.duration = ellapsedMilliseconds;\r\n        }\r\n    }\r\n\r\n    public getRequestTelemetry(baseTelemetry?: Contracts.Telemetry): Contracts.RequestTelemetry {\r\n        var requestTelemetry: Contracts.RequestTelemetry & Contracts.Identified = {\r\n            id: this.requestId,\r\n            name: this.method + \" \" + url.parse(this.url).pathname,\r\n            url: this.url,\r\n            /*\r\n            See https://github.com/microsoft/ApplicationInsights-dotnet-server/blob/25d695e6a906fbe977f67be3966d25dbf1c50a79/Src/Web/Web.Shared.Net/RequestTrackingTelemetryModule.cs#L250\r\n            for reference\r\n            */\r\n            source: this.sourceCorrelationId,\r\n            duration: this.duration,\r\n            resultCode: this.statusCode ? this.statusCode.toString() : null,\r\n            success: this._isSuccess(),\r\n            properties: this.properties\r\n        };\r\n\r\n        if (baseTelemetry && baseTelemetry.time) {\r\n            requestTelemetry.time = baseTelemetry.time;\r\n        } else if (this.startTime) {\r\n            requestTelemetry.time = new Date(this.startTime);\r\n        }\r\n\r\n        // We should keep any parameters the user passed in\r\n        // Except the fields defined above in requestTelemetry, which take priority\r\n        // Except the properties field, where they're merged instead, with baseTelemetry taking priority\r\n        if (baseTelemetry) {\r\n            // Copy missing fields\r\n            for (let key in baseTelemetry) {\r\n                if (!(<any>requestTelemetry)[key]) {\r\n                    (<any>requestTelemetry)[key] = (<any>baseTelemetry)[key];\r\n                }\r\n            }\r\n            // Merge properties\r\n            if (baseTelemetry.properties) {\r\n                for (let key in baseTelemetry.properties) {\r\n                    requestTelemetry.properties[key] = baseTelemetry.properties[key];\r\n                }\r\n            }\r\n        }\r\n\r\n        return requestTelemetry;\r\n    }\r\n\r\n    public getRequestTags(tags: { [key: string]: string }): { [key: string]: string } {\r\n        // create a copy of the context for requests since client info will be used here\r\n        var newTags = <{ [key: string]: string }>{};\r\n        for (var key in tags) {\r\n            newTags[key] = tags[key];\r\n        }\r\n\r\n        // don't override tags if they are already set\r\n        newTags[HttpRequestParser.keys.locationIp] = tags[HttpRequestParser.keys.locationIp] || this._getIp();\r\n        newTags[HttpRequestParser.keys.sessionId] = tags[HttpRequestParser.keys.sessionId] || this._getId(\"ai_session\");\r\n        newTags[HttpRequestParser.keys.userId] = tags[HttpRequestParser.keys.userId] || this._getId(\"ai_user\");\r\n        newTags[HttpRequestParser.keys.userAuthUserId] = tags[HttpRequestParser.keys.userAuthUserId] || this._getId(\"ai_authUser\");\r\n        newTags[HttpRequestParser.keys.operationName] = this.getOperationName(tags);\r\n        newTags[HttpRequestParser.keys.operationParentId] = this.getOperationParentId(tags);\r\n        newTags[HttpRequestParser.keys.operationId] = this.getOperationId(tags);\r\n\r\n        return newTags;\r\n    }\r\n\r\n    public getOperationId(tags: { [key: string]: string }) {\r\n        return tags[HttpRequestParser.keys.operationId] || this.operationId;\r\n    }\r\n\r\n    public getOperationParentId(tags: { [key: string]: string }) {\r\n        return tags[HttpRequestParser.keys.operationParentId] || this.parentId || this.getOperationId(tags);\r\n    }\r\n\r\n    public getOperationName(tags: { [key: string]: string }) {\r\n        return tags[HttpRequestParser.keys.operationName] || this.method + \" \" + url.parse(this.url).pathname;\r\n    }\r\n\r\n    public getRequestId() {\r\n        return this.requestId;\r\n    }\r\n\r\n    public getCorrelationContextHeader() {\r\n        return this.correlationContextHeader;\r\n    }\r\n\r\n    public getTraceparent() {\r\n        return this.traceparent;\r\n    }\r\n\r\n    public getTracestate() {\r\n        return this.tracestate;\r\n    }\r\n\r\n    public getLegacyRootId() {\r\n        return this.legacyRootId;\r\n    }\r\n\r\n    private _getAbsoluteUrl(request: http.IncomingMessage | HttpRequest): string {\r\n        if (!request.headers) {\r\n            return request.url;\r\n        }\r\n\r\n        var encrypted = (<any>request).connection ? ((<any>request).connection as any).encrypted : null;\r\n        var requestUrl = url.parse(request.url);\r\n\r\n        var pathName = requestUrl.pathname;\r\n        var search = requestUrl.search;\r\n\r\n        var absoluteUrl = url.format({\r\n            protocol: encrypted ? \"https\" : \"http\",\r\n            host: request.headers.host,\r\n            pathname: pathName,\r\n            search: search\r\n        });\r\n\r\n        return absoluteUrl;\r\n    }\r\n\r\n    private _getIp() {\r\n\r\n        // regex to match ipv4 without port\r\n        // Note: including the port would cause the payload to be rejected by the data collector\r\n        var ipMatch = /[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}/;\r\n\r\n        var check = (str: string): string => {\r\n            var results = ipMatch.exec(str);\r\n            if (results) {\r\n                return results[0];\r\n            }\r\n        };\r\n\r\n        var ip = check(this.rawHeaders[\"x-forwarded-for\"])\r\n            || check(this.rawHeaders[\"x-client-ip\"])\r\n            || check(this.rawHeaders[\"x-real-ip\"])\r\n            || check(this.connectionRemoteAddress)\r\n            || check(this.socketRemoteAddress)\r\n            || check(this.legacySocketRemoteAddress);\r\n\r\n        // node v12 returns this if the address is \"localhost\"\r\n        if (!ip\r\n            && this.connectionRemoteAddress\r\n            && this.connectionRemoteAddress.substr\r\n            && this.connectionRemoteAddress.substr(0, 2) === \"::\") {\r\n            ip = \"127.0.0.1\";\r\n        }\r\n\r\n        return ip;\r\n    }\r\n\r\n    private _getId(name: string) {\r\n        var cookie = (this.rawHeaders && this.rawHeaders[\"cookie\"] &&\r\n            typeof this.rawHeaders[\"cookie\"] === 'string' && this.rawHeaders[\"cookie\"]) || \"\";\r\n        var value = HttpRequestParser.parseId(Util.getCookie(name, cookie));\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Sets this operation's operationId, parentId, requestId (and legacyRootId, if necessary) based on this operation's traceparent\r\n     */\r\n    private setBackCompatFromThisTraceContext() {\r\n        // Set operationId\r\n        this.operationId = this.traceparent.traceId;\r\n        if (this.traceparent.legacyRootId) {\r\n            this.legacyRootId = this.traceparent.legacyRootId;\r\n        }\r\n\r\n        // Set parentId with existing spanId\r\n        this.parentId = this.traceparent.parentId;\r\n\r\n        // Update the spanId and set the current requestId\r\n        this.traceparent.updateSpanId();\r\n        this.requestId = this.traceparent.getBackCompatRequestId();\r\n    }\r\n\r\n    private parseHeaders(request: http.IncomingMessage | HttpRequest, requestId?: string) {\r\n\r\n        this.rawHeaders = request.headers || (<any>request).rawHeaders;\r\n        this.userAgent = request.headers && request.headers[\"user-agent\"];\r\n        this.sourceCorrelationId = Util.getCorrelationContextTarget(request, RequestResponseHeaders.requestContextSourceKey);\r\n\r\n        if (request.headers) {\r\n            const tracestateHeader = request.headers[RequestResponseHeaders.traceStateHeader]; // w3c header\r\n            const traceparentHeader = request.headers[RequestResponseHeaders.traceparentHeader]; // w3c header\r\n            const requestIdHeader = request.headers[RequestResponseHeaders.requestIdHeader]; // default AI header\r\n            const legacy_parentId = request.headers[RequestResponseHeaders.parentIdHeader]; // legacy AI header\r\n            const legacy_rootId = request.headers[RequestResponseHeaders.rootIdHeader]; // legacy AI header\r\n\r\n            this.correlationContextHeader = request.headers[RequestResponseHeaders.correlationContextHeader];\r\n\r\n            if (CorrelationIdManager.w3cEnabled && (traceparentHeader || tracestateHeader)) {\r\n                // Parse W3C Trace Context headers\r\n                this.traceparent = new Traceparent(traceparentHeader); // new traceparent is always created from this\r\n                this.tracestate = traceparentHeader && tracestateHeader && new Tracestate(tracestateHeader); // discard tracestate if no traceparent is present\r\n                this.setBackCompatFromThisTraceContext();\r\n            } else if (requestIdHeader) {\r\n                // Parse AI headers\r\n                if (CorrelationIdManager.w3cEnabled) {\r\n                    this.traceparent = new Traceparent(null, requestIdHeader);\r\n                    this.setBackCompatFromThisTraceContext();\r\n                } else {\r\n                    this.parentId = requestIdHeader;\r\n                    this.requestId = CorrelationIdManager.generateRequestId(this.parentId);\r\n                    this.operationId = CorrelationIdManager.getRootId(this.requestId);\r\n                }\r\n            } else {\r\n                // Legacy fallback\r\n                if (CorrelationIdManager.w3cEnabled) {\r\n                    this.traceparent = new Traceparent();\r\n                    this.traceparent.parentId = legacy_parentId;\r\n                    this.traceparent.legacyRootId = legacy_rootId || legacy_parentId;\r\n                    this.setBackCompatFromThisTraceContext();\r\n                } else {\r\n                    this.parentId = legacy_parentId;\r\n                    this.requestId = CorrelationIdManager.generateRequestId(legacy_rootId || this.parentId);\r\n                    this.correlationContextHeader = null;\r\n                    this.operationId = CorrelationIdManager.getRootId(this.requestId);\r\n                }\r\n            }\r\n\r\n            if (requestId) {\r\n                // For the scenarios that don't guarantee an AI-created context,\r\n                // override the requestId with the provided one.\r\n                this.requestId = requestId;\r\n                this.operationId = CorrelationIdManager.getRootId(this.requestId);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static parseId(cookieValue: string): string {\r\n        const cookieParts = cookieValue.split(\"|\");\r\n\r\n        if (cookieParts.length > 0) {\r\n            return cookieParts[0];\r\n        }\r\n\r\n        return \"\"; // old behavior was to return \"\" for incorrect parsing\r\n    }\r\n}\r\n\r\nexport = HttpRequestParser;\r\n"]}