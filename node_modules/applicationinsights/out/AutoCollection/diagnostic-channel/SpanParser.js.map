{"version":3,"file":"SpanParser.js","sourceRoot":"","sources":["../../../AutoCollection/diagnostic-channel/SpanParser.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for details.\r\nimport { Attributes, Span, SpanKind } from \"../AsyncHooksScopeManager\";\r\nimport * as Contracts from \"../../Declarations/Contracts\";\r\nimport * as Constants from \"../../Declarations/Constants\";\r\n\r\nfunction filterSpanAttributes(attributes: Attributes) {\r\n    const newAttributes = { ...attributes };\r\n    Object.keys(Constants.SpanAttribute).forEach(key => {\r\n        delete newAttributes[key];\r\n    });\r\n    return newAttributes\r\n}\r\n\r\nexport function spanToTelemetryContract(span: Span): (Contracts.DependencyTelemetry & Contracts.RequestTelemetry) & Contracts.Identified {\r\n    const id = `|${span.context().traceId}.${span.context().spanId}.`;\r\n    const duration = Math.round(span._duration[0] * 1e3 + span._duration[1] / 1e6);\r\n    let peerAddress = span.attributes[\"peer.address\"] ? span.attributes[\"peer.address\"].toString() : \"\";\r\n    let component = span.attributes[\"component\"] ? span.attributes[\"component\"].toString() : \"\";\r\n\r\n    const isHttp: boolean = ((component).toUpperCase() === Constants.DependencyTypeName.Http) || (!!span.attributes[Constants.SpanAttribute.HttpUrl]);\r\n    const isGrpc: boolean = (component).toLowerCase() === Constants.DependencyTypeName.Grpc;\r\n    if (isHttp) {\r\n        // Read http span attributes\r\n        const method = span.attributes[Constants.SpanAttribute.HttpMethod] || \"GET\";\r\n        const url = new URL(span.attributes[Constants.SpanAttribute.HttpUrl].toString());\r\n        const host = span.attributes[Constants.SpanAttribute.HttpHost] || url.host;\r\n        const port = span.attributes[Constants.SpanAttribute.HttpPort] || url.port || null;\r\n        const pathname = url.pathname || \"/\";\r\n\r\n        // Translate to AI Dependency format\r\n        const name = `${method} ${pathname}`;\r\n        const dependencyTypeName = Constants.DependencyTypeName.Http;\r\n        const target = port ? `${host}:${port}`.toString() : host.toString();\r\n        const data = url.toString();\r\n        const resultCode = span.attributes[Constants.SpanAttribute.HttpStatusCode] || span.status.code || 0;\r\n        const success = resultCode < 400; // Status.OK\r\n        return {\r\n            id, name, dependencyTypeName,\r\n            target, data,\r\n            success, duration,\r\n            url: data,\r\n            resultCode: String(resultCode),\r\n            properties: filterSpanAttributes(span.attributes)\r\n        };\r\n    } else if (isGrpc) {\r\n        const method = span.attributes[Constants.SpanAttribute.GrpcMethod] || \"rpc\";\r\n        const service = span.attributes[Constants.SpanAttribute.GrpcService];\r\n        const name = service ? `${method} ${service}` : span.name;\r\n        return {\r\n            id, duration, name,\r\n            target: service.toString(),\r\n            data: service.toString() || name,\r\n            url: service.toString() || name,\r\n            dependencyTypeName: Constants.DependencyTypeName.Grpc,\r\n            resultCode: String(span.status.code || 0),\r\n            success: span.status.code === 0,\r\n            properties: filterSpanAttributes(span.attributes),\r\n        }\r\n    } else {\r\n        const name = span.name;\r\n        const links = span.links && span.links.map(link => {\r\n            return {\r\n                operation_Id: link.context.traceId,\r\n                id: link.context.spanId\r\n            };\r\n        });\r\n        return {\r\n            id, duration, name,\r\n            target: peerAddress,\r\n            data: peerAddress || name,\r\n            url: peerAddress || name,\r\n            dependencyTypeName: span.kind === SpanKind.INTERNAL ? Constants.DependencyTypeName.InProc : (component || span.name),\r\n            resultCode: String(span.status.code || 0),\r\n            success: span.status.code === 0,\r\n            properties: {\r\n                ...filterSpanAttributes(span.attributes),\r\n                \"_MS.links\": links || undefined\r\n            },\r\n        };\r\n    }\r\n}\r\n"]}