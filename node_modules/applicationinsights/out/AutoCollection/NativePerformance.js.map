{"version":3,"file":"NativePerformance.js","sourceRoot":"","sources":["../../AutoCollection/NativePerformance.ts"],"names":[],"mappings":"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","sourcesContent":["import TelemetryClient= require(\"../Library/TelemetryClient\");\r\nimport Constants = require(\"../Declarations/Constants\");\r\nimport Config = require(\"../Library/Config\");\r\nimport Context = require(\"../Library/Context\");\r\nimport Logging= require(\"../Library/Logging\");\r\n\r\n/**\r\n * Interface which defines which specific extended metrics should be disabled\r\n *\r\n * @export\r\n * @interface IDisabledExtendedMetrics\r\n */\r\nexport interface IDisabledExtendedMetrics {\r\n    gc?: boolean;\r\n    heap?: boolean;\r\n    loop?: boolean;\r\n}\r\n\r\nexport class AutoCollectNativePerformance {\r\n    public static INSTANCE: AutoCollectNativePerformance;\r\n\r\n    private static _emitter: any;\r\n    private static _metricsAvailable: boolean; // is the native metrics lib installed\r\n    private _isEnabled: boolean;\r\n    private _isInitialized: boolean;\r\n    private _handle: NodeJS.Timer;\r\n    private _client: TelemetryClient;\r\n    private _disabledMetrics: IDisabledExtendedMetrics = {};\r\n\r\n    constructor(client: TelemetryClient) {\r\n        // Note: Only 1 instance of this can exist. So when we reconstruct this object,\r\n        // just disable old native instance and reset JS member variables\r\n        if (AutoCollectNativePerformance.INSTANCE) {\r\n            AutoCollectNativePerformance.INSTANCE.dispose();\r\n        }\r\n        AutoCollectNativePerformance.INSTANCE = this;\r\n        this._client = client;\r\n    }\r\n\r\n    /**\r\n     *  Reports if NativePerformance is able to run in this environment\r\n     */\r\n    public static isNodeVersionCompatible() {\r\n        var nodeVer = process.versions.node.split(\".\");\r\n        return parseInt(nodeVer[0]) >= 6;\r\n    }\r\n\r\n    /**\r\n     * Start instance of native metrics agent.\r\n     *\r\n     * @param {boolean} isEnabled\r\n     * @param {number} [collectionInterval=60000]\r\n     * @memberof AutoCollectNativePerformance\r\n     */\r\n    public enable(isEnabled: boolean, disabledMetrics: IDisabledExtendedMetrics = {}, collectionInterval = 60000): void {\r\n        if (!AutoCollectNativePerformance.isNodeVersionCompatible()) {\r\n            return;\r\n        }\r\n\r\n        if (AutoCollectNativePerformance._metricsAvailable == undefined && isEnabled && !this._isInitialized) {\r\n            // Try to require in the native-metrics library. If it's found initialize it, else do nothing and never try again.\r\n            try {\r\n                const NativeMetricsEmitters = require(\"applicationinsights-native-metrics\");\r\n                AutoCollectNativePerformance._emitter = new NativeMetricsEmitters();\r\n                AutoCollectNativePerformance._metricsAvailable = true;\r\n                Logging.info(\"Native metrics module successfully loaded!\");\r\n            } catch (err) {\r\n                // Package not available. Never try again\r\n                AutoCollectNativePerformance._metricsAvailable = false;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._isEnabled = isEnabled;\r\n        this._disabledMetrics = disabledMetrics\r\n        if (this._isEnabled && !this._isInitialized) {\r\n            this._isInitialized = true;\r\n        }\r\n\r\n        // Enable the emitter if we were able to construct one\r\n        if (this._isEnabled && AutoCollectNativePerformance._emitter) {\r\n            // enable self\r\n            AutoCollectNativePerformance._emitter.enable(true, collectionInterval);\r\n            this._handle = setInterval(() => this._trackNativeMetrics(), collectionInterval);\r\n            this._handle.unref();\r\n        } else if (AutoCollectNativePerformance._emitter) {\r\n            // disable self\r\n            AutoCollectNativePerformance._emitter.enable(false);\r\n            if (this._handle) {\r\n                clearInterval(this._handle);\r\n                this._handle = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Cleanup this instance of AutoCollectNativePerformance\r\n     *\r\n     * @memberof AutoCollectNativePerformance\r\n     */\r\n    public dispose(): void {\r\n        this.enable(false);\r\n    }\r\n\r\n    /**\r\n     * Parse environment variable and overwrite isEnabled based on respective fields being set\r\n     *\r\n     * @private\r\n     * @static\r\n     * @param {(boolean | IDisabledExtendedMetrics)} collectExtendedMetrics\r\n     * @returns {(boolean | IDisabledExtendedMetrics)}\r\n     * @memberof AutoCollectNativePerformance\r\n     */\r\n    public static parseEnabled(collectExtendedMetrics: boolean | IDisabledExtendedMetrics): { isEnabled: boolean, disabledMetrics: IDisabledExtendedMetrics } {\r\n        const disableAll = process.env[Config.ENV_nativeMetricsDisableAll];\r\n        const individualOptOuts = process.env[Config.ENV_nativeMetricsDisablers]\r\n\r\n        // case 1: disable all env var set, RETURN with isEnabled=false\r\n        if (disableAll) {\r\n            return { isEnabled: false, disabledMetrics: {} };\r\n        }\r\n\r\n        // case 2: individual env vars set, RETURN with isEnabled=true, disabledMetrics={...}\r\n        if (individualOptOuts) {\r\n            const optOutsArr = individualOptOuts.split(\",\");\r\n            const disabledMetrics: any = {};\r\n            if (optOutsArr.length > 0) {\r\n                for (const opt of optOutsArr) {\r\n                    disabledMetrics[opt] = true;\r\n                }\r\n            }\r\n\r\n            // case 2a: collectExtendedMetrics is an object, overwrite existing ones if they exist\r\n            if (typeof collectExtendedMetrics === \"object\") {\r\n                return {isEnabled: true, disabledMetrics: {...collectExtendedMetrics, ...disabledMetrics}};\r\n            }\r\n\r\n            // case 2b: collectExtendedMetrics is a boolean, set disabledMetrics as is\r\n            return {isEnabled: collectExtendedMetrics, disabledMetrics};\r\n        }\r\n\r\n        // case 4: no env vars set, input arg is a boolean, RETURN with isEnabled=collectExtendedMetrics, disabledMetrics={}\r\n        if (typeof collectExtendedMetrics === \"boolean\") {\r\n            return { isEnabled: collectExtendedMetrics, disabledMetrics: {} };\r\n        } else { // use else so we don't need to force typing on collectExtendedMetrics\r\n            // case 5: no env vars set, input arg is object, RETURN with isEnabled=true, disabledMetrics=collectExtendedMetrics\r\n            return { isEnabled: true, disabledMetrics: collectExtendedMetrics};\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Trigger an iteration of native metrics collection\r\n     *\r\n     * @private\r\n     * @memberof AutoCollectNativePerformance\r\n     */\r\n    private _trackNativeMetrics() {\r\n        let shouldSendAll = true;\r\n        if (typeof this._isEnabled !== \"object\") {\r\n            shouldSendAll = this._isEnabled;\r\n        }\r\n\r\n        if (shouldSendAll) {\r\n            this._trackGarbageCollection();\r\n            this._trackEventLoop();\r\n            this._trackHeapUsage();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tracks garbage collection stats for this interval. One custom metric is sent per type of garbage\r\n     * collection that occurred during this collection interval.\r\n     *\r\n     * @private\r\n     * @memberof AutoCollectNativePerformance\r\n     */\r\n    private _trackGarbageCollection(): void {\r\n        if (this._disabledMetrics.gc) {\r\n            return;\r\n        }\r\n\r\n        const gcData = AutoCollectNativePerformance._emitter.getGCData();\r\n\r\n        for (let gc in gcData) {\r\n            const metrics = gcData[gc].metrics;\r\n            const name = `${gc} Garbage Collection Duration`;\r\n            const stdDev = Math.sqrt(metrics.sumSquares / metrics.count - Math.pow(metrics.total / metrics.count, 2)) || 0;\r\n            this._client.trackMetric({\r\n                name: name,\r\n                value: metrics.total,\r\n                count: metrics.count,\r\n                max: metrics.max,\r\n                min: metrics.min,\r\n                stdDev: stdDev,\r\n                tagOverrides: {\r\n                    [this._client.context.keys.internalSdkVersion]: \"node-nativeperf:\" + Context.sdkVersion\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tracks event loop ticks per interval as a custom metric. Also included in the metric is min/max/avg\r\n     * time spent in event loop for this interval.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     * @memberof AutoCollectNativePerformance\r\n     */\r\n    private _trackEventLoop(): void {\r\n        if (this._disabledMetrics.loop) {\r\n            return;\r\n        }\r\n\r\n        const loopData = AutoCollectNativePerformance._emitter.getLoopData();\r\n        const metrics = loopData.loopUsage;\r\n        if (metrics.count == 0) {\r\n            return;\r\n        }\r\n\r\n        const name = `Event Loop CPU Time`;\r\n        const stdDev = Math.sqrt(metrics.sumSquares / metrics.count - Math.pow(metrics.total / metrics.count, 2)) || 0;\r\n        this._client.trackMetric({\r\n            name: name,\r\n            value: metrics.total,\r\n            count: metrics.count,\r\n            min: metrics.min,\r\n            max: metrics.max,\r\n            stdDev: stdDev,\r\n            tagOverrides: {\r\n                [this._client.context.keys.internalSdkVersion]: \"node-nativeperf:\" + Context.sdkVersion\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Track heap memory usage metrics as a custom metric.\r\n     *\r\n     * @private\r\n     * @memberof AutoCollectNativePerformance\r\n     */\r\n    private _trackHeapUsage(): void {\r\n        if (this._disabledMetrics.heap) {\r\n            return;\r\n        }\r\n\r\n        const memoryUsage = process.memoryUsage();\r\n        const { heapUsed, heapTotal, rss } = memoryUsage;\r\n\r\n        this._client.trackMetric({\r\n            name: `Memory Usage (Heap)`,\r\n            value: heapUsed,\r\n            count: 1,\r\n            tagOverrides: {\r\n                [this._client.context.keys.internalSdkVersion]: \"node-nativeperf:\" + Context.sdkVersion\r\n            }\r\n        });\r\n        this._client.trackMetric({\r\n            name: `Memory Total (Heap)`,\r\n            value: heapTotal,\r\n            count: 1,\r\n            tagOverrides: {\r\n                [this._client.context.keys.internalSdkVersion]: \"node-nativeperf:\" + Context.sdkVersion\r\n            }\r\n        });\r\n        this._client.trackMetric({\r\n            name: `Memory Usage (Non-Heap)`,\r\n            value: rss - heapTotal,\r\n            count: 1,\r\n            tagOverrides: {\r\n                [this._client.context.keys.internalSdkVersion]: \"node-nativeperf:\" + Context.sdkVersion\r\n            }\r\n        });\r\n    }\r\n}\r\n"]}