{"version":3,"file":"Performance.js","sourceRoot":"","sources":["../../AutoCollection/Performance.ts"],"names":[],"mappings":"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","sourcesContent":["import http = require(\"http\");\r\nimport os = require(\"os\");\r\n\r\nimport TelemetryClient = require(\"../Library/TelemetryClient\");\r\nimport Logging = require(\"../Library/Logging\");\r\nimport Constants = require(\"../Declarations/Constants\");\r\n\r\nclass AutoCollectPerformance {\r\n\r\n    public static INSTANCE: AutoCollectPerformance;\r\n\r\n    private static _totalRequestCount: number = 0;\r\n    private static _totalFailedRequestCount: number = 0;\r\n    private static _lastRequestExecutionTime: number = 0;\r\n    private static _totalDependencyCount: number = 0;\r\n    private static _totalFailedDependencyCount: number = 0;\r\n    private static _lastDependencyExecutionTime: number = 0;\r\n    private static _totalExceptionCount: number = 0;\r\n    private static _intervalDependencyExecutionTime: number = 0;\r\n    private static _intervalRequestExecutionTime: number = 0;\r\n\r\n    private _lastIntervalRequestExecutionTime: number = 0; // the sum of durations which took place during from app start until last interval\r\n    private _lastIntervalDependencyExecutionTime: number = 0;\r\n    private _enableLiveMetricsCounters: boolean;\r\n    private _collectionInterval: number;\r\n    private _client: TelemetryClient;\r\n    private _handle: NodeJS.Timer;\r\n    private _isEnabled: boolean;\r\n    private _isInitialized: boolean;\r\n    private _lastAppCpuUsage: { user: number, system: number };\r\n    private _lastHrtime: number[];\r\n    private _lastCpus: { model: string; speed: number; times: { user: number; nice: number; sys: number; idle: number; irq: number; }; }[];\r\n    private _lastDependencies: { totalDependencyCount: number; totalFailedDependencyCount: number; time: number; };\r\n    private _lastRequests: { totalRequestCount: number; totalFailedRequestCount: number; time: number; };\r\n    private _lastExceptions: { totalExceptionCount: number, time: number };\r\n\r\n    /**\r\n     * @param enableLiveMetricsCounters - enable sending additional live metrics information (dependency metrics, exception metrics, committed memory)\r\n     */\r\n    constructor(client: TelemetryClient, collectionInterval = 60000, enableLiveMetricsCounters = false) {\r\n        if (!AutoCollectPerformance.INSTANCE) {\r\n            AutoCollectPerformance.INSTANCE = this;\r\n        }\r\n\r\n        this._isInitialized = false;\r\n        this._client = client;\r\n        this._collectionInterval = collectionInterval;\r\n        this._enableLiveMetricsCounters = enableLiveMetricsCounters;\r\n    }\r\n\r\n    public enable(isEnabled: boolean, collectionInterval?: number) {\r\n        this._isEnabled = isEnabled;\r\n        if (this._isEnabled && !this._isInitialized) {\r\n            this._isInitialized = true;\r\n        }\r\n\r\n        if (isEnabled) {\r\n            if (!this._handle) {\r\n                this._lastCpus = os.cpus();\r\n                this._lastRequests = {\r\n                    totalRequestCount: AutoCollectPerformance._totalRequestCount,\r\n                    totalFailedRequestCount: AutoCollectPerformance._totalFailedRequestCount,\r\n                    time: +new Date\r\n                };\r\n                this._lastDependencies = {\r\n                    totalDependencyCount: AutoCollectPerformance._totalDependencyCount,\r\n                    totalFailedDependencyCount: AutoCollectPerformance._totalFailedDependencyCount,\r\n                    time: +new Date\r\n                };\r\n                this._lastExceptions = {\r\n                    totalExceptionCount: AutoCollectPerformance._totalExceptionCount,\r\n                    time: +new Date\r\n                };\r\n\r\n                if (typeof (process as any).cpuUsage === 'function'){\r\n                    this._lastAppCpuUsage = (process as any).cpuUsage();\r\n                }\r\n                this._lastHrtime = process.hrtime();\r\n                this._collectionInterval = collectionInterval || this._collectionInterval;\r\n                this._handle = setInterval(() => this.trackPerformance(), this._collectionInterval);\r\n                this._handle.unref(); // Allow the app to terminate even while this loop is going on\r\n            }\r\n        } else {\r\n            if (this._handle) {\r\n                clearInterval(this._handle);\r\n                this._handle = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public static countRequest(duration: number | string, success: boolean) {\r\n        let durationMs: number;\r\n        if (!AutoCollectPerformance.isEnabled()) {\r\n            return;\r\n        }\r\n\r\n        if (typeof duration === 'string') {\r\n            // dependency duration is passed in as \"00:00:00.123\" by autocollectors\r\n            durationMs = +new Date('1970-01-01T' + duration + 'Z'); // convert to num ms, returns NaN if wrong\r\n        } else if (typeof duration === 'number') {\r\n            durationMs = duration;\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        AutoCollectPerformance._intervalRequestExecutionTime += durationMs;\r\n        if (success === false) {\r\n            AutoCollectPerformance._totalFailedRequestCount++;\r\n        }\r\n        AutoCollectPerformance._totalRequestCount++;\r\n    }\r\n\r\n    public static countException() {\r\n        AutoCollectPerformance._totalExceptionCount++;\r\n    }\r\n\r\n    public static countDependency(duration: number | string, success: boolean) {\r\n        let durationMs: number;\r\n        if (!AutoCollectPerformance.isEnabled()) {\r\n            return;\r\n        }\r\n\r\n        if (typeof duration === 'string') {\r\n            // dependency duration is passed in as \"00:00:00.123\" by autocollectors\r\n            durationMs = +new Date('1970-01-01T' + duration + 'Z'); // convert to num ms, returns NaN if wrong\r\n        } else if (typeof duration === 'number') {\r\n            durationMs = duration;\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        AutoCollectPerformance._intervalDependencyExecutionTime += durationMs;\r\n        if (success === false) {\r\n            AutoCollectPerformance._totalFailedDependencyCount++;\r\n        }\r\n        AutoCollectPerformance._totalDependencyCount++;\r\n    }\r\n\r\n    public isInitialized() {\r\n        return this._isInitialized;\r\n    }\r\n\r\n    public static isEnabled() {\r\n        return AutoCollectPerformance.INSTANCE && AutoCollectPerformance.INSTANCE._isEnabled;\r\n    }\r\n\r\n    public trackPerformance() {\r\n        this._trackCpu();\r\n        this._trackMemory();\r\n        this._trackNetwork();\r\n        this._trackDependencyRate();\r\n        this._trackExceptionRate();\r\n    }\r\n\r\n    private _trackCpu() {\r\n        // this reports total ms spent in each category since the OS was booted, to calculate percent it is necessary\r\n        // to find the delta since the last measurement\r\n        var cpus = os.cpus();\r\n        if (cpus && cpus.length && this._lastCpus && cpus.length === this._lastCpus.length) {\r\n            var totalUser = 0;\r\n            var totalSys = 0;\r\n            var totalNice = 0;\r\n            var totalIdle = 0;\r\n            var totalIrq = 0;\r\n            for (var i = 0; !!cpus && i < cpus.length; i++) {\r\n                var cpu = cpus[i];\r\n                var lastCpu = this._lastCpus[i];\r\n\r\n                var name = \"% cpu(\" + i + \") \";\r\n                var model = cpu.model;\r\n                var speed = cpu.speed;\r\n                var times = cpu.times;\r\n                var lastTimes = lastCpu.times;\r\n\r\n                // user cpu time (or) % CPU time spent in user space\r\n                var user = (times.user - lastTimes.user) || 0;\r\n                totalUser += user;\r\n\r\n                // system cpu time (or) % CPU time spent in kernel space\r\n                var sys = (times.sys - lastTimes.sys) || 0;\r\n                totalSys += sys;\r\n\r\n                // user nice cpu time (or) % CPU time spent on low priority processes\r\n                var nice = (times.nice - lastTimes.nice) || 0;\r\n                totalNice += nice;\r\n\r\n                // idle cpu time (or) % CPU time spent idle\r\n                var idle = (times.idle - lastTimes.idle) || 0;\r\n                totalIdle += idle;\r\n\r\n                // irq (or) % CPU time spent servicing/handling hardware interrupts\r\n                var irq = (times.irq - lastTimes.irq) || 0;\r\n                totalIrq += irq;\r\n            }\r\n\r\n            // Calculate % of total cpu time (user + system) this App Process used (Only supported by node v6.1.0+)\r\n            let appCpuPercent: number = undefined;\r\n            if (typeof (process as any).cpuUsage === 'function') {\r\n                const appCpuUsage = (process as any).cpuUsage();\r\n                const hrtime = process.hrtime();\r\n\r\n                const totalApp = ((appCpuUsage.user - this._lastAppCpuUsage.user) + (appCpuUsage.system - this._lastAppCpuUsage.system)) || 0;\r\n\r\n                if (typeof this._lastHrtime !== 'undefined' && this._lastHrtime.length === 2) {\r\n                    const elapsedTime = ((hrtime[0] - this._lastHrtime[0])*1e6 + (hrtime[1] - this._lastHrtime[1])/1e3) || 0; // convert to microseconds\r\n\r\n                    appCpuPercent = 100 * totalApp / (elapsedTime * cpus.length);\r\n                }\r\n\r\n                // Set previous\r\n                this._lastAppCpuUsage = appCpuUsage;\r\n                this._lastHrtime = hrtime;\r\n            }\r\n\r\n            var combinedTotal = (totalUser + totalSys + totalNice + totalIdle + totalIrq) || 1;\r\n\r\n            this._client.trackMetric({name: Constants.PerformanceCounter.PROCESSOR_TIME, value: ((combinedTotal - totalIdle) / combinedTotal) * 100});\r\n            this._client.trackMetric({name: Constants.PerformanceCounter.PROCESS_TIME, value: appCpuPercent || ((totalUser / combinedTotal) * 100)});\r\n        }\r\n\r\n        this._lastCpus = cpus;\r\n    }\r\n\r\n    private _trackMemory() {\r\n        var freeMem = os.freemem();\r\n        var usedMem = process.memoryUsage().rss;\r\n        var committedMemory = os.totalmem() - freeMem;\r\n        this._client.trackMetric({name: Constants.PerformanceCounter.PRIVATE_BYTES, value: usedMem});\r\n        this._client.trackMetric({name: Constants.PerformanceCounter.AVAILABLE_BYTES, value: freeMem});\r\n\r\n        // Only supported by quickpulse service\r\n        if (this._enableLiveMetricsCounters) {\r\n            this._client.trackMetric({name: Constants.QuickPulseCounter.COMMITTED_BYTES, value: committedMemory});\r\n        }\r\n    }\r\n\r\n    private _trackNetwork() {\r\n        // track total request counters\r\n        var lastRequests = this._lastRequests;\r\n        var requests = {\r\n            totalRequestCount: AutoCollectPerformance._totalRequestCount,\r\n            totalFailedRequestCount: AutoCollectPerformance._totalFailedRequestCount,\r\n            time: +new Date\r\n        };\r\n\r\n        var intervalRequests = (requests.totalRequestCount - lastRequests.totalRequestCount) || 0;\r\n        var intervalFailedRequests = (requests.totalFailedRequestCount - lastRequests.totalFailedRequestCount) || 0;\r\n        var elapsedMs = requests.time - lastRequests.time;\r\n        var elapsedSeconds = elapsedMs / 1000;\r\n        var averageRequestExecutionTime = ((AutoCollectPerformance._intervalRequestExecutionTime - this._lastIntervalRequestExecutionTime) / intervalRequests) || 0; // default to 0 in case no requests in this interval\r\n        this._lastIntervalRequestExecutionTime = AutoCollectPerformance._intervalRequestExecutionTime // reset\r\n\r\n        if (elapsedMs > 0) {\r\n            var requestsPerSec = intervalRequests / elapsedSeconds;\r\n            var failedRequestsPerSec = intervalFailedRequests / elapsedSeconds;\r\n\r\n            this._client.trackMetric({ name: Constants.PerformanceCounter.REQUEST_RATE, value: requestsPerSec });\r\n\r\n            // Only send duration to live metrics if it has been updated!\r\n            if (!this._enableLiveMetricsCounters || intervalRequests > 0) {\r\n                this._client.trackMetric({ name: Constants.PerformanceCounter.REQUEST_DURATION, value: averageRequestExecutionTime });\r\n            }\r\n\r\n            // Only supported by quickpulse service\r\n            if (this._enableLiveMetricsCounters) {\r\n                this._client.trackMetric({name: Constants.QuickPulseCounter.REQUEST_FAILURE_RATE, value: failedRequestsPerSec});\r\n            }\r\n        }\r\n\r\n        this._lastRequests = requests;\r\n    }\r\n\r\n    // Static counter is accumulated externally. Report the rate to client here\r\n    // Note: This is currently only used with QuickPulse client\r\n    private _trackDependencyRate() {\r\n        if (this._enableLiveMetricsCounters) {\r\n            var lastDependencies = this._lastDependencies;\r\n            var dependencies = {\r\n                totalDependencyCount: AutoCollectPerformance._totalDependencyCount,\r\n                totalFailedDependencyCount: AutoCollectPerformance._totalFailedDependencyCount,\r\n                time: +new Date\r\n            };\r\n\r\n            var intervalDependencies = (dependencies.totalDependencyCount - lastDependencies.totalDependencyCount) || 0;\r\n            var intervalFailedDependencies = (dependencies.totalFailedDependencyCount - lastDependencies.totalFailedDependencyCount) || 0;\r\n            var elapsedMs = dependencies.time - lastDependencies.time;\r\n            var elapsedSeconds = elapsedMs / 1000;\r\n            var averageDependencyExecutionTime = ((AutoCollectPerformance._intervalDependencyExecutionTime - this._lastIntervalDependencyExecutionTime) / intervalDependencies) || 0;\r\n            this._lastIntervalDependencyExecutionTime = AutoCollectPerformance._intervalDependencyExecutionTime // reset\r\n\r\n            if (elapsedMs > 0) {\r\n                var dependenciesPerSec = intervalDependencies / elapsedSeconds;\r\n                var failedDependenciesPerSec = intervalFailedDependencies / elapsedSeconds;\r\n\r\n                this._client.trackMetric({ name: Constants.QuickPulseCounter.DEPENDENCY_RATE, value: dependenciesPerSec});\r\n                this._client.trackMetric({ name: Constants.QuickPulseCounter.DEPENDENCY_FAILURE_RATE, value: failedDependenciesPerSec});\r\n\r\n                // redundant check for livemetrics, but kept for consistency w/ requests\r\n                // Only send duration to live metrics if it has been updated!\r\n                if (!this._enableLiveMetricsCounters || intervalDependencies > 0) {\r\n                    this._client.trackMetric({ name: Constants.QuickPulseCounter.DEPENDENCY_DURATION, value: averageDependencyExecutionTime});\r\n                }\r\n            }\r\n            this._lastDependencies = dependencies;\r\n        }\r\n    }\r\n\r\n    // Static counter is accumulated externally. Report the rate to client here\r\n    // Note: This is currently only used with QuickPulse client\r\n    private _trackExceptionRate() {\r\n        if (this._enableLiveMetricsCounters) {\r\n            var lastExceptions = this._lastExceptions;\r\n            var exceptions = {\r\n                totalExceptionCount: AutoCollectPerformance._totalExceptionCount,\r\n                time: +new Date\r\n            };\r\n\r\n            var intervalExceptions = (exceptions.totalExceptionCount - lastExceptions.totalExceptionCount) || 0;\r\n            var elapsedMs = exceptions.time - lastExceptions.time;\r\n            var elapsedSeconds = elapsedMs / 1000;\r\n\r\n            if (elapsedMs > 0) {\r\n                var exceptionsPerSec = intervalExceptions / elapsedSeconds;\r\n                this._client.trackMetric({ name: Constants.QuickPulseCounter.EXCEPTION_RATE, value: exceptionsPerSec});\r\n            }\r\n            this._lastExceptions = exceptions;\r\n        }\r\n    }\r\n\r\n    public dispose() {\r\n        AutoCollectPerformance.INSTANCE = null;\r\n        this.enable(false);\r\n        this._isInitialized = false;\r\n    }\r\n}\r\n\r\nexport = AutoCollectPerformance;\r\n"]}