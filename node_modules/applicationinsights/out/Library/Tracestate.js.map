{"version":3,"file":"Tracestate.js","sourceRoot":"","sources":["../../Library/Tracestate.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Helper class to manage parsing and strict-validation of tracestate header. W3C tracestate spec\r\n * is documented at https://www.w3.org/TR/trace-context/#header-value\r\n * @class Tracestate\r\n */\r\nclass Tracestate {\r\n    public static strict = true;\r\n\r\n    public fieldmap: string[] = [];\r\n\r\n    // if true, performs strict tracestate header checking, else just passes it along\r\n    constructor(id?: string) {\r\n        if (!id) {\r\n            return;\r\n        }\r\n        this.fieldmap = this.parseHeader(id);\r\n    }\r\n\r\n    public toString(): string {\r\n        const fieldarr = this.fieldmap;\r\n\r\n        if (!fieldarr || fieldarr.length == 0) {\r\n            return null;\r\n        }\r\n\r\n        return fieldarr.join(\", \");\r\n    }\r\n\r\n    private static validateKeyChars(key: string): boolean {\r\n        const keyParts = key.split(\"@\");\r\n        if (keyParts.length == 2) {\r\n            // Parse for tenant@vendor format\r\n            const tenant = keyParts[0].trim();\r\n            const vendor = keyParts[1].trim();\r\n            const tenantValid = Boolean(tenant.match(/^[\\ ]?[a-z0-9\\*\\-\\_/]{1,241}$/));\r\n            const vendorValid = Boolean(vendor.match(/^[\\ ]?[a-z0-9\\*\\-\\_/]{1,14}$/));\r\n            return tenantValid && vendorValid;\r\n        } else if (keyParts.length == 1) {\r\n            // Parse for standard key format\r\n            return Boolean(key.match(/^[\\ ]?[a-z0-9\\*\\-\\_/]{1,256}$/));\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private parseHeader(id: string): string[] {\r\n        const res: string[] = [];\r\n        const keydeduper: {[key: string]: boolean} = {};\r\n        const parts = id.split(\",\");\r\n        if (parts.length > 32) return null;\r\n        for (let rawPart of parts) {\r\n            const part = rawPart.trim(); // trim out whitespace\r\n            if (part.length === 0) {\r\n                continue; // Discard empty pairs, but keep the rest of this tracestate\r\n            }\r\n\r\n            const pair = part.split(\"=\");\r\n            // pair should contain exactly one \"=\"\r\n            if (pair.length !== 2) {\r\n                return null; // invalid pair: discard entire tracestate\r\n            }\r\n\r\n            // Validate length and charset of this key\r\n            if (!Tracestate.validateKeyChars(pair[0])) {\r\n                return null;\r\n            }\r\n\r\n            // Assert uniqueness of this key\r\n            if (keydeduper[pair[0]]) {\r\n                return null; // duplicate key: discard entire tracestate\r\n            } else {\r\n                keydeduper[pair[0]] = true\r\n            }\r\n\r\n            // All checks passed -- add this part\r\n            res.push(part);\r\n        }\r\n\r\n        return res;\r\n    }\r\n}\r\n\r\nexport = Tracestate;\r\n"]}