{"version":3,"file":"QuickPulseStateManager.js","sourceRoot":"","sources":["../../Library/QuickPulseStateManager.ts"],"names":[],"mappings":"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","sourcesContent":["import Logging = require(\"./Logging\");\r\nimport Config = require(\"./Config\");\r\nimport QuickPulseEnvelopeFactory = require(\"./QuickPulseEnvelopeFactory\");\r\nimport QuickPulseSender = require(\"./QuickPulseSender\");\r\nimport Constants = require(\"../Declarations/Constants\");\r\nimport Context = require(\"./Context\");\r\n\r\nimport * as http from \"http\";\r\nimport * as Contracts from \"../Declarations/Contracts\";\r\n\r\n\r\n/** State Container for sending to the QuickPulse Service */\r\nclass QuickPulseStateManager {\r\n    public config: Config;\r\n    public context: Context;\r\n\r\n    private static MAX_POST_WAIT_TIME = 20000;\r\n    private static MAX_PING_WAIT_TIME = 60000;\r\n    private static FALLBACK_INTERVAL = 60000;\r\n    private static PING_INTERVAL = 5000;\r\n    private static POST_INTERVAL = 1000;\r\n\r\n    private _isCollectingData: boolean = false;\r\n    private _sender: QuickPulseSender;\r\n    private _isEnabled: boolean;\r\n    private _lastSuccessTime: number = Date.now();\r\n    private _lastSendSucceeded: boolean = true;\r\n    private _handle: NodeJS.Timer;\r\n    private _metrics: {[name: string]: Contracts.MetricQuickPulse} = {};\r\n    private _documents: Contracts.DocumentQuickPulse[] = [];\r\n    private _collectors: {enable: (enable: boolean) => void}[] = [];\r\n\r\n    constructor(iKey?: string, context?: Context) {\r\n        this.config = new Config(iKey);\r\n        this.context = context || new Context();\r\n        this._sender = new QuickPulseSender(this.config);\r\n        this._isEnabled = false;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param collector\r\n     */\r\n    public addCollector(collector: any): void {\r\n        this._collectors.push(collector);\r\n    }\r\n\r\n    /**\r\n     * Override of TelemetryClient.trackMetric\r\n     */\r\n    public trackMetric(telemetry: Contracts.MetricTelemetry): void {\r\n        this._addMetric(telemetry);\r\n    }\r\n\r\n    /**\r\n     * Add a document to the current buffer\r\n     * @param envelope\r\n     */\r\n    public addDocument(envelope: Contracts.Envelope): void {\r\n        const document = QuickPulseEnvelopeFactory.telemetryEnvelopeToQuickPulseDocument(envelope);\r\n        if (document) {\r\n            this._documents.push(document);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enable or disable communication with QuickPulseService\r\n     * @param isEnabled\r\n     */\r\n    public enable(isEnabled: boolean): void {\r\n        if (isEnabled && !this._isEnabled) {\r\n            this._isEnabled = true;\r\n            this._goQuickPulse();\r\n        } else if (!isEnabled && this._isEnabled) {\r\n            this._isEnabled = false;\r\n            clearTimeout(this._handle);\r\n            this._handle = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enable or disable all collectors in this instance\r\n     * @param enable\r\n     */\r\n    private enableCollectors(enable: boolean): void {\r\n        this._collectors.forEach(collector => {\r\n            collector.enable(enable)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Add the metric to this buffer. If same metric already exists in this buffer, add weight to it\r\n     * @param telemetry\r\n     */\r\n    private _addMetric(telemetry: Contracts.MetricTelemetry) {\r\n        const {value} = telemetry;\r\n        const count = telemetry.count || 1;\r\n\r\n        let name = Constants.PerformanceToQuickPulseCounter[telemetry.name];\r\n        if (name) {\r\n            if (this._metrics[name]) {\r\n                this._metrics[name].Value = (this._metrics[name].Value*this._metrics[name].Weight + value*count) / (this._metrics[name].Weight + count);\r\n                this._metrics[name].Weight += count;\r\n            } else {\r\n                this._metrics[name] = QuickPulseEnvelopeFactory.createQuickPulseMetric(telemetry);\r\n                this._metrics[name].Name = name;\r\n                this._metrics[name].Weight = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _resetQuickPulseBuffer(): void {\r\n        delete this._metrics;\r\n        this._metrics = {};\r\n        this._documents.length = 0;\r\n    }\r\n\r\n    private _goQuickPulse(): void {\r\n        // Create envelope from Documents and Metrics\r\n        const metrics = Object.keys(this._metrics).map(k => this._metrics[k]);\r\n        const envelope = QuickPulseEnvelopeFactory.createQuickPulseEnvelope(metrics, this._documents.slice(), this.config, this.context);\r\n\r\n        // Clear this document, metric buffer\r\n        this._resetQuickPulseBuffer();\r\n\r\n        // Send it to QuickPulseService, if collecting\r\n        if (this._isCollectingData) {\r\n            this._post(envelope);\r\n        } else {\r\n            this._ping(envelope);\r\n        }\r\n\r\n        let currentTimeout = this._isCollectingData ? QuickPulseStateManager.POST_INTERVAL : QuickPulseStateManager.PING_INTERVAL;\r\n        if (this._isCollectingData && Date.now() - this._lastSuccessTime >= QuickPulseStateManager.MAX_POST_WAIT_TIME && !this._lastSendSucceeded) {\r\n            // Haven't posted successfully in 20 seconds, so wait 60 seconds and ping\r\n            this._isCollectingData = false;\r\n            currentTimeout = QuickPulseStateManager.FALLBACK_INTERVAL;\r\n        } else if (!this._isCollectingData && Date.now() - this._lastSuccessTime >= QuickPulseStateManager.MAX_PING_WAIT_TIME && !this._lastSendSucceeded) {\r\n            // Haven't pinged successfully in 60 seconds, so wait another 60 seconds\r\n            currentTimeout = QuickPulseStateManager.FALLBACK_INTERVAL;\r\n        }\r\n        this._lastSendSucceeded = null;\r\n        this._handle = <any>setTimeout(this._goQuickPulse.bind(this), currentTimeout);\r\n        this._handle.unref(); // Don't block apps from terminating\r\n    }\r\n\r\n    private _ping(envelope: Contracts.EnvelopeQuickPulse): void {\r\n        this._sender.ping(envelope, this._quickPulseDone.bind(this));\r\n    }\r\n\r\n    private _post(envelope: Contracts.EnvelopeQuickPulse): void {\r\n        this._sender.post(envelope, this._quickPulseDone.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Change the current QPS send state. (shouldPOST == undefined) --> error, but do not change the state yet.\r\n     */\r\n    private _quickPulseDone(shouldPOST?: boolean, res?: http.IncomingMessage): void {\r\n        if (shouldPOST != undefined) {\r\n            if (this._isCollectingData !== shouldPOST) {\r\n                Logging.info(\"Live Metrics sending data\", shouldPOST);\r\n                this.enableCollectors(shouldPOST);\r\n            }\r\n            this._isCollectingData = shouldPOST;\r\n\r\n            if (res && res.statusCode < 300 && res.statusCode >= 200) {\r\n                this._lastSuccessTime = Date.now();\r\n                this._lastSendSucceeded = true;\r\n            } else {\r\n                this._lastSendSucceeded = false;\r\n            }\r\n        } else {\r\n            // Received an error, keep the state as is\r\n            this._lastSendSucceeded = false;\r\n        }\r\n    }\r\n}\r\n\r\nexport = QuickPulseStateManager;\r\n"]}