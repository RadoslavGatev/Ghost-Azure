{"version":3,"file":"Context.js","sourceRoot":"","sources":["../../Library/Context.ts"],"names":[],"mappings":"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","sourcesContent":["import os = require(\"os\");\r\nimport http = require(\"http\");\r\nimport fs = require(\"fs\");\r\nimport path = require(\"path\");\r\n\r\nimport Contracts = require(\"../Declarations/Contracts\");\r\nimport Logging = require(\"./Logging\");\r\n\r\nclass Context {\r\n\r\n    public keys: Contracts.ContextTagKeys;\r\n    public tags: { [key: string]: string};\r\n    public static DefaultRoleName:string = \"Web\";\r\n    public static appVersion: {[path: string]: string} = {};\r\n    public static sdkVersion: string = null;\r\n\r\n    constructor(packageJsonPath?: string) {\r\n        this.keys = new Contracts.ContextTagKeys();\r\n        this.tags = <{ [key: string]: string}>{};\r\n\r\n        this._loadApplicationContext(packageJsonPath);\r\n        this._loadDeviceContext();\r\n        this._loadInternalContext();\r\n    }\r\n\r\n    private _loadApplicationContext(packageJsonPath?: string) {\r\n        // note: this should return the host package.json\r\n        packageJsonPath = packageJsonPath || path.resolve(__dirname, \"../../../../package.json\");\r\n\r\n        if (!Context.appVersion[packageJsonPath]) {\r\n            Context.appVersion[packageJsonPath] = \"unknown\";\r\n            try {\r\n                let packageJson = JSON.parse(fs.readFileSync(packageJsonPath, \"utf8\"));\r\n                if (packageJson && typeof packageJson.version === \"string\") {\r\n                    Context.appVersion[packageJsonPath] = packageJson.version;\r\n                }\r\n            } catch (exception) {\r\n                Logging.info(\"unable to read app version: \", exception);\r\n            }\r\n        }\r\n\r\n        this.tags[this.keys.applicationVersion] = Context.appVersion[packageJsonPath];\r\n    }\r\n\r\n    private _loadDeviceContext() {\r\n        this.tags[this.keys.deviceId] = \"\";\r\n        this.tags[this.keys.cloudRoleInstance] = os && os.hostname();\r\n        this.tags[this.keys.deviceOSVersion] = os && (os.type() + \" \" + os.release());\r\n        this.tags[this.keys.cloudRole] = Context.DefaultRoleName;\r\n\r\n        // not yet supported tags\r\n        this.tags[\"ai.device.osArchitecture\"] = os && os.arch();\r\n        this.tags[\"ai.device.osPlatform\"] = os && os.platform();\r\n    }\r\n\r\n    private _loadInternalContext() {\r\n        // note: this should return the sdk package.json\r\n        let packageJsonPath = path.resolve(__dirname, \"../../package.json\");\r\n\r\n        if (!Context.sdkVersion) {\r\n            Context.sdkVersion = \"unknown\";\r\n            try {\r\n                let packageJson = JSON.parse(fs.readFileSync(packageJsonPath, \"utf8\"));\r\n                if (packageJson && typeof packageJson.version === \"string\") {\r\n                    Context.sdkVersion = packageJson.version;\r\n                }\r\n            } catch (exception) {\r\n                Logging.info(\"unable to read app version: \", exception);\r\n            }\r\n        }\r\n\r\n        this.tags[this.keys.internalSdkVersion] = \"node:\" + Context.sdkVersion;\r\n    }\r\n}\r\n\r\nexport = Context;\r\n"]}