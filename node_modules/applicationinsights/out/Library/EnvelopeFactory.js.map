{"version":3,"file":"EnvelopeFactory.js","sourceRoot":"","sources":["../../Library/EnvelopeFactory.ts"],"names":[],"mappings":"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","sourcesContent":["import Contracts = require(\"../Declarations/Contracts\")\r\nimport Util = require(\"./Util\")\r\nimport Config = require(\"./Config\");\r\nimport Context = require(\"./Context\");\r\nimport { CorrelationContextManager } from \"../AutoCollection/CorrelationContextManager\";\r\n\r\n\r\n/**\r\n * Manages the logic of creating envelopes from Telemetry objects\r\n */\r\nclass EnvelopeFactory {\r\n\r\n\r\n    /**\r\n     * Creates envelope ready to be sent by Channel\r\n     * @param telemetry Telemetry data\r\n     * @param telemetryType Type of telemetry\r\n     * @param commonProperties Bag of custom common properties to be added to the envelope\r\n     * @param context Client context\r\n     * @param config Client configuration\r\n     */\r\n    public static createEnvelope(\r\n        telemetry: Contracts.Telemetry,\r\n        telemetryType: Contracts.TelemetryType,\r\n        commonProperties?: { [key: string]: string; },\r\n        context?: Context,\r\n        config?: Config): Contracts.Envelope {\r\n\r\n        var data = null;\r\n\r\n\r\n        switch (telemetryType) {\r\n            case Contracts.TelemetryType.Trace:\r\n                data = EnvelopeFactory.createTraceData(<Contracts.TraceTelemetry>telemetry);\r\n                break;\r\n            case Contracts.TelemetryType.Dependency:\r\n                data = EnvelopeFactory.createDependencyData(<Contracts.DependencyTelemetry>telemetry);\r\n                break;\r\n            case Contracts.TelemetryType.Event:\r\n                data = EnvelopeFactory.createEventData(<Contracts.EventTelemetry>telemetry);\r\n                break;\r\n            case Contracts.TelemetryType.Exception:\r\n                data = EnvelopeFactory.createExceptionData(<Contracts.ExceptionTelemetry>telemetry);\r\n                break;\r\n            case Contracts.TelemetryType.Request:\r\n                data = EnvelopeFactory.createRequestData(<Contracts.RequestTelemetry>telemetry);\r\n                break;\r\n            case Contracts.TelemetryType.Metric:\r\n                data = EnvelopeFactory.createMetricData(<Contracts.MetricTelemetry>telemetry);\r\n                break;\r\n            case Contracts.TelemetryType.Availability:\r\n                data = EnvelopeFactory.createAvailabilityData(<Contracts.AvailabilityTelemetry>telemetry);\r\n                break;\r\n            case Contracts.TelemetryType.PageView:\r\n                data = EnvelopeFactory.createPageViewData(<Contracts.PageViewTelemetry>telemetry);\r\n                break;\r\n        }\r\n\r\n        if (commonProperties && Contracts.domainSupportsProperties(data.baseData)) { // Do instanceof check. TS will automatically cast and allow the properties property\r\n            if (data && data.baseData) {\r\n                // if no properties are specified just add the common ones\r\n                if (!data.baseData.properties) {\r\n                    data.baseData.properties = commonProperties;\r\n                } else {\r\n                    // otherwise, check each of the common ones\r\n                    for (var name in commonProperties) {\r\n                        // only override if the property `name` has not been set on this item\r\n                        if (!data.baseData.properties[name]) {\r\n                            data.baseData.properties[name] = commonProperties[name];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // sanitize properties\r\n            data.baseData.properties = Util.validateStringMap(data.baseData.properties);\r\n        }\r\n\r\n        var iKey = config ? config.instrumentationKey || \"\" : \"\";\r\n        var envelope = new Contracts.Envelope();\r\n        envelope.data = data;\r\n        envelope.iKey = iKey;\r\n\r\n        // this is kind of a hack, but the envelope name is always the same as the data name sans the chars \"data\"\r\n        envelope.name =\r\n            \"Microsoft.ApplicationInsights.\" +\r\n            iKey.replace(/-/g, \"\") +\r\n            \".\" +\r\n            data.baseType.substr(0, data.baseType.length - 4);\r\n        envelope.tags = this.getTags(context, telemetry.tagOverrides);\r\n        envelope.time = (new Date()).toISOString();\r\n        envelope.ver = 1;\r\n        envelope.sampleRate = config ? config.samplingPercentage : 100;\r\n\r\n        // Exclude metrics from sampling by default\r\n        if (telemetryType === Contracts.TelemetryType.Metric) {\r\n            envelope.sampleRate = 100;\r\n        }\r\n\r\n        return envelope;\r\n    }\r\n\r\n    private static createTraceData(telemetry: Contracts.TraceTelemetry): Contracts.Data<Contracts.MessageData> {\r\n        var trace = new Contracts.MessageData();\r\n        trace.message = telemetry.message;\r\n        trace.properties = telemetry.properties;\r\n        if (!isNaN(telemetry.severity)) {\r\n            trace.severityLevel = telemetry.severity;\r\n        } else {\r\n            trace.severityLevel = Contracts.SeverityLevel.Information;\r\n        }\r\n\r\n        var data = new Contracts.Data<Contracts.MessageData>();\r\n        data.baseType = Contracts.telemetryTypeToBaseType(Contracts.TelemetryType.Trace);\r\n        data.baseData = trace;\r\n        return data;\r\n    }\r\n\r\n    private static createDependencyData(telemetry: Contracts.DependencyTelemetry & Contracts.Identified): Contracts.Data<Contracts.RemoteDependencyData> {\r\n        var remoteDependency = new Contracts.RemoteDependencyData();\r\n        if (typeof telemetry.name === \"string\") {\r\n            remoteDependency.name = telemetry.name.length > 1024 ? telemetry.name.slice(0, 1021) + '...' : telemetry.name;\r\n        }\r\n        remoteDependency.data = telemetry.data;\r\n        remoteDependency.target = telemetry.target;\r\n        remoteDependency.duration = Util.msToTimeSpan(telemetry.duration);\r\n        remoteDependency.success = telemetry.success;\r\n        remoteDependency.type = telemetry.dependencyTypeName;\r\n        remoteDependency.properties = telemetry.properties;\r\n        remoteDependency.resultCode = (telemetry.resultCode ? telemetry.resultCode + '' : '');\r\n\r\n        if (telemetry.id) {\r\n            remoteDependency.id = telemetry.id;\r\n        }\r\n        else {\r\n            remoteDependency.id = Util.w3cTraceId();\r\n        }\r\n\r\n        var data = new Contracts.Data<Contracts.RemoteDependencyData>();\r\n        data.baseType = Contracts.telemetryTypeToBaseType(Contracts.TelemetryType.Dependency);\r\n        data.baseData = remoteDependency;\r\n        return data;\r\n    }\r\n\r\n    private static createEventData(telemetry: Contracts.EventTelemetry): Contracts.Data<Contracts.EventData> {\r\n        var event = new Contracts.EventData();\r\n        event.name = telemetry.name;\r\n        event.properties = telemetry.properties;\r\n        event.measurements = telemetry.measurements;\r\n\r\n        var data = new Contracts.Data<Contracts.EventData>();\r\n        data.baseType = Contracts.telemetryTypeToBaseType(Contracts.TelemetryType.Event);\r\n        data.baseData = event;\r\n        return data;\r\n    }\r\n\r\n    private static createExceptionData(telemetry: Contracts.ExceptionTelemetry): Contracts.Data<Contracts.ExceptionData> {\r\n        var exception = new Contracts.ExceptionData();\r\n        exception.properties = telemetry.properties;\r\n        if (!isNaN(telemetry.severity)) {\r\n            exception.severityLevel = telemetry.severity;\r\n        } else {\r\n            exception.severityLevel = Contracts.SeverityLevel.Error;\r\n        }\r\n        exception.measurements = telemetry.measurements;\r\n        exception.exceptions = [];\r\n\r\n        var stack = telemetry.exception[\"stack\"];\r\n        var exceptionDetails = new Contracts.ExceptionDetails();\r\n        exceptionDetails.message = telemetry.exception.message;\r\n        exceptionDetails.typeName = telemetry.exception.name;\r\n        exceptionDetails.parsedStack = this.parseStack(stack);\r\n        exceptionDetails.hasFullStack = Util.isArray(exceptionDetails.parsedStack) && exceptionDetails.parsedStack.length > 0;\r\n        exception.exceptions.push(exceptionDetails);\r\n\r\n        var data = new Contracts.Data<Contracts.ExceptionData>();\r\n        data.baseType = Contracts.telemetryTypeToBaseType(Contracts.TelemetryType.Exception);\r\n        data.baseData = exception;\r\n        return data;\r\n    }\r\n\r\n    private static createRequestData(telemetry: Contracts.RequestTelemetry & Contracts.Identified): Contracts.Data<Contracts.RequestData> {\r\n        var requestData = new Contracts.RequestData();\r\n        if (telemetry.id) {\r\n            requestData.id = telemetry.id;\r\n        }\r\n        else {\r\n            requestData.id = Util.w3cTraceId();\r\n        }\r\n        requestData.name = telemetry.name;\r\n        requestData.url = telemetry.url;\r\n        requestData.source = telemetry.source;\r\n        requestData.duration = Util.msToTimeSpan(telemetry.duration);\r\n        requestData.responseCode = (telemetry.resultCode ? telemetry.resultCode + '' : '');\r\n        requestData.success = telemetry.success\r\n        requestData.properties = telemetry.properties;\r\n\r\n        var data = new Contracts.Data<Contracts.RequestData>();\r\n        data.baseType = Contracts.telemetryTypeToBaseType(Contracts.TelemetryType.Request);\r\n        data.baseData = requestData;\r\n        return data;\r\n    }\r\n\r\n    private static createMetricData(telemetry: Contracts.MetricTelemetry): Contracts.Data<Contracts.MetricData> {\r\n        var metrics = new Contracts.MetricData(); // todo: enable client-batching of these\r\n        metrics.metrics = [];\r\n\r\n        var metric = new Contracts.DataPoint();\r\n        metric.count = !isNaN(telemetry.count) ? telemetry.count : 1;\r\n        metric.kind = Contracts.DataPointType.Aggregation;\r\n        metric.max = !isNaN(telemetry.max) ? telemetry.max : telemetry.value;\r\n        metric.min = !isNaN(telemetry.min) ? telemetry.min : telemetry.value;\r\n        metric.name = telemetry.name;\r\n        metric.stdDev = !isNaN(telemetry.stdDev) ? telemetry.stdDev : 0;\r\n        metric.value = telemetry.value;\r\n\r\n        metrics.metrics.push(metric);\r\n\r\n        metrics.properties = telemetry.properties;\r\n\r\n        var data = new Contracts.Data<Contracts.MetricData>();\r\n        data.baseType = Contracts.telemetryTypeToBaseType(Contracts.TelemetryType.Metric);\r\n        data.baseData = metrics;\r\n        return data;\r\n    }\r\n\r\n    private static createAvailabilityData(\r\n        telemetry: Contracts.AvailabilityTelemetry & Contracts.Identified,\r\n    ): Contracts.Data<Contracts.AvailabilityData> {\r\n        let availabilityData = new Contracts.AvailabilityData();\r\n\r\n        if (telemetry.id) {\r\n            availabilityData.id = telemetry.id;\r\n        } else {\r\n            availabilityData.id = Util.w3cTraceId();\r\n        }\r\n        availabilityData.name = telemetry.name;\r\n        availabilityData.duration = Util.msToTimeSpan(telemetry.duration);\r\n        availabilityData.success = telemetry.success;\r\n        availabilityData.runLocation = telemetry.runLocation;\r\n        availabilityData.message = telemetry.message;\r\n        availabilityData.measurements = telemetry.measurements;\r\n        availabilityData.properties = telemetry.properties;\r\n\r\n        let data = new Contracts.Data<Contracts.AvailabilityData>();\r\n        data.baseType = Contracts.telemetryTypeToBaseType(Contracts.TelemetryType.Availability);\r\n        data.baseData = availabilityData;\r\n\r\n        return data;\r\n    }\r\n\r\n    private static createPageViewData(\r\n        telemetry: Contracts.PageViewTelemetry & Contracts.Identified,\r\n    ): Contracts.Data<Contracts.PageViewData> {\r\n        let pageViewData = new Contracts.PageViewData();\r\n\r\n        pageViewData.name = telemetry.name;\r\n        pageViewData.duration = Util.msToTimeSpan(telemetry.duration);\r\n        pageViewData.url = telemetry.url;\r\n        pageViewData.measurements = telemetry.measurements;\r\n        pageViewData.properties = telemetry.properties;\r\n\r\n        let data = new Contracts.Data<Contracts.PageViewData>();\r\n        data.baseType = Contracts.telemetryTypeToBaseType(Contracts.TelemetryType.PageView);\r\n        data.baseData = pageViewData;\r\n\r\n        return data;\r\n    }\r\n\r\n    private static getTags(context: Context, tagOverrides?: { [key: string]: string; }) {\r\n        var correlationContext = CorrelationContextManager.getCurrentContext();\r\n\r\n        // Make a copy of context tags so we don't alter the actual object\r\n        // Also perform tag overriding\r\n        var newTags = <{ [key: string]: string }>{};\r\n\r\n        if (context && context.tags) {\r\n            for (var key in context.tags) {\r\n                newTags[key] = context.tags[key];\r\n            }\r\n        }\r\n        if (tagOverrides) {\r\n            for (var key in tagOverrides) {\r\n                newTags[key] = tagOverrides[key];\r\n            }\r\n        }\r\n\r\n        // Fill in internally-populated values if not already set\r\n        if (correlationContext) {\r\n            newTags[context.keys.operationId] = newTags[context.keys.operationId] || correlationContext.operation.id;\r\n            newTags[context.keys.operationName] = newTags[context.keys.operationName] || correlationContext.operation.name;\r\n            newTags[context.keys.operationParentId] = newTags[context.keys.operationParentId] || correlationContext.operation.parentId;\r\n        }\r\n\r\n        return newTags;\r\n    }\r\n\r\n\r\n    private static parseStack(stack: any): _StackFrame[] {\r\n        var parsedStack: _StackFrame[] = undefined;\r\n        if (typeof stack === \"string\") {\r\n            var frames = stack.split(\"\\n\");\r\n            parsedStack = [];\r\n            var level = 0;\r\n\r\n            var totalSizeInBytes = 0;\r\n            for (var i = 0; i <= frames.length; i++) {\r\n                var frame = frames[i];\r\n                if (_StackFrame.regex.test(frame)) {\r\n                    var parsedFrame = new _StackFrame(frames[i], level++);\r\n                    totalSizeInBytes += parsedFrame.sizeInBytes;\r\n                    parsedStack.push(parsedFrame);\r\n                }\r\n            }\r\n\r\n            // DP Constraint - exception parsed stack must be < 32KB\r\n            // remove frames from the middle to meet the threshold\r\n            var exceptionParsedStackThreshold = 32 * 1024;\r\n            if (totalSizeInBytes > exceptionParsedStackThreshold) {\r\n                var left = 0;\r\n                var right = parsedStack.length - 1;\r\n                var size = 0;\r\n                var acceptedLeft = left;\r\n                var acceptedRight = right;\r\n\r\n                while (left < right) {\r\n                    // check size\r\n                    var lSize = parsedStack[left].sizeInBytes;\r\n                    var rSize = parsedStack[right].sizeInBytes;\r\n                    size += lSize + rSize;\r\n\r\n                    if (size > exceptionParsedStackThreshold) {\r\n\r\n                        // remove extra frames from the middle\r\n                        var howMany = acceptedRight - acceptedLeft + 1;\r\n                        parsedStack.splice(acceptedLeft, howMany);\r\n                        break;\r\n                    }\r\n\r\n                    // update pointers\r\n                    acceptedLeft = left;\r\n                    acceptedRight = right;\r\n\r\n                    left++;\r\n                    right--;\r\n                }\r\n            }\r\n        }\r\n\r\n        return parsedStack;\r\n    }\r\n\r\n}\r\n\r\nclass _StackFrame {\r\n\r\n    // regex to match stack frames from ie/chrome/ff\r\n    // methodName=$2, fileName=$4, lineNo=$5, column=$6\r\n    public static regex = /^(\\s+at)?(.*?)(\\@|\\s\\(|\\s)([^\\(\\n]+):(\\d+):(\\d+)(\\)?)$/;\r\n    public static baseSize = 58; //'{\"method\":\"\",\"level\":,\"assembly\":\"\",\"fileName\":\"\",\"line\":}'.length\r\n    public sizeInBytes = 0;\r\n    public level: number;\r\n    public method: string;\r\n    public assembly: string;\r\n    public fileName: string;\r\n    public line: number;\r\n\r\n    constructor(frame: string, level: number) {\r\n        this.level = level;\r\n        this.method = \"<no_method>\";\r\n        this.assembly = Util.trim(frame);\r\n        var matches = frame.match(_StackFrame.regex);\r\n        if (matches && matches.length >= 5) {\r\n            this.method = Util.trim(matches[2]) || this.method;\r\n            this.fileName = Util.trim(matches[4]) || \"<no_filename>\";\r\n            this.line = parseInt(matches[5]) || 0;\r\n        }\r\n\r\n        this.sizeInBytes += this.method.length;\r\n        this.sizeInBytes += this.fileName.length;\r\n        this.sizeInBytes += this.assembly.length;\r\n\r\n        // todo: these might need to be removed depending on how the back-end settles on their size calculation\r\n        this.sizeInBytes += _StackFrame.baseSize;\r\n        this.sizeInBytes += this.level.toString().length;\r\n        this.sizeInBytes += this.line.toString().length;\r\n    }\r\n}\r\n\r\nexport = EnvelopeFactory;\r\n"]}