{"version":3,"file":"Config.js","sourceRoot":"","sources":["../../Library/Config.ts"],"names":[],"mappings":"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","sourcesContent":["import CorrelationIdManager = require('./CorrelationIdManager');\r\nimport ConnectionStringParser = require('./ConnectionStringParser');\r\nimport Logging = require('./Logging');\r\nimport Constants = require('../Declarations/Constants');\r\nimport http = require('http');\r\nimport https = require('https');\r\nimport url = require('url');\r\n\r\nclass Config {\r\n    // Azure adds this prefix to all environment variables\r\n    public static ENV_azurePrefix = \"APPSETTING_\";\r\n\r\n    // This key is provided in the readme\r\n    public static ENV_iKey = \"APPINSIGHTS_INSTRUMENTATIONKEY\";\r\n    public static legacy_ENV_iKey = \"APPINSIGHTS_INSTRUMENTATION_KEY\";\r\n    public static ENV_profileQueryEndpoint = \"APPINSIGHTS_PROFILE_QUERY_ENDPOINT\";\r\n    public static ENV_quickPulseHost = \"APPINSIGHTS_QUICKPULSE_HOST\";\r\n\r\n    // Azure Connection String\r\n    public static ENV_connectionString = \"APPLICATIONINSIGHTS_CONNECTION_STRING\";\r\n\r\n    // Native Metrics Opt Outs\r\n    public static ENV_nativeMetricsDisablers = \"APPLICATION_INSIGHTS_DISABLE_EXTENDED_METRIC\";\r\n    public static ENV_nativeMetricsDisableAll = \"APPLICATION_INSIGHTS_DISABLE_ALL_EXTENDED_METRICS\"\r\n\r\n    public static ENV_http_proxy = \"http_proxy\";\r\n    public static ENV_https_proxy = \"https_proxy\";\r\n\r\n    /** An identifier for your Application Insights resource */\r\n    public instrumentationKey: string;\r\n    /** The id for cross-component correlation. READ ONLY. */\r\n    public correlationId: string;\r\n    /** The ingestion endpoint to send telemetry payloads to */\r\n    public endpointUrl: string;\r\n    /** The maximum number of telemetry items to include in a payload to the ingestion endpoint (Default 250) */\r\n    public maxBatchSize: number;\r\n    /** The maximum amount of time to wait for a payload to reach maxBatchSize (Default 15000) */\r\n    public maxBatchIntervalMs: number;\r\n    /** A flag indicating if telemetry transmission is disabled (Default false) */\r\n    public disableAppInsights: boolean;\r\n    /** The percentage of telemetry items tracked that should be transmitted (Default 100) */\r\n    public samplingPercentage: number;\r\n    /** The time to wait before retrying to retrieve the id for cross-component correlation (Default 30000) */\r\n    public correlationIdRetryIntervalMs: number;\r\n    /** A list of domains to exclude from cross-component header injection */\r\n    public correlationHeaderExcludedDomains: string[];\r\n    /** A proxy server for SDK HTTP traffic (Optional, Default pulled from `http_proxy` environment variable) */\r\n    public proxyHttpUrl: string;\r\n    /** A proxy server for SDK HTTPS traffic (Optional, Default pulled from `https_proxy` environment variable) */\r\n    public proxyHttpsUrl: string;\r\n    /** An http.Agent to use for SDK HTTP traffic (Optional, Default undefined) */\r\n    public httpAgent: http.Agent;\r\n    /** An https.Agent to use for SDK HTTPS traffic (Optional, Default undefined) */\r\n    public httpsAgent: https.Agent;\r\n\r\n    /** Disable including legacy headers in outgoing requests, x-ms-request-id */\r\n    public ignoreLegacyHeaders?: boolean;\r\n\r\n    private endpointBase: string = Constants.DEFAULT_BREEZE_ENDPOINT;\r\n    private setCorrelationId: (v: string) => void;\r\n    private _profileQueryEndpoint: string;\r\n    /** Host name for quickpulse service */\r\n    private _quickPulseHost: string;\r\n\r\n\r\n    constructor(setupString?: string) {\r\n        const connectionStringEnv: string | undefined = process.env[Config.ENV_connectionString];\r\n        const csCode = ConnectionStringParser.parse(setupString);\r\n        const csEnv = ConnectionStringParser.parse(connectionStringEnv);\r\n        const iKeyCode = !csCode.instrumentationkey && Object.keys(csCode).length > 0\r\n            ? null // CS was valid but instrumentation key was not provided, null and grab from env var\r\n            : setupString; // CS was invalid, so it must be an ikey\r\n\r\n        this.instrumentationKey = csCode.instrumentationkey || iKeyCode /* === instrumentationKey */ || csEnv.instrumentationkey || Config._getInstrumentationKey();\r\n        // validate ikey. If fails throw a warning\r\n        if(!Config._validateInstrumentationKey(this.instrumentationKey)) {\r\n            Logging.warn(\"An invalid instrumentation key was provided. There may be resulting telemetry loss\", this.instrumentationKey);\r\n        }\r\n\r\n        this.endpointUrl = `${csCode.ingestionendpoint || csEnv.ingestionendpoint || this.endpointBase}/v2/track`;\r\n        this.maxBatchSize = 250;\r\n        this.maxBatchIntervalMs = 15000;\r\n        this.disableAppInsights = false;\r\n        this.samplingPercentage = 100;\r\n        this.correlationIdRetryIntervalMs = 30 * 1000;\r\n        this.correlationHeaderExcludedDomains = [\r\n            \"*.core.windows.net\",\r\n            \"*.core.chinacloudapi.cn\",\r\n            \"*.core.cloudapi.de\",\r\n            \"*.core.usgovcloudapi.net\",\r\n            \"*.core.microsoft.scloud\",\r\n            \"*.core.eaglex.ic.gov\"\r\n        ];\r\n\r\n        this.setCorrelationId = (correlationId) => this.correlationId = correlationId;\r\n\r\n        this.proxyHttpUrl = process.env[Config.ENV_http_proxy] || undefined;\r\n        this.proxyHttpsUrl = process.env[Config.ENV_https_proxy] || undefined;\r\n        this.httpAgent = undefined;\r\n        this.httpsAgent = undefined;\r\n        this.profileQueryEndpoint = csCode.ingestionendpoint || csEnv.ingestionendpoint || process.env[Config.ENV_profileQueryEndpoint] || this.endpointBase;\r\n        this._quickPulseHost = csCode.liveendpoint || csEnv.liveendpoint || process.env[Config.ENV_quickPulseHost] || Constants.DEFAULT_LIVEMETRICS_HOST;\r\n        // Parse quickPulseHost if it starts with http(s)://\r\n        if (this._quickPulseHost.match(/^https?:\\/\\//)) {\r\n            this._quickPulseHost = url.parse(this._quickPulseHost).host;\r\n        }\r\n    }\r\n\r\n    public set profileQueryEndpoint(endpoint: string) {\r\n        CorrelationIdManager.cancelCorrelationIdQuery(this, this.setCorrelationId);\r\n        this._profileQueryEndpoint = endpoint;\r\n        this.correlationId = CorrelationIdManager.correlationIdPrefix; // Reset the correlationId while we wait for the new query\r\n        CorrelationIdManager.queryCorrelationId(this, this.setCorrelationId);\r\n    }\r\n\r\n    public get profileQueryEndpoint() {\r\n        return this._profileQueryEndpoint;\r\n    }\r\n\r\n    public set quickPulseHost(host: string) {\r\n        this._quickPulseHost = host;\r\n    }\r\n\r\n    public get quickPulseHost(): string {\r\n        return this._quickPulseHost;\r\n    }\r\n\r\n\r\n    private static _getInstrumentationKey(): string {\r\n        // check for both the documented env variable and the azure-prefixed variable\r\n        var iKey = process.env[Config.ENV_iKey]\r\n            || process.env[Config.ENV_azurePrefix + Config.ENV_iKey]\r\n            || process.env[Config.legacy_ENV_iKey]\r\n            || process.env[Config.ENV_azurePrefix + Config.legacy_ENV_iKey];\r\n        if (!iKey || iKey == \"\") {\r\n            throw new Error(\"Instrumentation key not found, pass the key in the config to this method or set the key in the environment variable APPINSIGHTS_INSTRUMENTATIONKEY before starting the server\");\r\n        }\r\n\r\n        return iKey;\r\n    }\r\n\r\n    /**\r\n    * Validate UUID Format\r\n    * Specs taken from breeze repo\r\n    * The definition of a VALID instrumentation key is as follows:\r\n    * Not none\r\n    * Not empty\r\n    * Every character is a hex character [0-9a-f]\r\n    * 32 characters are separated into 5 sections via 4 dashes\r\n    * First section has 8 characters\r\n    * Second section has 4 characters\r\n    * Third section has 4 characters\r\n    * Fourth section has 4 characters\r\n    * Fifth section has 12 characters                  \r\n    */    \r\n    private static _validateInstrumentationKey(iKey:string): boolean {\r\n        const UUID_Regex = '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$';\r\n        const regexp = new RegExp(UUID_Regex); \r\n        return regexp.test(iKey);\r\n    }\r\n}\r\n\r\nexport = Config;\r\n"]}