{"version":3,"file":"Channel.js","sourceRoot":"","sources":["../../Library/Channel.ts"],"names":[],"mappings":"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","sourcesContent":["import Contracts = require(\"../Declarations/Contracts\");\r\nimport Logging = require(\"./Logging\");\r\nimport Sender = require(\"./Sender\");\r\n\r\nclass Channel {\r\n\r\n    protected _lastSend: number;\r\n    protected _timeoutHandle: any;\r\n\r\n    protected _isDisabled: () => boolean;\r\n    protected _getBatchSize: () => number;\r\n    protected _getBatchIntervalMs: () => number;\r\n\r\n    public _sender: Sender;\r\n    public _buffer: string[];\r\n\r\n    constructor(isDisabled: () => boolean, getBatchSize: () => number, getBatchIntervalMs: () => number, sender: Sender) {\r\n        this._buffer = [];\r\n        this._lastSend = 0;\r\n        this._isDisabled = isDisabled;\r\n        this._getBatchSize = getBatchSize;\r\n        this._getBatchIntervalMs = getBatchIntervalMs;\r\n        this._sender = sender;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable disk-backed retry caching to cache events when client is offline (enabled by default)\r\n     * These cached events are stored in your system or user's temporary directory and access restricted to your user when possible.\r\n     * @param value if true events that occurred while client is offline will be cached on disk\r\n     * @param resendInterval The wait interval for resending cached events.\r\n     * @param maxBytesOnDisk The maximum size (in bytes) that the created temporary directory for cache events can grow to, before caching is disabled.\r\n     * @returns {Configuration} this class\r\n     */\r\n    public setUseDiskRetryCaching(value: boolean, resendInterval?: number, maxBytesOnDisk?: number) {\r\n        this._sender.setDiskRetryMode(value, resendInterval, maxBytesOnDisk);\r\n    }\r\n\r\n    /**\r\n     * Add a telemetry item to the send buffer\r\n     */\r\n    public send(envelope: Contracts.EnvelopeTelemetry) {\r\n\r\n        // if master off switch is set, don't send any data\r\n        if (this._isDisabled()) {\r\n            // Do not send/save data\r\n            return;\r\n        }\r\n\r\n        // validate input\r\n        if (!envelope) {\r\n            Logging.warn(\"Cannot send null/undefined telemetry\");\r\n            return;\r\n        }\r\n\r\n        // check if the incoming payload is too large, truncate if necessary\r\n        var payload: string = this._stringify(envelope);\r\n        if (typeof payload !== \"string\") {\r\n            return;\r\n        }\r\n\r\n        // enqueue the payload\r\n        this._buffer.push(payload);\r\n\r\n        // flush if we would exceed the max-size limit by adding this item\r\n        if (this._buffer.length >= this._getBatchSize()) {\r\n            this.triggerSend(false);\r\n            return;\r\n        }\r\n\r\n        // ensure an invocation timeout is set if anything is in the buffer\r\n        if (!this._timeoutHandle && this._buffer.length > 0) {\r\n            this._timeoutHandle = setTimeout(() => {\r\n                this._timeoutHandle = null;\r\n                this.triggerSend(false);\r\n            }, this._getBatchIntervalMs());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Immediately send buffered data\r\n     */\r\n    public triggerSend(isNodeCrashing: boolean, callback?: (v: string) => void) {\r\n        let bufferIsEmpty = this._buffer.length < 1;\r\n        if (!bufferIsEmpty) {\r\n            // compose an array of payloads\r\n            var batch = this._buffer.join(\"\\n\");\r\n\r\n            // invoke send\r\n            if (isNodeCrashing) {\r\n                this._sender.saveOnCrash(batch);\r\n                if (typeof callback === \"function\") {\r\n                    callback(\"data saved on crash\");\r\n                }\r\n            } else {\r\n                this._sender.send(Buffer.from ? Buffer.from(batch) : new Buffer(batch), callback);\r\n            }\r\n        }\r\n\r\n        // update lastSend time to enable throttling\r\n        this._lastSend = +new Date;\r\n\r\n        // clear buffer\r\n        this._buffer.length = 0;\r\n        clearTimeout(this._timeoutHandle);\r\n        this._timeoutHandle = null;\r\n        if (bufferIsEmpty && typeof callback === \"function\") {\r\n            callback(\"no data to send\");\r\n        }\r\n    }\r\n\r\n    protected _stringify(envelope: Contracts.EnvelopeTelemetry) {\r\n        try {\r\n            return JSON.stringify(envelope);\r\n        } catch (error) {\r\n            Logging.warn(\"Failed to serialize payload\", error, envelope);\r\n        }\r\n    }\r\n}\r\n\r\nexport = Channel;\r\n"]}