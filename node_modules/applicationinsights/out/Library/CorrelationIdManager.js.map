{"version":3,"file":"CorrelationIdManager.js","sourceRoot":"","sources":["../../Library/CorrelationIdManager.ts"],"names":[],"mappings":"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","sourcesContent":["import https = require('https');\r\nimport http = require('http');\r\nimport url = require('url');\r\n\r\nimport Util = require(\"./Util\");\r\nimport Logging = require(\"./Logging\");\r\nimport Config = require(\"./Config\");\r\n\r\nclass CorrelationIdManager {\r\n    private static TAG = \"CorrelationIdManager\";\r\n    public static correlationIdPrefix = \"cid-v1:\";\r\n\r\n    public static w3cEnabled = true;\r\n\r\n    // To avoid extraneous HTTP requests, we maintain a queue of callbacks waiting on a particular appId lookup,\r\n    // as well as a cache of completed lookups so future requests can be resolved immediately.\r\n    private static pendingLookups: {[key: string]: Function[]} = {};\r\n    private static completedLookups: {[key: string]: string} = {};\r\n\r\n    private static requestIdMaxLength = 1024;\r\n    private static currentRootId = Util.randomu32();\r\n\r\n    public static queryCorrelationId(config: Config, callback: (correlationId: string) => void) {\r\n        // GET request to `${this.endpointBase}/api/profiles/${this.instrumentationKey}/appId`\r\n        // If it 404s, the iKey is bad and we should give up\r\n        // If it fails otherwise, try again later\r\n        const appIdUrlString = `${config.profileQueryEndpoint}/api/profiles/${config.instrumentationKey}/appId`;\r\n\r\n        if (CorrelationIdManager.completedLookups.hasOwnProperty(appIdUrlString)) {\r\n            callback(CorrelationIdManager.completedLookups[appIdUrlString]);\r\n            return;\r\n        } else if (CorrelationIdManager.pendingLookups[appIdUrlString]) {\r\n            CorrelationIdManager.pendingLookups[appIdUrlString].push(callback);\r\n            return;\r\n        }\r\n\r\n        CorrelationIdManager.pendingLookups[appIdUrlString] = [callback];\r\n\r\n        const fetchAppId = () => {\r\n            if (!CorrelationIdManager.pendingLookups[appIdUrlString]) {\r\n                // This query has been cancelled.\r\n                return;\r\n            }\r\n\r\n            const requestOptions = {\r\n                method: 'GET',\r\n                // Ensure this request is not captured by auto-collection.\r\n                // Note: we don't refer to the property in HttpDependencyParser because that would cause a cyclical dependency\r\n                disableAppInsightsAutoCollection: true\r\n            };\r\n\r\n            Logging.info(CorrelationIdManager.TAG, requestOptions);\r\n            const req = Util.makeRequest(config, appIdUrlString, requestOptions, (res) => {\r\n                if (res.statusCode === 200) {\r\n                    // Success; extract the appId from the body\r\n                    let appId = \"\";\r\n                    res.setEncoding(\"utf-8\");\r\n                    res.on('data', (data: any) => {\r\n                        appId += data;\r\n                    });\r\n                    res.on('end', () => {\r\n                        Logging.info(CorrelationIdManager.TAG, appId);\r\n                        const result = CorrelationIdManager.correlationIdPrefix + appId;\r\n                        CorrelationIdManager.completedLookups[appIdUrlString] = result;\r\n                        if (CorrelationIdManager.pendingLookups[appIdUrlString]) {\r\n                            CorrelationIdManager.pendingLookups[appIdUrlString].forEach((cb) => cb(result));\r\n                        }\r\n                        delete CorrelationIdManager.pendingLookups[appIdUrlString];\r\n                    });\r\n                } else if (res.statusCode >= 400 && res.statusCode < 500) {\r\n                    // Not found, probably a bad key. Do not try again.\r\n                    CorrelationIdManager.completedLookups[appIdUrlString] = undefined;\r\n                    delete CorrelationIdManager.pendingLookups[appIdUrlString];\r\n                } else {\r\n                    // Retry after timeout.\r\n                    setTimeout(fetchAppId, config.correlationIdRetryIntervalMs);\r\n                }\r\n            });\r\n            if (req) {\r\n                req.on('error', (error: Error) => {\r\n                    // Unable to contact endpoint.\r\n                    // Do nothing for now.\r\n                    Logging.warn(CorrelationIdManager.TAG, error);\r\n                });\r\n                req.end();\r\n            }\r\n        };\r\n        setTimeout(fetchAppId, 0);\r\n    }\r\n\r\n    public static cancelCorrelationIdQuery(config: Config, callback: (correlationId: string) => void) {\r\n        const appIdUrlString = `${config.profileQueryEndpoint}/api/profiles/${config.instrumentationKey}/appId`;\r\n        const pendingLookups = CorrelationIdManager.pendingLookups[appIdUrlString];\r\n        if (pendingLookups) {\r\n            CorrelationIdManager.pendingLookups[appIdUrlString] = pendingLookups.filter((cb) => cb != callback);\r\n            if (CorrelationIdManager.pendingLookups[appIdUrlString].length == 0) {\r\n                delete CorrelationIdManager.pendingLookups[appIdUrlString];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate a request Id according to https://github.com/lmolkova/correlation/blob/master/hierarchical_request_id.md\r\n     * @param parentId\r\n     */\r\n    public static generateRequestId(parentId: string): string {\r\n        if (parentId) {\r\n            parentId = parentId[0] == '|' ? parentId : '|' + parentId;\r\n            if (parentId[parentId.length -1] !== '.') {\r\n                parentId += '.';\r\n            }\r\n\r\n            const suffix = (CorrelationIdManager.currentRootId++).toString(16);\r\n\r\n            return CorrelationIdManager.appendSuffix(parentId, suffix, '_')\r\n        } else {\r\n            return CorrelationIdManager.generateRootId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a hierarchical identifier of the form |X.*\r\n     * return the root identifier X\r\n     * @param id\r\n     */\r\n    public static getRootId(id: string): string {\r\n        let endIndex = id.indexOf('.');\r\n        if (endIndex < 0) {\r\n            endIndex = id.length;\r\n        }\r\n\r\n        const startIndex = id[0] === '|' ? 1 : 0;\r\n        return id.substring(startIndex, endIndex);\r\n    }\r\n\r\n    private static generateRootId(): string {\r\n        return '|' + Util.w3cTraceId() + '.';\r\n    }\r\n\r\n    private static appendSuffix(parentId: string, suffix: string, delimiter: string): string {\r\n        if (parentId.length + suffix.length < CorrelationIdManager.requestIdMaxLength) {\r\n            return parentId + suffix + delimiter;\r\n        }\r\n\r\n        // Combined identifier would be too long, so we must truncate it.\r\n        // We need 9 characters of space: 8 for the overflow ID, 1 for the\r\n        // overflow delimiter '#'\r\n        let trimPosition = CorrelationIdManager.requestIdMaxLength - 9;\r\n        if (parentId.length > trimPosition) {\r\n            for(; trimPosition > 1; --trimPosition) {\r\n                const c = parentId[trimPosition-1];\r\n                if (c === '.' || c === '_') {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (trimPosition <= 1) {\r\n            // parentId is not a valid ID\r\n            return CorrelationIdManager.generateRootId();\r\n        }\r\n\r\n        suffix = Util.randomu32().toString(16);\r\n        while (suffix.length < 8) {\r\n            suffix = '0' + suffix;\r\n        }\r\n        return parentId.substring(0,trimPosition) + suffix + '#';\r\n    }\r\n}\r\n\r\nexport = CorrelationIdManager;\r\n"]}