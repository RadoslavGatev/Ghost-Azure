{"version":3,"file":"QuickPulseSender.js","sourceRoot":"","sources":["../../Library/QuickPulseSender.ts"],"names":[],"mappings":"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","sourcesContent":["import https = require(\"https\");\r\nimport Config = require(\"./Config\");\r\nimport AutoCollectHttpDependencies = require(\"../AutoCollection/HttpDependencies\");\r\nimport Logging = require(\"./Logging\");\r\nimport QuickPulseUtil = require(\"./QuickPulseUtil\");\r\nimport Util = require(\"./Util\");\r\n\r\n// Types\r\nimport * as http from \"http\";\r\nimport * as Contracts from \"../Declarations/Contracts\";\r\n\r\nconst QuickPulseConfig = {\r\n    method: \"POST\",\r\n    time: \"x-ms-qps-transmission-time\",\r\n    subscribed: \"x-ms-qps-subscribed\"\r\n};\r\n\r\nclass QuickPulseSender {\r\n    private static TAG = \"QuickPulseSender\";\r\n    private static MAX_QPS_FAILURES_BEFORE_WARN = 25;\r\n\r\n    private _config: Config;\r\n    private _consecutiveErrors: number;\r\n\r\n    constructor(config: Config) {\r\n        this._config = config;\r\n        this._consecutiveErrors = 0;\r\n    }\r\n\r\n    public ping(envelope: Contracts.EnvelopeQuickPulse, done: (shouldPOST?: boolean, res?: http.IncomingMessage) => void): void {\r\n        this._submitData(envelope, done, \"ping\");\r\n    }\r\n\r\n    public post(envelope: Contracts.EnvelopeQuickPulse, done: (shouldPOST?: boolean, res?: http.IncomingMessage) => void): void {\r\n\r\n        // Important: When POSTing data, envelope must be an array\r\n        this._submitData([envelope], done, \"post\");\r\n    }\r\n\r\n    private _submitData(envelope: Contracts.EnvelopeQuickPulse | Contracts.EnvelopeQuickPulse[], done: (shouldPOST?: boolean, res?: http.IncomingMessage) => void, postOrPing: \"post\" | \"ping\"): void {\r\n        const payload = JSON.stringify(envelope);\r\n        var options = {\r\n            [AutoCollectHttpDependencies.disableCollectionRequestOption]: true,\r\n            host: this._config.quickPulseHost,\r\n            method: QuickPulseConfig.method,\r\n            path: `/QuickPulseService.svc/${postOrPing}?ikey=${this._config.instrumentationKey}`,\r\n            headers:{\r\n                'Expect': '100-continue',\r\n                [QuickPulseConfig.time]: QuickPulseUtil.getTransmissionTime(), // unit = 100s of nanoseconds\r\n                'Content-Type': 'application\\/json',\r\n                'Content-Length': Buffer.byteLength(payload)\r\n            }\r\n        };\r\n\r\n        // HTTPS only\r\n        if (this._config.httpsAgent) {\r\n            (<any>options).agent = this._config.httpsAgent;\r\n        } else {\r\n            (<any>options).agent = Util.tlsRestrictedAgent;\r\n        }\r\n\r\n        const req = https.request(options, (res: http.IncomingMessage) => {\r\n            const shouldPOSTData = res.headers[QuickPulseConfig.subscribed] === \"true\";\r\n            this._consecutiveErrors = 0;\r\n            done(shouldPOSTData, res);\r\n        });\r\n        req.on(\"error\", (error: Error) => {\r\n            // Unable to contact qps endpoint.\r\n            // Do nothing for now.\r\n            this._consecutiveErrors++;\r\n\r\n            // LOG every error, but WARN instead when X number of consecutive errors occur\r\n            let notice = `Transient error connecting to the Live Metrics endpoint. This packet will not appear in your Live Metrics Stream. Error:`;\r\n            if (this._consecutiveErrors % QuickPulseSender.MAX_QPS_FAILURES_BEFORE_WARN === 0) {\r\n                notice = `Live Metrics endpoint could not be reached ${this._consecutiveErrors} consecutive times. Most recent error:`;\r\n                Logging.warn(QuickPulseSender.TAG, notice, error);\r\n            } else {\r\n                // Potentially transient error, do not change the ping/post state yet.\r\n                Logging.info(QuickPulseSender.TAG, notice, error);\r\n            }\r\n\r\n            done();\r\n        });\r\n\r\n        req.write(payload);\r\n        req.end();\r\n    }\r\n}\r\n\r\nexport = QuickPulseSender;\r\n"]}