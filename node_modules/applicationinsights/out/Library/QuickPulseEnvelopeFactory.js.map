{"version":3,"file":"QuickPulseEnvelopeFactory.js","sourceRoot":"","sources":["../../Library/QuickPulseEnvelopeFactory.ts"],"names":[],"mappings":"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","sourcesContent":["import os = require(\"os\");\r\nimport Contracts = require(\"../Declarations/Contracts\")\r\nimport Constants = require(\"../Declarations/Constants\");\r\nimport Util = require(\"./Util\")\r\nimport Config = require(\"./Config\");\r\nimport Context = require(\"./Context\");\r\nimport Logging = require(\"./Logging\");\r\n\r\nvar StreamId = Util.w3cTraceId(); // Create a guid\r\n\r\nclass QuickPulseEnvelopeFactory {\r\n    private static keys = new Contracts.ContextTagKeys();\r\n\r\n    public static createQuickPulseEnvelope(metrics: Contracts.MetricQuickPulse[], documents: Contracts.DocumentQuickPulse[], config: Config, context: Context): Contracts.EnvelopeQuickPulse {\r\n        const machineName = (os && typeof os.hostname === \"function\"\r\n            && os.hostname()) || \"Unknown\"; // Note: os.hostname() was added in node v0.3.3\r\n        const instance = (context.tags\r\n            && context.keys\r\n            && context.keys.cloudRoleInstance\r\n            && context.tags[context.keys.cloudRoleInstance]) || machineName;\r\n\r\n        var envelope: Contracts.EnvelopeQuickPulse = {\r\n            Documents: documents.length > 0 ? documents : null,\r\n            InstrumentationKey: config.instrumentationKey || \"\",\r\n            Metrics: metrics.length > 0 ? metrics : null,\r\n            InvariantVersion: 1, //  1 -> v1 QPS protocol\r\n            Timestamp: `\\/Date(${Date.now()})\\/`,\r\n            Version: context.tags[context.keys.internalSdkVersion],\r\n            StreamId: StreamId,\r\n            MachineName: machineName,\r\n            Instance: instance\r\n        }\r\n\r\n        return envelope;\r\n    }\r\n\r\n    public static createQuickPulseMetric(\r\n        telemetry: Contracts.MetricTelemetry\r\n    ): Contracts.MetricQuickPulse {\r\n        var data: Contracts.MetricQuickPulse;\r\n        data = {\r\n            Name: telemetry.name, // TODO: map from MetricTelemetry name to QuickPulse name\r\n            Value: telemetry.value,\r\n            Weight: telemetry.count || 1\r\n        };\r\n        return data;\r\n    }\r\n\r\n    public static telemetryEnvelopeToQuickPulseDocument(envelope: Contracts.Envelope): Contracts.DocumentQuickPulse {\r\n        switch (envelope.data.baseType) {\r\n            case Contracts.TelemetryTypeString.Event:\r\n                return QuickPulseEnvelopeFactory.createQuickPulseEventDocument(envelope);\r\n            case Contracts.TelemetryTypeString.Exception:\r\n                return QuickPulseEnvelopeFactory.createQuickPulseExceptionDocument(envelope);\r\n            case Contracts.TelemetryTypeString.Trace:\r\n                return QuickPulseEnvelopeFactory.createQuickPulseTraceDocument(envelope);\r\n            case Contracts.TelemetryTypeString.Dependency:\r\n                return QuickPulseEnvelopeFactory.createQuickPulseDependencyDocument(envelope);\r\n            case Contracts.TelemetryTypeString.Request:\r\n                return QuickPulseEnvelopeFactory.createQuickPulseRequestDocument(envelope);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private static createQuickPulseEventDocument(envelope: Contracts.Envelope): Contracts.EventDocumentQuickPulse {\r\n        const document = QuickPulseEnvelopeFactory.createQuickPulseDocument(envelope);\r\n        const name = ((envelope.data as any).baseData as Contracts.EventData).name;\r\n        const eventDocument: Contracts.EventDocumentQuickPulse = {\r\n            ...document,\r\n            Name: name\r\n        };\r\n\r\n        return eventDocument;\r\n    }\r\n\r\n    private static createQuickPulseTraceDocument(envelope: Contracts.Envelope): Contracts.MessageDocumentQuickPulse {\r\n        const document = QuickPulseEnvelopeFactory.createQuickPulseDocument(envelope);\r\n        const severityLevel = ((envelope.data as any).baseData as Contracts.MessageData).severityLevel || 0;\r\n        var traceDocument: Contracts.MessageDocumentQuickPulse = {\r\n            ...document,\r\n            Message: ((envelope.data as any).baseData as Contracts.MessageData).message,\r\n            SeverityLevel: Contracts.SeverityLevel[severityLevel]\r\n        }\r\n\r\n        return traceDocument;\r\n    }\r\n\r\n    private static createQuickPulseExceptionDocument(envelope: Contracts.Envelope): Contracts.ExceptionDocumentQuickPulse {\r\n        const document = QuickPulseEnvelopeFactory.createQuickPulseDocument(envelope);\r\n        const exceptionDetails = ((envelope.data as any).baseData as Contracts.ExceptionData).exceptions;\r\n\r\n        let exception = '';\r\n        let exceptionMessage = '';\r\n        let exceptionType = '';\r\n\r\n        // Try to fill exception information from first error only\r\n        if (exceptionDetails && exceptionDetails.length > 0) {\r\n            // Try to grab the stack from parsedStack or stack\r\n            if (exceptionDetails[0].parsedStack && exceptionDetails[0].parsedStack.length > 0) {\r\n                exceptionDetails[0].parsedStack.forEach(err => {\r\n                    exception += err.assembly + \"\\n\";\r\n                });\r\n            } else if (exceptionDetails[0].stack && exceptionDetails[0].stack.length > 0) {\r\n                exception = exceptionDetails[0].stack;\r\n            }\r\n\r\n            exceptionMessage = exceptionDetails[0].message;\r\n            exceptionType = exceptionDetails[0].typeName;\r\n        }\r\n\r\n        var exceptionDocument = {\r\n            ...document,\r\n            Exception: exception,\r\n            ExceptionMessage: exceptionMessage,\r\n            ExceptionType: exceptionType\r\n        };\r\n        return exceptionDocument;\r\n    }\r\n\r\n    private static createQuickPulseRequestDocument(envelope: Contracts.Envelope): Contracts.RequestDocumentQuickPulse {\r\n        const document = QuickPulseEnvelopeFactory.createQuickPulseDocument(envelope);\r\n        const baseData = (envelope.data as Contracts.Data<Contracts.RequestData>).baseData;\r\n        const requestDocument: Contracts.RequestDocumentQuickPulse = {\r\n            ...document,\r\n            Name: baseData.name,\r\n            Success: baseData.success,\r\n            Duration: baseData.duration,\r\n            ResponseCode: baseData.responseCode,\r\n            OperationName: baseData.name // TODO: is this correct?\r\n        };\r\n\r\n        return requestDocument;\r\n    }\r\n\r\n    private static createQuickPulseDependencyDocument(envelope: Contracts.Envelope): Contracts.DependencyDocumentQuickPulse {\r\n        const document = QuickPulseEnvelopeFactory.createQuickPulseDocument(envelope);\r\n        const baseData = (envelope.data as Contracts.Data<Contracts.RemoteDependencyData>).baseData;\r\n\r\n        const dependencyDocument: Contracts.DependencyDocumentQuickPulse = {\r\n            ...document,\r\n            Name: baseData.name,\r\n            Target: baseData.target,\r\n            Success: baseData.success,\r\n            Duration: baseData.duration,\r\n            ResultCode: baseData.resultCode,\r\n            CommandName: baseData.data,\r\n            OperationName: document.OperationId,\r\n            DependencyTypeName: baseData.type,\r\n        }\r\n        return dependencyDocument;\r\n    }\r\n\r\n    private static createQuickPulseDocument(envelope: Contracts.Envelope): Contracts.DocumentQuickPulse {\r\n        let documentType: Constants.QuickPulseDocumentType;\r\n        let __type: Constants.QuickPulseType;\r\n        let operationId, properties;\r\n\r\n\r\n        if (envelope.data.baseType) {\r\n            __type = Constants.TelemetryTypeStringToQuickPulseType[envelope.data.baseType as Contracts.TelemetryTypeValues];\r\n            documentType = Constants.TelemetryTypeStringToQuickPulseDocumentType[envelope.data.baseType as Contracts.TelemetryTypeValues];\r\n        } else {\r\n            // Remark: This should never be hit because createQuickPulseDocument is only called within\r\n            // valid baseType values\r\n            Logging.warn(\"Document type invalid; not sending live metric document\", envelope.data.baseType);\r\n        }\r\n\r\n        operationId = envelope.tags[QuickPulseEnvelopeFactory.keys.operationId];\r\n        properties = QuickPulseEnvelopeFactory.aggregateProperties(envelope);\r\n\r\n        var document: Contracts.DocumentQuickPulse = {\r\n            DocumentType: documentType,\r\n            __type: __type,\r\n            OperationId: operationId,\r\n            Version: \"1.0\",\r\n            Properties: properties\r\n        };\r\n\r\n        return document;\r\n    }\r\n\r\n    private static aggregateProperties(envelope: Contracts.Envelope): Contracts.IDocumentProperty[] {\r\n        const properties: Contracts.IDocumentProperty[] = [];\r\n\r\n        // Collect measurements\r\n        const meas = ((envelope.data as any).baseData).measurements || {};\r\n        for (let key in meas) {\r\n            if (meas.hasOwnProperty(key)) {\r\n                const value = meas[key];\r\n                const property: Contracts.IDocumentProperty = {key, value};\r\n                properties.push(property);\r\n            }\r\n        }\r\n\r\n        // Collect properties\r\n        const props = ((envelope.data as any).baseData).properties || {};\r\n        for (let key in props) {\r\n            if (props.hasOwnProperty(key)) {\r\n                const value = props[key];\r\n                const property: Contracts.IDocumentProperty = {key, value};\r\n                properties.push(property);\r\n            }\r\n        }\r\n\r\n        return properties;\r\n    }\r\n}\r\n\r\nexport = QuickPulseEnvelopeFactory;\r\n"]}