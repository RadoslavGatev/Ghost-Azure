"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var fs = require('fs');

var _require = require('path'),
    join = _require.join;

var combineErrors = require('combine-errors');

var cron = require('cron-validate');

var isSANB = require('is-string-and-not-blank');

var isValidPath = require('is-valid-path');

var threads = require('bthreads');

var _require2 = require('./job-utils'),
    getName = _require2.getName,
    isSchedule = _require2.isSchedule,
    parseValue = _require2.parseValue;

var validateReservedJobName = function validateReservedJobName(name) {
  // Don't allow a job to have the `index` file name
  if (['index', 'index.js', 'index.mjs'].includes(name)) {
    return new Error('You cannot use the reserved job name of "index", "index.js", nor "index.mjs"');
  }
};

var validateStringJob = function validateStringJob(job, i, config) {
  var errors = [];
  var jobNameError = validateReservedJobName(job);

  if (jobNameError) {
    throw jobNameError;
  }

  if (!config.root) {
    errors.push(new Error("Job #".concat(i + 1, " \"").concat(job, "\" requires root directory option to auto-populate path")));
    throw combineErrors(errors);
  }

  var path = join(config.root, config.acceptedExtensions.some(function (ext) {
    return job.endsWith(ext);
  }) ? job : "".concat(job, ".").concat(config.defaultExtension));
  /* istanbul ignore next */

  if (!threads.browser) {
    var stats = fs.statSync(path);

    if (!stats.isFile()) {
      throw new Error("Job #".concat(i + 1, " \"").concat(job, "\" path missing: ").concat(path));
    }
  }
};

var validateFunctionJob = function validateFunctionJob(job, i) {
  var errors = [];
  var path = "(".concat(job.toString(), ")()"); // Can't be a built-in or bound function

  if (path.includes('[native code]')) {
    errors.push(new Error("Job #".concat(i + 1, " can't be a bound or built-in function")));
  }

  if (errors.length > 0) {
    throw combineErrors(errors);
  }
};

var validateJobPath = function validateJobPath(job, prefix, config) {
  var errors = [];

  if (typeof job.path === 'function') {
    var path = "(".concat(job.path.toString(), ")()"); // Can't be a built-in or bound function

    if (path.includes('[native code]')) {
      errors.push(new Error("".concat(prefix, " can't be a bound or built-in function")));
    }
  } else if (!isSANB(job.path) && !config.root) {
    errors.push(new Error("".concat(prefix, " requires root directory option to auto-populate path")));
  } else {
    // Validate path
    var _path = isSANB(job.path) ? job.path : join(config.root, config.acceptedExtensions.some(function (ext) {
      return job.name.endsWith(ext);
    }) ? job.name : "".concat(job.name, ".").concat(config.defaultExtension));

    if (isValidPath(_path)) {
      try {
        /* istanbul ignore next */
        if (!threads.browser) {
          var stats = fs.statSync(_path); // eslint-disable-next-line max-depth

          if (!stats.isFile()) {
            throw new Error("".concat(prefix, " path missing: ").concat(_path));
          }
        }
      } catch (err) {
        /* istanbul ignore next */
        errors.push(err);
      }
    }
  }

  return errors;
};

var cronValidateWithSeconds = function cronValidateWithSeconds(job, config) {
  var preset = job.cronValidate && job.cronValidate.preset ? job.cronValidate.preset : config.cronValidate && config.cronValidate.preset ? config.cronValidate.preset : 'default';

  var override = _objectSpread(_objectSpread(_objectSpread({}, config.cronValidate && config.cronValidate.override ? config.cronValidate.override : {}), job.cronValidate && job.cronValidate.override ? job.cronValidate.override : {}), {}, {
    useSeconds: true
  });

  return _objectSpread(_objectSpread(_objectSpread({}, config.cronValidate), job.cronValidate), {}, {
    preset: preset,
    override: override
  });
};

var validateCron = function validateCron(job, prefix, config) {
  var errors = [];

  if (!isSchedule(job.cron)) {
    // If `hasSeconds` was `true` then set `cronValidate` and inherit any existing options
    var cronValidate = job.hasSeconds ? cronValidateWithSeconds(job, config) : config.cronValidate; //
    // validate cron pattern
    // (must support patterns such as `* * L * *` and `0 0/5 14 * * ?` (and aliases too)
    //
    //  <https://github.com/Airfooox/cron-validate/issues/67>
    //

    var result = cron(job.cron, cronValidate);

    if (!result.isValid()) {
      // NOTE: it is always valid
      // const schedule = later.schedule(
      //   later.parse.cron(
      //     job.cron,
      //     boolean(
      //       typeof job.hasSeconds === 'undefined'
      //         ? config.hasSeconds
      //         : job.hasSeconds
      //     )
      //   )
      // );
      // if (schedule.isValid()) {
      //   job.interval = schedule;
      // } // else {
      //   errors.push(
      //     new Error(
      //       `${prefix} had an invalid cron schedule (see <https://crontab.guru> if you need help)`
      //     )
      //   );
      // }
      var _iterator = _createForOfIteratorHelper(result.getError()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var message = _step.value;
          errors.push(new Error("".concat(prefix, " had an invalid cron pattern: ").concat(message)));
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }

  return errors;
};

var validateJobName = function validateJobName(job, i, reservedNames) {
  var errors = [];
  var name = getName(job);

  if (!name) {
    errors.push(new Error("Job #".concat(i + 1, " is missing a name")));
  } // Throw an error if duplicate job names


  if (reservedNames.includes(name)) {
    errors.push(new Error("Job #".concat(i + 1, " has a duplicate job name of ").concat(getName(job))));
  }

  return errors;
}; // eslint-disable-next-line complexity


var validate = function validate(job, i, names, config) {
  var errors = validateJobName(job, i, names);

  if (errors.length > 0) {
    throw combineErrors(errors);
  } // Support a simple string which we will transform to have a path


  if (isSANB(job)) {
    return validateStringJob(job, i, config);
  } // Job is a function


  if (typeof job === 'function') {
    return validateFunctionJob(job, i);
  } // Use a prefix for errors


  var prefix = "Job #".concat(i + 1, " named \"").concat(job.name, "\"");
  errors.push.apply(errors, (0, _toConsumableArray2.default)(validateJobPath(job, prefix, config))); // Don't allow users to mix interval AND cron

  if (typeof job.interval !== 'undefined' && typeof job.cron !== 'undefined') {
    errors.push(new Error("".concat(prefix, " cannot have both interval and cron configuration")));
  } // Don't allow users to mix timeout AND date


  if (typeof job.timeout !== 'undefined' && typeof job.date !== 'undefined') {
    errors.push(new Error("".concat(prefix, " cannot have both timeout and date")));
  }

  var jobNameError = validateReservedJobName(job.name);

  if (jobNameError) {
    errors.push(jobNameError);
  } // Validate date


  if (typeof job.date !== 'undefined' && !(job.date instanceof Date)) {
    errors.push(new Error("".concat(prefix, " had an invalid Date of ").concat(job.date)));
  }

  ['timeout', 'interval'].forEach(function (prop) {
    if (typeof job[prop] !== 'undefined') {
      try {
        parseValue(job[prop]);
      } catch (err) {
        errors.push(combineErrors([new Error("".concat(prefix, " had an invalid ").concat(prop, " of ").concat(job.timeout)), err]));
      }
    }
  }); // Validate hasSeconds

  if (typeof job.hasSeconds !== 'undefined' && typeof job.hasSeconds !== 'boolean') {
    errors.push(new Error("".concat(prefix, " had hasSeconds value of ").concat(job.hasSeconds, " (it must be a Boolean)")));
  } // Validate cronValidate


  if (typeof job.cronValidate !== 'undefined' && (0, _typeof2.default)(job.cronValidate) !== 'object') {
    errors.push(new Error("".concat(prefix, " had cronValidate value set, but it must be an Object")));
  }

  if (typeof job.cron !== 'undefined') {
    errors.push.apply(errors, (0, _toConsumableArray2.default)(validateCron(job, prefix, config)));
  } // Validate closeWorkerAfterMs


  if (typeof job.closeWorkerAfterMs !== 'undefined' && (!Number.isFinite(job.closeWorkerAfterMs) || job.closeWorkerAfterMs <= 0)) {
    errors.push(new Error("".concat(prefix, " had an invalid closeWorkersAfterMs value of ").concat(job.closeWorkersAfterMs, " (it must be a finite number > 0)")));
  }

  if (isSANB(job.timezone) && !['local', 'system'].includes(job.timezone)) {
    try {
      // `.toLocaleString()` will throw a `RangeError` if `timeZone` string
      // is bogus or not supported by the environment.
      new Date().toLocaleString('ia', {
        timeZone: job.timezone
      });
    } catch (_unused) {
      errors.push(new Error("".concat(prefix, " had an invalid or unsupported timezone specified: ").concat(job.timezone)));
    }
  }

  if (errors.length > 0) {
    throw combineErrors(errors);
  }
};

module.exports = validate;
module.exports.cronValidateWithSeconds = cronValidateWithSeconds;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,