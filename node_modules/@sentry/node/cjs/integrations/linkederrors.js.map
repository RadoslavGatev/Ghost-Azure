{"version":3,"file":"linkederrors.js","sources":["../../../src/integrations/linkederrors.ts"],"sourcesContent":["import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Exception, ExtendedError, Integration, StackParser } from '@sentry/types';\nimport { isInstanceOf, resolvedSyncPromise, SyncPromise } from '@sentry/utils';\n\nimport { NodeClient } from '../client';\nimport { exceptionFromError } from '../eventbuilder';\nimport { ContextLines } from './contextlines';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = LinkedErrors.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _key: string;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _limit: number;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { key?: string; limit?: number } = {}) {\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor(async (event: Event, hint: EventHint) => {\n      const hub = getCurrentHub();\n      const self = hub.getIntegration(LinkedErrors);\n      const client = hub.getClient<NodeClient>();\n      if (client && self && self._handler && typeof self._handler === 'function') {\n        await self._handler(client.getOptions().stackParser, event, hint);\n      }\n      return event;\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private _handler(stackParser: StackParser, event: Event, hint: EventHint): PromiseLike<Event> {\n    if (!event.exception || !event.exception.values || !isInstanceOf(hint.originalException, Error)) {\n      return resolvedSyncPromise(event);\n    }\n\n    return new SyncPromise<Event>(resolve => {\n      void this._walkErrorTree(stackParser, hint.originalException as Error, this._key)\n        .then((linkedErrors: Exception[]) => {\n          if (event && event.exception && event.exception.values) {\n            event.exception.values = [...linkedErrors, ...event.exception.values];\n          }\n          resolve(event);\n        })\n        .then(null, () => {\n          resolve(event);\n        });\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private async _walkErrorTree(\n    stackParser: StackParser,\n    error: ExtendedError,\n    key: string,\n    stack: Exception[] = [],\n  ): Promise<Exception[]> {\n    if (!isInstanceOf(error[key], Error) || stack.length + 1 >= this._limit) {\n      return Promise.resolve(stack);\n    }\n\n    const exception = exceptionFromError(stackParser, error[key]);\n\n    // If the ContextLines integration is enabled, we add source code context to linked errors\n    // because we can't guarantee the order that integrations are run.\n    const contextLines = getCurrentHub().getIntegration(ContextLines);\n    if (contextLines && exception.stacktrace?.frames) {\n      await contextLines.addSourceContextToFrames(exception.stacktrace.frames);\n    }\n\n    return new Promise<Exception[]>((resolve, reject) => {\n      void this._walkErrorTree(stackParser, error[key], key, [exception, ...stack])\n        .then(resolve)\n        .then(null, () => {\n          reject();\n        });\n    });\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAQA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiGA;;"}