{"version":3,"file":"normalize.js","sourceRoot":"","sources":["../src/normalize.ts"],"names":[],"mappings":"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","sourcesContent":["import { isPrimitive, isSyntheticEvent } from './is';\nimport { memoBuilder, MemoFunc } from './memo';\nimport { getWalkSource } from './object';\nimport { getFunctionName } from './stacktrace';\n\ntype UnknownMaybeWithToJson = unknown & { toJSON?: () => string };\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normallized output..\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */\nexport function normalize(input: unknown, depth: number = +Infinity, maxProperties: number = +Infinity): any {\n  try {\n    // since we're at the outermost level, there is no key\n    return walk('', input as UnknownMaybeWithToJson, depth, maxProperties);\n  } catch (_oO) {\n    return '**non-serializable**';\n  }\n}\n\n/** JSDoc */\nexport function normalizeToSize<T>(\n  object: { [key: string]: any },\n  // Default Node.js REPL depth\n  depth: number = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize: number = 100 * 1024,\n): T {\n  const serialized = normalize(object, depth);\n\n  if (jsonSize(serialized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return serialized as T;\n}\n\n/**\n * Walks an object to perform a normalization on it\n *\n * @param key of object that's walked in current iteration\n * @param value object to be walked\n * @param depth Optional number indicating how deep should walking be performed\n * @param maxProperties Optional maximum  number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */\nexport function walk(\n  key: string,\n  value: UnknownMaybeWithToJson,\n  depth: number = +Infinity,\n  maxProperties: number = +Infinity,\n  memo: MemoFunc = memoBuilder(),\n): unknown {\n  const [memoize, unmemoize] = memo;\n\n  // If we reach the maximum depth, serialize whatever is left\n  if (depth === 0) {\n    return serializeValue(value);\n  }\n\n  // If value implements `toJSON` method, call it and return early\n  if (value !== null && value !== undefined && typeof value.toJSON === 'function') {\n    return value.toJSON();\n  }\n\n  // `makeSerializable` provides a string representation of certain non-serializable values. For all others, it's a\n  // pass-through. If what comes back is a primitive (either because it's been stringified or because it was primitive\n  // all along), we're done.\n  const serializable = makeSerializable(value, key);\n  if (isPrimitive(serializable)) {\n    return serializable;\n  }\n\n  // Create source that we will use for the next iteration. It will either be an objectified error object (`Error` type\n  // with extracted key:value pairs) or the input itself.\n  const source = getWalkSource(value);\n\n  // Create an accumulator that will act as a parent for all future itterations of that branch\n  const acc: { [key: string]: any } = Array.isArray(value) ? [] : {};\n\n  // If we already walked that branch, bail out, as it's circular reference\n  if (memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  let propertyCount = 0;\n  // Walk all keys of the source\n  for (const innerKey in source) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(source, innerKey)) {\n      continue;\n    }\n\n    if (propertyCount >= maxProperties) {\n      acc[innerKey] = '[MaxProperties ~]';\n      break;\n    }\n\n    propertyCount += 1;\n\n    // Recursively walk through all the child nodes\n    const innerValue: UnknownMaybeWithToJson = source[innerKey];\n    acc[innerKey] = walk(innerKey, innerValue, depth - 1, maxProperties, memo);\n  }\n\n  // Once walked through all the branches, remove the parent from memo storage\n  unmemoize(value);\n\n  // Return accumulated values\n  return acc;\n}\n\n/**\n * Transform any non-primitive, BigInt, or Symbol-type value into a string. Acts as a no-op on strings, numbers,\n * booleans, null, and undefined.\n *\n * @param value The value to stringify\n * @returns For non-primitive, BigInt, and Symbol-type values, a string denoting the value's type, type and value, or\n *  type and `description` property, respectively. For non-BigInt, non-Symbol primitives, returns the original value,\n *  unchanged.\n */\nfunction serializeValue(value: any): any {\n  // Node.js REPL notation\n  if (typeof value === 'string') {\n    return value;\n  }\n\n  const type = Object.prototype.toString.call(value);\n  if (type === '[object Object]') {\n    return '[Object]';\n  }\n  if (type === '[object Array]') {\n    return '[Array]';\n  }\n\n  // `makeSerializable` provides a string representation of certain non-serializable values. For all others, it's a\n  // pass-through.\n  const serializable = makeSerializable(value);\n  return isPrimitive(serializable) ? serializable : type;\n}\n\n/**\n * makeSerializable()\n *\n * Takes unserializable input and make it serializer-friendly.\n *\n * Handles globals, functions, `undefined`, `NaN`, and other non-serializable values.\n */\nfunction makeSerializable<T>(value: T, key?: any): T | string {\n  if (key === 'domain' && value && typeof value === 'object' && (value as unknown as { _events: any })._events) {\n    return '[Domain]';\n  }\n\n  if (key === 'domainEmitter') {\n    return '[DomainEmitter]';\n  }\n\n  if (typeof (global as any) !== 'undefined' && (value as unknown) === global) {\n    return '[Global]';\n  }\n\n  // It's safe to use `window` and `document` here in this manner, as we are asserting using `typeof` first\n  // which won't throw if they are not present.\n\n  // eslint-disable-next-line no-restricted-globals\n  if (typeof (window as any) !== 'undefined' && (value as unknown) === window) {\n    return '[Window]';\n  }\n\n  // eslint-disable-next-line no-restricted-globals\n  if (typeof (document as any) !== 'undefined' && (value as unknown) === document) {\n    return '[Document]';\n  }\n\n  // React's SyntheticEvent thingy\n  if (isSyntheticEvent(value)) {\n    return '[SyntheticEvent]';\n  }\n\n  if (typeof value === 'number' && value !== value) {\n    return '[NaN]';\n  }\n\n  if (value === void 0) {\n    return '[undefined]';\n  }\n\n  if (typeof value === 'function') {\n    return `[Function: ${getFunctionName(value)}]`;\n  }\n\n  // symbols and bigints are considered primitives by TS, but aren't natively JSON-serilaizable\n\n  if (typeof value === 'symbol') {\n    return `[${String(value)}]`;\n  }\n\n  if (typeof value === 'bigint') {\n    return `[BigInt: ${String(value)}]`;\n  }\n\n  return value;\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value: string): number {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\nfunction jsonSize(value: any): number {\n  return utf8Length(JSON.stringify(value));\n}\n"]}