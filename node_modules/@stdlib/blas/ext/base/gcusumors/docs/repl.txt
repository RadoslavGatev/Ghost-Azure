
{{alias}}( N, sum, x, strideX, y, strideY )
    Computes the cumulative sum of strided array elements using ordinary
    recursive summation.

    The `N` and `stride` parameters determine which elements in `x` and `y` are
    accessed at runtime.

    Indexing is relative to the first index. To introduce an offset, use a typed
    array view.

    If `N <= 0`, the function returns `y` unchanged.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    sum: number
        Initial sum.

    x: Array<number>|TypedArray
        Input array.

    strideX: integer
        Index increment for `x`.

    y: Array<number>|TypedArray
        Output array.

    strideY: integer
        Index increment for `y`.

    Returns
    -------
    out: Array<number>|TypedArray
        Output array.

    Examples
    --------
    // Standard Usage:
    > var x = [ 1.0, -2.0, 2.0 ];
    > var y = [ 0.0, 0.0, 0.0 ];
    > {{alias}}( x.length, 0.0, x, 1, y, 1 )
    [ 1.0, -1.0, 1.0 ]

    // Using `N` and `stride` parameters:
    > x = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];
    > y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];
    > var N = {{alias:@stdlib/math/base/special/floor}}( x.length / 2 );
    > {{alias}}( N, 0.0, x, 2, y, 2 )
    [ -2.0, 0.0, -1.0, 0.0, 1.0, 0.0 ]

    // Using view offsets:
    > var x0 = new {{alias:@stdlib/array/float64}}( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );
    > var y0 = new {{alias:@stdlib/array/float64}}( x0.length );
    > var x1 = new {{alias:@stdlib/array/float64}}( x0.buffer, x0.BYTES_PER_ELEMENT*1 );
    > var y1 = new {{alias:@stdlib/array/float64}}( y0.buffer, y0.BYTES_PER_ELEMENT*3 );
    > N = {{alias:@stdlib/math/base/special/floor}}( x0.length / 2 );
    > {{alias}}( N, 0.0, x1, 2, y1, 1 )
    <Float64Array>[ -2.0, 0.0, -1.0 ]
    > y0
    <Float64Array>[ 0.0, 0.0, 0.0, -2.0, 0.0, -1.0 ]

{{alias}}.ndarray( N, sum, x, strideX, offsetX, y, strideY, offsetY )
    Computes the cumulative sum of strided array elements using ordinary
    recursive summation and alternative indexing semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the `offset` parameter supports indexing semantics based on a
    starting index.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    sum: number
        Initial sum.

    x: Array<number>|TypedArray
        Input array.

    strideX: integer
        Index increment for `x`.

    offsetX: integer
        Starting index for `x`.

    y: Array<number>|TypedArray
        Output array.

    strideY: integer
        Index increment for `y`.

    offsetY: integer
        Starting index for `y`.

    Returns
    -------
    out: Array<number>|TypedArray
        Output array.

    Examples
    --------
    // Standard Usage:
    > var x = [ 1.0, -2.0, 2.0 ];
    > var y = [ 0.0, 0.0, 0.0 ];
    > {{alias}}.ndarray( x.length, 0.0, x, 1, 0, y, 1, 0 )
    <Float64Array>[ 1.0, -1.0, 1.0 ]

    // Advanced indexing:
    > x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];
    > y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];
    > var N = {{alias:@stdlib/math/base/special/floor}}( x.length / 2 );
    > {{alias}}.ndarray( N, 0.0, x, 2, 1, y, -1, y.length-1 )
    <Float64Array>[ 0.0, 0.0, 0.0, -1.0, 0.0, -2.0 ]

    See Also
    --------

