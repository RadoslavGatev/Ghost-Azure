
{{alias}}( N, x, strideX, y, strideY )
    Computes the principal square root of each element in a strided array `x`
    and assigns the results to elements in a strided array `y`.

    The `N` and `stride` parameters determine which elements in `x` and `y` are
    accessed at runtime.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    x: ArrayLikeObject
        Input array.

    strideX: integer
        Index increment for `x`.

    y: ArrayLikeObject
        Destination array.

    strideY: integer
        Index increment for `y`.

    Returns
    -------
    y: ArrayLikeObject
        Input array `y`.

    Examples
    --------
    // Standard usage:
    > var x = new {{alias:@stdlib/array/float64}}( [ 0.0, 4.0, 9.0, 12.0 ] );
    > var y = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > {{alias}}( x.length, x, 1, y, 1 )
    <Float64Array>[ 0.0, 2.0, 3.0, ~3.464 ]

    // Using `N` and `stride` parameters:
    > var N = {{alias:@stdlib/math/base/special/floor}}( x.length / 2 );
    > y = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > {{alias}}( N, x, 2, y, -1 )
    <Float64Array>[ 3.0, 0.0, 0.0, 0.0 ]

    // Using view offsets:
    > var x0 = new {{alias:@stdlib/array/float64}}( [ 0.0, 4.0, 9.0, 12.0 ] );
    > var y0 = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > var x1 = new {{alias:@stdlib/array/float64}}( x0.buffer, x0.BYTES_PER_ELEMENT*1 );
    > var y1 = new {{alias:@stdlib/array/float64}}( y0.buffer, y0.BYTES_PER_ELEMENT*2 );
    > N = {{alias:@stdlib/math/base/special/floor}}( x0.length / 2 );
    > {{alias}}( N, x1, -2, y1, 1 )
    <Float64Array>[ ~3.464, 2.0 ]
    > y0
    <Float64Array>[ 0.0, 0.0, ~3.464, 2.0 ]


{{alias}}.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )
    Computes the principal square root of each element in a strided array `x`
    and assigns the results to elements in a strided array `y` using alternative
    indexing semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the `offsetX` and `offsetY` parameters support indexing semantics
    based on starting indices.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    x: ArrayLikeObject
        Input array.

    strideX: integer
        Index increment for `x`.

    offsetX: integer
        Starting index for `x`.

    y: ArrayLikeObject
        Destination array.

    strideY: integer
        Index increment for `y`.

    offsetY: integer
        Starting index for `y`.

    Returns
    -------
    y: ArrayLikeObject
        Input array `y`.

    Examples
    --------
    // Standard usage:
    > var x = new {{alias:@stdlib/array/float64}}( [ 0.0, 4.0, 9.0, 12.0 ] );
    > var y = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > {{alias}}.ndarray( x.length, x, 1, 0, y, 1, 0 )
    <Float64Array>[ 0.0, 2.0, 3.0, ~3.464 ]

    // Advanced indexing:
    > x = new {{alias:@stdlib/array/float64}}( [ 0.0, 4.0, 9.0, 12.0 ] );
    > y = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > var N = {{alias:@stdlib/math/base/special/floor}}( x.length / 2 );
    > {{alias}}.ndarray( N, x, 2, 1, y, -1, y.length-1 )
    <Float64Array>[ 0.0, 0.0, ~3.464, 2.0 ]

    See Also
    --------

