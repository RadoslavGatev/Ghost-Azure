
{{alias}}( N, x, strideX, mask, strideMask )
    Computes the minimum value of a strided array according to a mask.

    The `N` and `stride` parameters determine which elements are accessed at
    runtime.

    Indexing is relative to the first index. To introduce offsets, use a typed
    array views.

    If a `mask` array element is `0`, the corresponding element in `x` is
    considered valid and included in computation.

    If a `mask` array element is `1`, the corresponding element in `x` is
    considered invalid/missing and excluded from computation.

    If `N <= 0`, the function returns `NaN`.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    x: Array<number>|TypedArray
        Input array.

    strideX: integer
        Index increment for `x`.

    mask: Array<number>|TypedArray
        Mask array.

    strideMask: integer
        Index increment for `mask`.

    Returns
    -------
    out: number
        Minimum value.

    Examples
    --------
    // Standard Usage:
    > var x = [ 1.0, -2.0, -4.0, 2.0 ];
    > var mask = [ 0, 0, 1, 0 ];
    > {{alias}}( x.length, x, 1, mask, 1 )
    -2.0

    // Using `N` and `stride` parameters:
    > x = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, -4.0 ];
    > mask = [ 0, 0, 0, 0, 0, 0, 1 ];
    > var N = {{alias:@stdlib/math/base/special/floor}}( x.length / 2 );
    > {{alias}}( N, x, 2, mask, 2 )
    -2.0

    // Using view offsets:
    > var x0 = new {{alias:@stdlib/array/float64}}( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, -4.0 ] );
    > var x1 = new {{alias:@stdlib/array/float64}}( x0.buffer, x0.BYTES_PER_ELEMENT*1 );
    > var mask0 = new {{alias:@stdlib/array/uint8}}( [ 0, 0, 0, 0, 0, 0, 1 ] );
    > var mask1 = new {{alias:@stdlib/array/uint8}}( mask0.buffer, mask0.BYTES_PER_ELEMENT*1 );
    > N = {{alias:@stdlib/math/base/special/floor}}( x0.length / 2 );
    > {{alias}}( N, x1, 2, mask1, 2 )
    -2.0

{{alias}}.ndarray( N, x, strideX, offsetX, mask, strideMask, offsetMask )
    Computes the minimum value of a strided array according to a mask and using
    alternative indexing semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the `offset` parameter supports indexing semantics based on a
    starting index.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    x: Array<number>|TypedArray
        Input array.

    strideX: integer
        Index increment for `x`.

    offsetX: integer
        Starting index for `x`.

    mask: Array<number>|TypedArray
        Mask array.

    strideMask: integer
        Index increment for `mask`.

    offsetMask: integer
        Starting index for `mask`.

    Returns
    -------
    out: number
        Minimum value.

    Examples
    --------
    // Standard Usage:
    > var x = [ 1.0, -2.0, 2.0, -4.0 ];
    > var mask = [ 0, 0, 0, 1 ];
    > {{alias}}.ndarray( x.length, x, 1, 0, mask, 1, 0 )
    -2.0

    // Using offset parameter:
    > x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, -4.0 ];
    > mask = [ 0, 0, 0, 0, 0, 0, 1 ];
    > var N = {{alias:@stdlib/math/base/special/floor}}( x.length / 2 );
    > {{alias}}.ndarray( N, x, 2, 1, mask, 2, 1 )
    -2.0

    See Also
    --------

