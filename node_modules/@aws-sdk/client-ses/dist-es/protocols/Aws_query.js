import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectString as __expectString, extendedEncodeURIComponent as __extendedEncodeURIComponent, getArrayIfSingleItem as __getArrayIfSingleItem, getValueFromTextNode as __getValueFromTextNode, parseBoolean as __parseBoolean, parseRfc3339DateTime as __parseRfc3339DateTime, strictParseFloat as __strictParseFloat, strictParseLong as __strictParseLong, throwDefaultError, } from "@aws-sdk/smithy-client";
import { XMLParser } from "fast-xml-parser";
import { AccountSendingPausedException, AlreadyExistsException, CannotDeleteException, ConfigurationSetAlreadyExistsException, ConfigurationSetDoesNotExistException, ConfigurationSetSendingPausedException, CustomVerificationEmailInvalidContentException, CustomVerificationEmailTemplateAlreadyExistsException, CustomVerificationEmailTemplateDoesNotExistException, EventDestinationAlreadyExistsException, EventDestinationDoesNotExistException, FromEmailAddressNotVerifiedException, InvalidCloudWatchDestinationException, InvalidConfigurationSetException, InvalidDeliveryOptionsException, InvalidFirehoseDestinationException, InvalidLambdaFunctionException, InvalidPolicyException, InvalidRenderingParameterException, InvalidS3ConfigurationException, InvalidSNSDestinationException, InvalidSnsTopicException, InvalidTemplateException, InvalidTrackingOptionsException, LimitExceededException, MailFromDomainNotVerifiedException, MessageRejected, MissingRenderingAttributeException, ProductionAccessNotGrantedException, RuleDoesNotExistException, RuleSetDoesNotExistException, TemplateDoesNotExistException, TrackingOptionsAlreadyExistsException, TrackingOptionsDoesNotExistException, } from "../models/models_0";
import { SESServiceException as __BaseException } from "../models/SESServiceException";
export const serializeAws_queryCloneReceiptRuleSetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCloneReceiptRuleSetRequest(input, context),
        Action: "CloneReceiptRuleSet",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCreateConfigurationSetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateConfigurationSetRequest(input, context),
        Action: "CreateConfigurationSet",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCreateConfigurationSetEventDestinationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateConfigurationSetEventDestinationRequest(input, context),
        Action: "CreateConfigurationSetEventDestination",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCreateConfigurationSetTrackingOptionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateConfigurationSetTrackingOptionsRequest(input, context),
        Action: "CreateConfigurationSetTrackingOptions",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCreateCustomVerificationEmailTemplateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateCustomVerificationEmailTemplateRequest(input, context),
        Action: "CreateCustomVerificationEmailTemplate",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCreateReceiptFilterCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateReceiptFilterRequest(input, context),
        Action: "CreateReceiptFilter",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCreateReceiptRuleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateReceiptRuleRequest(input, context),
        Action: "CreateReceiptRule",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCreateReceiptRuleSetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateReceiptRuleSetRequest(input, context),
        Action: "CreateReceiptRuleSet",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCreateTemplateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateTemplateRequest(input, context),
        Action: "CreateTemplate",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteConfigurationSetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteConfigurationSetRequest(input, context),
        Action: "DeleteConfigurationSet",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteConfigurationSetEventDestinationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteConfigurationSetEventDestinationRequest(input, context),
        Action: "DeleteConfigurationSetEventDestination",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteConfigurationSetTrackingOptionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteConfigurationSetTrackingOptionsRequest(input, context),
        Action: "DeleteConfigurationSetTrackingOptions",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteCustomVerificationEmailTemplateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteCustomVerificationEmailTemplateRequest(input, context),
        Action: "DeleteCustomVerificationEmailTemplate",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteIdentityCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteIdentityRequest(input, context),
        Action: "DeleteIdentity",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteIdentityPolicyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteIdentityPolicyRequest(input, context),
        Action: "DeleteIdentityPolicy",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteReceiptFilterCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteReceiptFilterRequest(input, context),
        Action: "DeleteReceiptFilter",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteReceiptRuleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteReceiptRuleRequest(input, context),
        Action: "DeleteReceiptRule",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteReceiptRuleSetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteReceiptRuleSetRequest(input, context),
        Action: "DeleteReceiptRuleSet",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteTemplateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteTemplateRequest(input, context),
        Action: "DeleteTemplate",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteVerifiedEmailAddressCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteVerifiedEmailAddressRequest(input, context),
        Action: "DeleteVerifiedEmailAddress",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeActiveReceiptRuleSetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeActiveReceiptRuleSetRequest(input, context),
        Action: "DescribeActiveReceiptRuleSet",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeConfigurationSetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeConfigurationSetRequest(input, context),
        Action: "DescribeConfigurationSet",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeReceiptRuleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeReceiptRuleRequest(input, context),
        Action: "DescribeReceiptRule",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeReceiptRuleSetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeReceiptRuleSetRequest(input, context),
        Action: "DescribeReceiptRuleSet",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryGetAccountSendingEnabledCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    const body = buildFormUrlencodedString({
        Action: "GetAccountSendingEnabled",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryGetCustomVerificationEmailTemplateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryGetCustomVerificationEmailTemplateRequest(input, context),
        Action: "GetCustomVerificationEmailTemplate",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryGetIdentityDkimAttributesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryGetIdentityDkimAttributesRequest(input, context),
        Action: "GetIdentityDkimAttributes",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryGetIdentityMailFromDomainAttributesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryGetIdentityMailFromDomainAttributesRequest(input, context),
        Action: "GetIdentityMailFromDomainAttributes",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryGetIdentityNotificationAttributesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryGetIdentityNotificationAttributesRequest(input, context),
        Action: "GetIdentityNotificationAttributes",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryGetIdentityPoliciesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryGetIdentityPoliciesRequest(input, context),
        Action: "GetIdentityPolicies",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryGetIdentityVerificationAttributesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryGetIdentityVerificationAttributesRequest(input, context),
        Action: "GetIdentityVerificationAttributes",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryGetSendQuotaCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    const body = buildFormUrlencodedString({
        Action: "GetSendQuota",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryGetSendStatisticsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    const body = buildFormUrlencodedString({
        Action: "GetSendStatistics",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryGetTemplateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryGetTemplateRequest(input, context),
        Action: "GetTemplate",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryListConfigurationSetsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryListConfigurationSetsRequest(input, context),
        Action: "ListConfigurationSets",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryListCustomVerificationEmailTemplatesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryListCustomVerificationEmailTemplatesRequest(input, context),
        Action: "ListCustomVerificationEmailTemplates",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryListIdentitiesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryListIdentitiesRequest(input, context),
        Action: "ListIdentities",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryListIdentityPoliciesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryListIdentityPoliciesRequest(input, context),
        Action: "ListIdentityPolicies",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryListReceiptFiltersCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryListReceiptFiltersRequest(input, context),
        Action: "ListReceiptFilters",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryListReceiptRuleSetsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryListReceiptRuleSetsRequest(input, context),
        Action: "ListReceiptRuleSets",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryListTemplatesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryListTemplatesRequest(input, context),
        Action: "ListTemplates",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryListVerifiedEmailAddressesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    const body = buildFormUrlencodedString({
        Action: "ListVerifiedEmailAddresses",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryPutConfigurationSetDeliveryOptionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryPutConfigurationSetDeliveryOptionsRequest(input, context),
        Action: "PutConfigurationSetDeliveryOptions",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryPutIdentityPolicyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryPutIdentityPolicyRequest(input, context),
        Action: "PutIdentityPolicy",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryReorderReceiptRuleSetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryReorderReceiptRuleSetRequest(input, context),
        Action: "ReorderReceiptRuleSet",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_querySendBounceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_querySendBounceRequest(input, context),
        Action: "SendBounce",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_querySendBulkTemplatedEmailCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_querySendBulkTemplatedEmailRequest(input, context),
        Action: "SendBulkTemplatedEmail",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_querySendCustomVerificationEmailCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_querySendCustomVerificationEmailRequest(input, context),
        Action: "SendCustomVerificationEmail",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_querySendEmailCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_querySendEmailRequest(input, context),
        Action: "SendEmail",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_querySendRawEmailCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_querySendRawEmailRequest(input, context),
        Action: "SendRawEmail",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_querySendTemplatedEmailCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_querySendTemplatedEmailRequest(input, context),
        Action: "SendTemplatedEmail",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_querySetActiveReceiptRuleSetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_querySetActiveReceiptRuleSetRequest(input, context),
        Action: "SetActiveReceiptRuleSet",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_querySetIdentityDkimEnabledCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_querySetIdentityDkimEnabledRequest(input, context),
        Action: "SetIdentityDkimEnabled",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_querySetIdentityFeedbackForwardingEnabledCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_querySetIdentityFeedbackForwardingEnabledRequest(input, context),
        Action: "SetIdentityFeedbackForwardingEnabled",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_querySetIdentityHeadersInNotificationsEnabledCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_querySetIdentityHeadersInNotificationsEnabledRequest(input, context),
        Action: "SetIdentityHeadersInNotificationsEnabled",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_querySetIdentityMailFromDomainCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_querySetIdentityMailFromDomainRequest(input, context),
        Action: "SetIdentityMailFromDomain",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_querySetIdentityNotificationTopicCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_querySetIdentityNotificationTopicRequest(input, context),
        Action: "SetIdentityNotificationTopic",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_querySetReceiptRulePositionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_querySetReceiptRulePositionRequest(input, context),
        Action: "SetReceiptRulePosition",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryTestRenderTemplateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryTestRenderTemplateRequest(input, context),
        Action: "TestRenderTemplate",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryUpdateAccountSendingEnabledCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateAccountSendingEnabledRequest(input, context),
        Action: "UpdateAccountSendingEnabled",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryUpdateConfigurationSetEventDestinationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateConfigurationSetEventDestinationRequest(input, context),
        Action: "UpdateConfigurationSetEventDestination",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryUpdateConfigurationSetReputationMetricsEnabledCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateConfigurationSetReputationMetricsEnabledRequest(input, context),
        Action: "UpdateConfigurationSetReputationMetricsEnabled",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryUpdateConfigurationSetSendingEnabledCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateConfigurationSetSendingEnabledRequest(input, context),
        Action: "UpdateConfigurationSetSendingEnabled",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryUpdateConfigurationSetTrackingOptionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateConfigurationSetTrackingOptionsRequest(input, context),
        Action: "UpdateConfigurationSetTrackingOptions",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryUpdateCustomVerificationEmailTemplateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateCustomVerificationEmailTemplateRequest(input, context),
        Action: "UpdateCustomVerificationEmailTemplate",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryUpdateReceiptRuleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateReceiptRuleRequest(input, context),
        Action: "UpdateReceiptRule",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryUpdateTemplateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateTemplateRequest(input, context),
        Action: "UpdateTemplate",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryVerifyDomainDkimCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryVerifyDomainDkimRequest(input, context),
        Action: "VerifyDomainDkim",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryVerifyDomainIdentityCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryVerifyDomainIdentityRequest(input, context),
        Action: "VerifyDomainIdentity",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryVerifyEmailAddressCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryVerifyEmailAddressRequest(input, context),
        Action: "VerifyEmailAddress",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryVerifyEmailIdentityCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryVerifyEmailIdentityRequest(input, context),
        Action: "VerifyEmailIdentity",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const deserializeAws_queryCloneReceiptRuleSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCloneReceiptRuleSetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCloneReceiptRuleSetResponse(data.CloneReceiptRuleSetResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCloneReceiptRuleSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExists":
        case "com.amazonaws.ses#AlreadyExistsException":
            throw await deserializeAws_queryAlreadyExistsExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.ses#LimitExceededException":
            throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "RuleSetDoesNotExist":
        case "com.amazonaws.ses#RuleSetDoesNotExistException":
            throw await deserializeAws_queryRuleSetDoesNotExistExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCreateConfigurationSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateConfigurationSetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateConfigurationSetResponse(data.CreateConfigurationSetResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCreateConfigurationSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConfigurationSetAlreadyExists":
        case "com.amazonaws.ses#ConfigurationSetAlreadyExistsException":
            throw await deserializeAws_queryConfigurationSetAlreadyExistsExceptionResponse(parsedOutput, context);
        case "InvalidConfigurationSet":
        case "com.amazonaws.ses#InvalidConfigurationSetException":
            throw await deserializeAws_queryInvalidConfigurationSetExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.ses#LimitExceededException":
            throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCreateConfigurationSetEventDestinationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateConfigurationSetEventDestinationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateConfigurationSetEventDestinationResponse(data.CreateConfigurationSetEventDestinationResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCreateConfigurationSetEventDestinationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConfigurationSetDoesNotExist":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
            throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        case "EventDestinationAlreadyExists":
        case "com.amazonaws.ses#EventDestinationAlreadyExistsException":
            throw await deserializeAws_queryEventDestinationAlreadyExistsExceptionResponse(parsedOutput, context);
        case "InvalidCloudWatchDestination":
        case "com.amazonaws.ses#InvalidCloudWatchDestinationException":
            throw await deserializeAws_queryInvalidCloudWatchDestinationExceptionResponse(parsedOutput, context);
        case "InvalidFirehoseDestination":
        case "com.amazonaws.ses#InvalidFirehoseDestinationException":
            throw await deserializeAws_queryInvalidFirehoseDestinationExceptionResponse(parsedOutput, context);
        case "InvalidSNSDestination":
        case "com.amazonaws.ses#InvalidSNSDestinationException":
            throw await deserializeAws_queryInvalidSNSDestinationExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.ses#LimitExceededException":
            throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCreateConfigurationSetTrackingOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateConfigurationSetTrackingOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateConfigurationSetTrackingOptionsResponse(data.CreateConfigurationSetTrackingOptionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCreateConfigurationSetTrackingOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConfigurationSetDoesNotExist":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
            throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        case "InvalidTrackingOptions":
        case "com.amazonaws.ses#InvalidTrackingOptionsException":
            throw await deserializeAws_queryInvalidTrackingOptionsExceptionResponse(parsedOutput, context);
        case "TrackingOptionsAlreadyExistsException":
        case "com.amazonaws.ses#TrackingOptionsAlreadyExistsException":
            throw await deserializeAws_queryTrackingOptionsAlreadyExistsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCreateCustomVerificationEmailTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateCustomVerificationEmailTemplateCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCreateCustomVerificationEmailTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CustomVerificationEmailInvalidContent":
        case "com.amazonaws.ses#CustomVerificationEmailInvalidContentException":
            throw await deserializeAws_queryCustomVerificationEmailInvalidContentExceptionResponse(parsedOutput, context);
        case "CustomVerificationEmailTemplateAlreadyExists":
        case "com.amazonaws.ses#CustomVerificationEmailTemplateAlreadyExistsException":
            throw await deserializeAws_queryCustomVerificationEmailTemplateAlreadyExistsExceptionResponse(parsedOutput, context);
        case "FromEmailAddressNotVerified":
        case "com.amazonaws.ses#FromEmailAddressNotVerifiedException":
            throw await deserializeAws_queryFromEmailAddressNotVerifiedExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.ses#LimitExceededException":
            throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCreateReceiptFilterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateReceiptFilterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateReceiptFilterResponse(data.CreateReceiptFilterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCreateReceiptFilterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExists":
        case "com.amazonaws.ses#AlreadyExistsException":
            throw await deserializeAws_queryAlreadyExistsExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.ses#LimitExceededException":
            throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCreateReceiptRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateReceiptRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateReceiptRuleResponse(data.CreateReceiptRuleResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCreateReceiptRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExists":
        case "com.amazonaws.ses#AlreadyExistsException":
            throw await deserializeAws_queryAlreadyExistsExceptionResponse(parsedOutput, context);
        case "InvalidLambdaFunction":
        case "com.amazonaws.ses#InvalidLambdaFunctionException":
            throw await deserializeAws_queryInvalidLambdaFunctionExceptionResponse(parsedOutput, context);
        case "InvalidS3Configuration":
        case "com.amazonaws.ses#InvalidS3ConfigurationException":
            throw await deserializeAws_queryInvalidS3ConfigurationExceptionResponse(parsedOutput, context);
        case "InvalidSnsTopic":
        case "com.amazonaws.ses#InvalidSnsTopicException":
            throw await deserializeAws_queryInvalidSnsTopicExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.ses#LimitExceededException":
            throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "RuleDoesNotExist":
        case "com.amazonaws.ses#RuleDoesNotExistException":
            throw await deserializeAws_queryRuleDoesNotExistExceptionResponse(parsedOutput, context);
        case "RuleSetDoesNotExist":
        case "com.amazonaws.ses#RuleSetDoesNotExistException":
            throw await deserializeAws_queryRuleSetDoesNotExistExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCreateReceiptRuleSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateReceiptRuleSetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateReceiptRuleSetResponse(data.CreateReceiptRuleSetResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCreateReceiptRuleSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExists":
        case "com.amazonaws.ses#AlreadyExistsException":
            throw await deserializeAws_queryAlreadyExistsExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.ses#LimitExceededException":
            throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCreateTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateTemplateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateTemplateResponse(data.CreateTemplateResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCreateTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExists":
        case "com.amazonaws.ses#AlreadyExistsException":
            throw await deserializeAws_queryAlreadyExistsExceptionResponse(parsedOutput, context);
        case "InvalidTemplate":
        case "com.amazonaws.ses#InvalidTemplateException":
            throw await deserializeAws_queryInvalidTemplateExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.ses#LimitExceededException":
            throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDeleteConfigurationSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteConfigurationSetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeleteConfigurationSetResponse(data.DeleteConfigurationSetResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteConfigurationSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConfigurationSetDoesNotExist":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
            throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDeleteConfigurationSetEventDestinationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteConfigurationSetEventDestinationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeleteConfigurationSetEventDestinationResponse(data.DeleteConfigurationSetEventDestinationResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteConfigurationSetEventDestinationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConfigurationSetDoesNotExist":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
            throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        case "EventDestinationDoesNotExist":
        case "com.amazonaws.ses#EventDestinationDoesNotExistException":
            throw await deserializeAws_queryEventDestinationDoesNotExistExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDeleteConfigurationSetTrackingOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteConfigurationSetTrackingOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeleteConfigurationSetTrackingOptionsResponse(data.DeleteConfigurationSetTrackingOptionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteConfigurationSetTrackingOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConfigurationSetDoesNotExist":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
            throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        case "TrackingOptionsDoesNotExistException":
        case "com.amazonaws.ses#TrackingOptionsDoesNotExistException":
            throw await deserializeAws_queryTrackingOptionsDoesNotExistExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDeleteCustomVerificationEmailTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteCustomVerificationEmailTemplateCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteCustomVerificationEmailTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryDeleteIdentityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteIdentityCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeleteIdentityResponse(data.DeleteIdentityResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteIdentityCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryDeleteIdentityPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteIdentityPolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeleteIdentityPolicyResponse(data.DeleteIdentityPolicyResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteIdentityPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryDeleteReceiptFilterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteReceiptFilterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeleteReceiptFilterResponse(data.DeleteReceiptFilterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteReceiptFilterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryDeleteReceiptRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteReceiptRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeleteReceiptRuleResponse(data.DeleteReceiptRuleResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteReceiptRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "RuleSetDoesNotExist":
        case "com.amazonaws.ses#RuleSetDoesNotExistException":
            throw await deserializeAws_queryRuleSetDoesNotExistExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDeleteReceiptRuleSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteReceiptRuleSetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeleteReceiptRuleSetResponse(data.DeleteReceiptRuleSetResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteReceiptRuleSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CannotDelete":
        case "com.amazonaws.ses#CannotDeleteException":
            throw await deserializeAws_queryCannotDeleteExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDeleteTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteTemplateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeleteTemplateResponse(data.DeleteTemplateResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryDeleteVerifiedEmailAddressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteVerifiedEmailAddressCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteVerifiedEmailAddressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryDescribeActiveReceiptRuleSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeActiveReceiptRuleSetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeActiveReceiptRuleSetResponse(data.DescribeActiveReceiptRuleSetResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeActiveReceiptRuleSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryDescribeConfigurationSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeConfigurationSetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeConfigurationSetResponse(data.DescribeConfigurationSetResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeConfigurationSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConfigurationSetDoesNotExist":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
            throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeReceiptRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeReceiptRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeReceiptRuleResponse(data.DescribeReceiptRuleResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeReceiptRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "RuleDoesNotExist":
        case "com.amazonaws.ses#RuleDoesNotExistException":
            throw await deserializeAws_queryRuleDoesNotExistExceptionResponse(parsedOutput, context);
        case "RuleSetDoesNotExist":
        case "com.amazonaws.ses#RuleSetDoesNotExistException":
            throw await deserializeAws_queryRuleSetDoesNotExistExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeReceiptRuleSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeReceiptRuleSetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeReceiptRuleSetResponse(data.DescribeReceiptRuleSetResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeReceiptRuleSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "RuleSetDoesNotExist":
        case "com.amazonaws.ses#RuleSetDoesNotExistException":
            throw await deserializeAws_queryRuleSetDoesNotExistExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryGetAccountSendingEnabledCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryGetAccountSendingEnabledCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryGetAccountSendingEnabledResponse(data.GetAccountSendingEnabledResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryGetAccountSendingEnabledCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryGetCustomVerificationEmailTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryGetCustomVerificationEmailTemplateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryGetCustomVerificationEmailTemplateResponse(data.GetCustomVerificationEmailTemplateResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryGetCustomVerificationEmailTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CustomVerificationEmailTemplateDoesNotExist":
        case "com.amazonaws.ses#CustomVerificationEmailTemplateDoesNotExistException":
            throw await deserializeAws_queryCustomVerificationEmailTemplateDoesNotExistExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryGetIdentityDkimAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryGetIdentityDkimAttributesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryGetIdentityDkimAttributesResponse(data.GetIdentityDkimAttributesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryGetIdentityDkimAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryGetIdentityMailFromDomainAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryGetIdentityMailFromDomainAttributesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryGetIdentityMailFromDomainAttributesResponse(data.GetIdentityMailFromDomainAttributesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryGetIdentityMailFromDomainAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryGetIdentityNotificationAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryGetIdentityNotificationAttributesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryGetIdentityNotificationAttributesResponse(data.GetIdentityNotificationAttributesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryGetIdentityNotificationAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryGetIdentityPoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryGetIdentityPoliciesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryGetIdentityPoliciesResponse(data.GetIdentityPoliciesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryGetIdentityPoliciesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryGetIdentityVerificationAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryGetIdentityVerificationAttributesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryGetIdentityVerificationAttributesResponse(data.GetIdentityVerificationAttributesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryGetIdentityVerificationAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryGetSendQuotaCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryGetSendQuotaCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryGetSendQuotaResponse(data.GetSendQuotaResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryGetSendQuotaCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryGetSendStatisticsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryGetSendStatisticsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryGetSendStatisticsResponse(data.GetSendStatisticsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryGetSendStatisticsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryGetTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryGetTemplateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryGetTemplateResponse(data.GetTemplateResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryGetTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "TemplateDoesNotExist":
        case "com.amazonaws.ses#TemplateDoesNotExistException":
            throw await deserializeAws_queryTemplateDoesNotExistExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryListConfigurationSetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryListConfigurationSetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryListConfigurationSetsResponse(data.ListConfigurationSetsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryListConfigurationSetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryListCustomVerificationEmailTemplatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryListCustomVerificationEmailTemplatesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryListCustomVerificationEmailTemplatesResponse(data.ListCustomVerificationEmailTemplatesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryListCustomVerificationEmailTemplatesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryListIdentitiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryListIdentitiesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryListIdentitiesResponse(data.ListIdentitiesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryListIdentitiesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryListIdentityPoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryListIdentityPoliciesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryListIdentityPoliciesResponse(data.ListIdentityPoliciesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryListIdentityPoliciesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryListReceiptFiltersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryListReceiptFiltersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryListReceiptFiltersResponse(data.ListReceiptFiltersResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryListReceiptFiltersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryListReceiptRuleSetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryListReceiptRuleSetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryListReceiptRuleSetsResponse(data.ListReceiptRuleSetsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryListReceiptRuleSetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryListTemplatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryListTemplatesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryListTemplatesResponse(data.ListTemplatesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryListTemplatesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryListVerifiedEmailAddressesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryListVerifiedEmailAddressesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryListVerifiedEmailAddressesResponse(data.ListVerifiedEmailAddressesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryListVerifiedEmailAddressesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryPutConfigurationSetDeliveryOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryPutConfigurationSetDeliveryOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryPutConfigurationSetDeliveryOptionsResponse(data.PutConfigurationSetDeliveryOptionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryPutConfigurationSetDeliveryOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConfigurationSetDoesNotExist":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
            throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        case "InvalidDeliveryOptions":
        case "com.amazonaws.ses#InvalidDeliveryOptionsException":
            throw await deserializeAws_queryInvalidDeliveryOptionsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryPutIdentityPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryPutIdentityPolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryPutIdentityPolicyResponse(data.PutIdentityPolicyResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryPutIdentityPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidPolicy":
        case "com.amazonaws.ses#InvalidPolicyException":
            throw await deserializeAws_queryInvalidPolicyExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryReorderReceiptRuleSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryReorderReceiptRuleSetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryReorderReceiptRuleSetResponse(data.ReorderReceiptRuleSetResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryReorderReceiptRuleSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "RuleDoesNotExist":
        case "com.amazonaws.ses#RuleDoesNotExistException":
            throw await deserializeAws_queryRuleDoesNotExistExceptionResponse(parsedOutput, context);
        case "RuleSetDoesNotExist":
        case "com.amazonaws.ses#RuleSetDoesNotExistException":
            throw await deserializeAws_queryRuleSetDoesNotExistExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_querySendBounceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_querySendBounceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_querySendBounceResponse(data.SendBounceResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_querySendBounceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "MessageRejected":
        case "com.amazonaws.ses#MessageRejected":
            throw await deserializeAws_queryMessageRejectedResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_querySendBulkTemplatedEmailCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_querySendBulkTemplatedEmailCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_querySendBulkTemplatedEmailResponse(data.SendBulkTemplatedEmailResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_querySendBulkTemplatedEmailCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccountSendingPausedException":
        case "com.amazonaws.ses#AccountSendingPausedException":
            throw await deserializeAws_queryAccountSendingPausedExceptionResponse(parsedOutput, context);
        case "ConfigurationSetDoesNotExist":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
            throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        case "ConfigurationSetSendingPausedException":
        case "com.amazonaws.ses#ConfigurationSetSendingPausedException":
            throw await deserializeAws_queryConfigurationSetSendingPausedExceptionResponse(parsedOutput, context);
        case "MailFromDomainNotVerifiedException":
        case "com.amazonaws.ses#MailFromDomainNotVerifiedException":
            throw await deserializeAws_queryMailFromDomainNotVerifiedExceptionResponse(parsedOutput, context);
        case "MessageRejected":
        case "com.amazonaws.ses#MessageRejected":
            throw await deserializeAws_queryMessageRejectedResponse(parsedOutput, context);
        case "TemplateDoesNotExist":
        case "com.amazonaws.ses#TemplateDoesNotExistException":
            throw await deserializeAws_queryTemplateDoesNotExistExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_querySendCustomVerificationEmailCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_querySendCustomVerificationEmailCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_querySendCustomVerificationEmailResponse(data.SendCustomVerificationEmailResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_querySendCustomVerificationEmailCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConfigurationSetDoesNotExist":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
            throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        case "CustomVerificationEmailTemplateDoesNotExist":
        case "com.amazonaws.ses#CustomVerificationEmailTemplateDoesNotExistException":
            throw await deserializeAws_queryCustomVerificationEmailTemplateDoesNotExistExceptionResponse(parsedOutput, context);
        case "FromEmailAddressNotVerified":
        case "com.amazonaws.ses#FromEmailAddressNotVerifiedException":
            throw await deserializeAws_queryFromEmailAddressNotVerifiedExceptionResponse(parsedOutput, context);
        case "MessageRejected":
        case "com.amazonaws.ses#MessageRejected":
            throw await deserializeAws_queryMessageRejectedResponse(parsedOutput, context);
        case "ProductionAccessNotGranted":
        case "com.amazonaws.ses#ProductionAccessNotGrantedException":
            throw await deserializeAws_queryProductionAccessNotGrantedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_querySendEmailCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_querySendEmailCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_querySendEmailResponse(data.SendEmailResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_querySendEmailCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccountSendingPausedException":
        case "com.amazonaws.ses#AccountSendingPausedException":
            throw await deserializeAws_queryAccountSendingPausedExceptionResponse(parsedOutput, context);
        case "ConfigurationSetDoesNotExist":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
            throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        case "ConfigurationSetSendingPausedException":
        case "com.amazonaws.ses#ConfigurationSetSendingPausedException":
            throw await deserializeAws_queryConfigurationSetSendingPausedExceptionResponse(parsedOutput, context);
        case "MailFromDomainNotVerifiedException":
        case "com.amazonaws.ses#MailFromDomainNotVerifiedException":
            throw await deserializeAws_queryMailFromDomainNotVerifiedExceptionResponse(parsedOutput, context);
        case "MessageRejected":
        case "com.amazonaws.ses#MessageRejected":
            throw await deserializeAws_queryMessageRejectedResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_querySendRawEmailCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_querySendRawEmailCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_querySendRawEmailResponse(data.SendRawEmailResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_querySendRawEmailCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccountSendingPausedException":
        case "com.amazonaws.ses#AccountSendingPausedException":
            throw await deserializeAws_queryAccountSendingPausedExceptionResponse(parsedOutput, context);
        case "ConfigurationSetDoesNotExist":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
            throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        case "ConfigurationSetSendingPausedException":
        case "com.amazonaws.ses#ConfigurationSetSendingPausedException":
            throw await deserializeAws_queryConfigurationSetSendingPausedExceptionResponse(parsedOutput, context);
        case "MailFromDomainNotVerifiedException":
        case "com.amazonaws.ses#MailFromDomainNotVerifiedException":
            throw await deserializeAws_queryMailFromDomainNotVerifiedExceptionResponse(parsedOutput, context);
        case "MessageRejected":
        case "com.amazonaws.ses#MessageRejected":
            throw await deserializeAws_queryMessageRejectedResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_querySendTemplatedEmailCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_querySendTemplatedEmailCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_querySendTemplatedEmailResponse(data.SendTemplatedEmailResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_querySendTemplatedEmailCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccountSendingPausedException":
        case "com.amazonaws.ses#AccountSendingPausedException":
            throw await deserializeAws_queryAccountSendingPausedExceptionResponse(parsedOutput, context);
        case "ConfigurationSetDoesNotExist":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
            throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        case "ConfigurationSetSendingPausedException":
        case "com.amazonaws.ses#ConfigurationSetSendingPausedException":
            throw await deserializeAws_queryConfigurationSetSendingPausedExceptionResponse(parsedOutput, context);
        case "MailFromDomainNotVerifiedException":
        case "com.amazonaws.ses#MailFromDomainNotVerifiedException":
            throw await deserializeAws_queryMailFromDomainNotVerifiedExceptionResponse(parsedOutput, context);
        case "MessageRejected":
        case "com.amazonaws.ses#MessageRejected":
            throw await deserializeAws_queryMessageRejectedResponse(parsedOutput, context);
        case "TemplateDoesNotExist":
        case "com.amazonaws.ses#TemplateDoesNotExistException":
            throw await deserializeAws_queryTemplateDoesNotExistExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_querySetActiveReceiptRuleSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_querySetActiveReceiptRuleSetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_querySetActiveReceiptRuleSetResponse(data.SetActiveReceiptRuleSetResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_querySetActiveReceiptRuleSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "RuleSetDoesNotExist":
        case "com.amazonaws.ses#RuleSetDoesNotExistException":
            throw await deserializeAws_queryRuleSetDoesNotExistExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_querySetIdentityDkimEnabledCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_querySetIdentityDkimEnabledCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_querySetIdentityDkimEnabledResponse(data.SetIdentityDkimEnabledResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_querySetIdentityDkimEnabledCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_querySetIdentityFeedbackForwardingEnabledCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_querySetIdentityFeedbackForwardingEnabledCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_querySetIdentityFeedbackForwardingEnabledResponse(data.SetIdentityFeedbackForwardingEnabledResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_querySetIdentityFeedbackForwardingEnabledCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_querySetIdentityHeadersInNotificationsEnabledCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_querySetIdentityHeadersInNotificationsEnabledCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_querySetIdentityHeadersInNotificationsEnabledResponse(data.SetIdentityHeadersInNotificationsEnabledResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_querySetIdentityHeadersInNotificationsEnabledCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_querySetIdentityMailFromDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_querySetIdentityMailFromDomainCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_querySetIdentityMailFromDomainResponse(data.SetIdentityMailFromDomainResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_querySetIdentityMailFromDomainCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_querySetIdentityNotificationTopicCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_querySetIdentityNotificationTopicCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_querySetIdentityNotificationTopicResponse(data.SetIdentityNotificationTopicResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_querySetIdentityNotificationTopicCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_querySetReceiptRulePositionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_querySetReceiptRulePositionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_querySetReceiptRulePositionResponse(data.SetReceiptRulePositionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_querySetReceiptRulePositionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "RuleDoesNotExist":
        case "com.amazonaws.ses#RuleDoesNotExistException":
            throw await deserializeAws_queryRuleDoesNotExistExceptionResponse(parsedOutput, context);
        case "RuleSetDoesNotExist":
        case "com.amazonaws.ses#RuleSetDoesNotExistException":
            throw await deserializeAws_queryRuleSetDoesNotExistExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryTestRenderTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryTestRenderTemplateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryTestRenderTemplateResponse(data.TestRenderTemplateResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryTestRenderTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidRenderingParameter":
        case "com.amazonaws.ses#InvalidRenderingParameterException":
            throw await deserializeAws_queryInvalidRenderingParameterExceptionResponse(parsedOutput, context);
        case "MissingRenderingAttribute":
        case "com.amazonaws.ses#MissingRenderingAttributeException":
            throw await deserializeAws_queryMissingRenderingAttributeExceptionResponse(parsedOutput, context);
        case "TemplateDoesNotExist":
        case "com.amazonaws.ses#TemplateDoesNotExistException":
            throw await deserializeAws_queryTemplateDoesNotExistExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryUpdateAccountSendingEnabledCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateAccountSendingEnabledCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_queryUpdateAccountSendingEnabledCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryUpdateConfigurationSetEventDestinationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateConfigurationSetEventDestinationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryUpdateConfigurationSetEventDestinationResponse(data.UpdateConfigurationSetEventDestinationResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryUpdateConfigurationSetEventDestinationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConfigurationSetDoesNotExist":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
            throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        case "EventDestinationDoesNotExist":
        case "com.amazonaws.ses#EventDestinationDoesNotExistException":
            throw await deserializeAws_queryEventDestinationDoesNotExistExceptionResponse(parsedOutput, context);
        case "InvalidCloudWatchDestination":
        case "com.amazonaws.ses#InvalidCloudWatchDestinationException":
            throw await deserializeAws_queryInvalidCloudWatchDestinationExceptionResponse(parsedOutput, context);
        case "InvalidFirehoseDestination":
        case "com.amazonaws.ses#InvalidFirehoseDestinationException":
            throw await deserializeAws_queryInvalidFirehoseDestinationExceptionResponse(parsedOutput, context);
        case "InvalidSNSDestination":
        case "com.amazonaws.ses#InvalidSNSDestinationException":
            throw await deserializeAws_queryInvalidSNSDestinationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryUpdateConfigurationSetReputationMetricsEnabledCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateConfigurationSetReputationMetricsEnabledCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_queryUpdateConfigurationSetReputationMetricsEnabledCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConfigurationSetDoesNotExist":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
            throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryUpdateConfigurationSetSendingEnabledCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateConfigurationSetSendingEnabledCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_queryUpdateConfigurationSetSendingEnabledCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConfigurationSetDoesNotExist":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
            throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryUpdateConfigurationSetTrackingOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateConfigurationSetTrackingOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryUpdateConfigurationSetTrackingOptionsResponse(data.UpdateConfigurationSetTrackingOptionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryUpdateConfigurationSetTrackingOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConfigurationSetDoesNotExist":
        case "com.amazonaws.ses#ConfigurationSetDoesNotExistException":
            throw await deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse(parsedOutput, context);
        case "InvalidTrackingOptions":
        case "com.amazonaws.ses#InvalidTrackingOptionsException":
            throw await deserializeAws_queryInvalidTrackingOptionsExceptionResponse(parsedOutput, context);
        case "TrackingOptionsDoesNotExistException":
        case "com.amazonaws.ses#TrackingOptionsDoesNotExistException":
            throw await deserializeAws_queryTrackingOptionsDoesNotExistExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryUpdateCustomVerificationEmailTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateCustomVerificationEmailTemplateCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_queryUpdateCustomVerificationEmailTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CustomVerificationEmailInvalidContent":
        case "com.amazonaws.ses#CustomVerificationEmailInvalidContentException":
            throw await deserializeAws_queryCustomVerificationEmailInvalidContentExceptionResponse(parsedOutput, context);
        case "CustomVerificationEmailTemplateDoesNotExist":
        case "com.amazonaws.ses#CustomVerificationEmailTemplateDoesNotExistException":
            throw await deserializeAws_queryCustomVerificationEmailTemplateDoesNotExistExceptionResponse(parsedOutput, context);
        case "FromEmailAddressNotVerified":
        case "com.amazonaws.ses#FromEmailAddressNotVerifiedException":
            throw await deserializeAws_queryFromEmailAddressNotVerifiedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryUpdateReceiptRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateReceiptRuleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryUpdateReceiptRuleResponse(data.UpdateReceiptRuleResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryUpdateReceiptRuleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidLambdaFunction":
        case "com.amazonaws.ses#InvalidLambdaFunctionException":
            throw await deserializeAws_queryInvalidLambdaFunctionExceptionResponse(parsedOutput, context);
        case "InvalidS3Configuration":
        case "com.amazonaws.ses#InvalidS3ConfigurationException":
            throw await deserializeAws_queryInvalidS3ConfigurationExceptionResponse(parsedOutput, context);
        case "InvalidSnsTopic":
        case "com.amazonaws.ses#InvalidSnsTopicException":
            throw await deserializeAws_queryInvalidSnsTopicExceptionResponse(parsedOutput, context);
        case "LimitExceeded":
        case "com.amazonaws.ses#LimitExceededException":
            throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "RuleDoesNotExist":
        case "com.amazonaws.ses#RuleDoesNotExistException":
            throw await deserializeAws_queryRuleDoesNotExistExceptionResponse(parsedOutput, context);
        case "RuleSetDoesNotExist":
        case "com.amazonaws.ses#RuleSetDoesNotExistException":
            throw await deserializeAws_queryRuleSetDoesNotExistExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryUpdateTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateTemplateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryUpdateTemplateResponse(data.UpdateTemplateResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryUpdateTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidTemplate":
        case "com.amazonaws.ses#InvalidTemplateException":
            throw await deserializeAws_queryInvalidTemplateExceptionResponse(parsedOutput, context);
        case "TemplateDoesNotExist":
        case "com.amazonaws.ses#TemplateDoesNotExistException":
            throw await deserializeAws_queryTemplateDoesNotExistExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryVerifyDomainDkimCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryVerifyDomainDkimCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryVerifyDomainDkimResponse(data.VerifyDomainDkimResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryVerifyDomainDkimCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryVerifyDomainIdentityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryVerifyDomainIdentityCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryVerifyDomainIdentityResponse(data.VerifyDomainIdentityResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryVerifyDomainIdentityCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryVerifyEmailAddressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryVerifyEmailAddressCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_queryVerifyEmailAddressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryVerifyEmailIdentityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryVerifyEmailIdentityCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryVerifyEmailIdentityResponse(data.VerifyEmailIdentityResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryVerifyEmailIdentityCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
const deserializeAws_queryAccountSendingPausedExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryAccountSendingPausedException(body.Error, context);
    const exception = new AccountSendingPausedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryAlreadyExistsException(body.Error, context);
    const exception = new AlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryCannotDeleteExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryCannotDeleteException(body.Error, context);
    const exception = new CannotDeleteException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryConfigurationSetAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryConfigurationSetAlreadyExistsException(body.Error, context);
    const exception = new ConfigurationSetAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryConfigurationSetDoesNotExistExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryConfigurationSetDoesNotExistException(body.Error, context);
    const exception = new ConfigurationSetDoesNotExistException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryConfigurationSetSendingPausedExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryConfigurationSetSendingPausedException(body.Error, context);
    const exception = new ConfigurationSetSendingPausedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryCustomVerificationEmailInvalidContentExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryCustomVerificationEmailInvalidContentException(body.Error, context);
    const exception = new CustomVerificationEmailInvalidContentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryCustomVerificationEmailTemplateAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryCustomVerificationEmailTemplateAlreadyExistsException(body.Error, context);
    const exception = new CustomVerificationEmailTemplateAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryCustomVerificationEmailTemplateDoesNotExistExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryCustomVerificationEmailTemplateDoesNotExistException(body.Error, context);
    const exception = new CustomVerificationEmailTemplateDoesNotExistException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryEventDestinationAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryEventDestinationAlreadyExistsException(body.Error, context);
    const exception = new EventDestinationAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryEventDestinationDoesNotExistExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryEventDestinationDoesNotExistException(body.Error, context);
    const exception = new EventDestinationDoesNotExistException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryFromEmailAddressNotVerifiedExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryFromEmailAddressNotVerifiedException(body.Error, context);
    const exception = new FromEmailAddressNotVerifiedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidCloudWatchDestinationExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidCloudWatchDestinationException(body.Error, context);
    const exception = new InvalidCloudWatchDestinationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidConfigurationSetExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidConfigurationSetException(body.Error, context);
    const exception = new InvalidConfigurationSetException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidDeliveryOptionsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidDeliveryOptionsException(body.Error, context);
    const exception = new InvalidDeliveryOptionsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidFirehoseDestinationExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidFirehoseDestinationException(body.Error, context);
    const exception = new InvalidFirehoseDestinationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidLambdaFunctionExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidLambdaFunctionException(body.Error, context);
    const exception = new InvalidLambdaFunctionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidPolicyExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidPolicyException(body.Error, context);
    const exception = new InvalidPolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidRenderingParameterExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidRenderingParameterException(body.Error, context);
    const exception = new InvalidRenderingParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidS3ConfigurationExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidS3ConfigurationException(body.Error, context);
    const exception = new InvalidS3ConfigurationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidSNSDestinationExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidSNSDestinationException(body.Error, context);
    const exception = new InvalidSNSDestinationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidSnsTopicExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidSnsTopicException(body.Error, context);
    const exception = new InvalidSnsTopicException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidTemplateExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidTemplateException(body.Error, context);
    const exception = new InvalidTemplateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidTrackingOptionsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidTrackingOptionsException(body.Error, context);
    const exception = new InvalidTrackingOptionsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryLimitExceededExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryLimitExceededException(body.Error, context);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryMailFromDomainNotVerifiedExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryMailFromDomainNotVerifiedException(body.Error, context);
    const exception = new MailFromDomainNotVerifiedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryMessageRejectedResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryMessageRejected(body.Error, context);
    const exception = new MessageRejected({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryMissingRenderingAttributeExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryMissingRenderingAttributeException(body.Error, context);
    const exception = new MissingRenderingAttributeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryProductionAccessNotGrantedExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryProductionAccessNotGrantedException(body.Error, context);
    const exception = new ProductionAccessNotGrantedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryRuleDoesNotExistExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryRuleDoesNotExistException(body.Error, context);
    const exception = new RuleDoesNotExistException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryRuleSetDoesNotExistExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryRuleSetDoesNotExistException(body.Error, context);
    const exception = new RuleSetDoesNotExistException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryTemplateDoesNotExistExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryTemplateDoesNotExistException(body.Error, context);
    const exception = new TemplateDoesNotExistException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryTrackingOptionsAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryTrackingOptionsAlreadyExistsException(body.Error, context);
    const exception = new TrackingOptionsAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryTrackingOptionsDoesNotExistExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryTrackingOptionsDoesNotExistException(body.Error, context);
    const exception = new TrackingOptionsDoesNotExistException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const serializeAws_queryAddHeaderAction = (input, context) => {
    const entries = {};
    if (input.HeaderName != null) {
        entries["HeaderName"] = input.HeaderName;
    }
    if (input.HeaderValue != null) {
        entries["HeaderValue"] = input.HeaderValue;
    }
    return entries;
};
const serializeAws_queryAddressList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryBody = (input, context) => {
    const entries = {};
    if (input.Text != null) {
        const memberEntries = serializeAws_queryContent(input.Text, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Text.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Html != null) {
        const memberEntries = serializeAws_queryContent(input.Html, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Html.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryBounceAction = (input, context) => {
    const entries = {};
    if (input.TopicArn != null) {
        entries["TopicArn"] = input.TopicArn;
    }
    if (input.SmtpReplyCode != null) {
        entries["SmtpReplyCode"] = input.SmtpReplyCode;
    }
    if (input.StatusCode != null) {
        entries["StatusCode"] = input.StatusCode;
    }
    if (input.Message != null) {
        entries["Message"] = input.Message;
    }
    if (input.Sender != null) {
        entries["Sender"] = input.Sender;
    }
    return entries;
};
const serializeAws_queryBouncedRecipientInfo = (input, context) => {
    const entries = {};
    if (input.Recipient != null) {
        entries["Recipient"] = input.Recipient;
    }
    if (input.RecipientArn != null) {
        entries["RecipientArn"] = input.RecipientArn;
    }
    if (input.BounceType != null) {
        entries["BounceType"] = input.BounceType;
    }
    if (input.RecipientDsnFields != null) {
        const memberEntries = serializeAws_queryRecipientDsnFields(input.RecipientDsnFields, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RecipientDsnFields.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryBouncedRecipientInfoList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryBouncedRecipientInfo(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryBulkEmailDestination = (input, context) => {
    const entries = {};
    if (input.Destination != null) {
        const memberEntries = serializeAws_queryDestination(input.Destination, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Destination.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ReplacementTags != null) {
        const memberEntries = serializeAws_queryMessageTagList(input.ReplacementTags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReplacementTags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ReplacementTemplateData != null) {
        entries["ReplacementTemplateData"] = input.ReplacementTemplateData;
    }
    return entries;
};
const serializeAws_queryBulkEmailDestinationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryBulkEmailDestination(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryCloneReceiptRuleSetRequest = (input, context) => {
    const entries = {};
    if (input.RuleSetName != null) {
        entries["RuleSetName"] = input.RuleSetName;
    }
    if (input.OriginalRuleSetName != null) {
        entries["OriginalRuleSetName"] = input.OriginalRuleSetName;
    }
    return entries;
};
const serializeAws_queryCloudWatchDestination = (input, context) => {
    const entries = {};
    if (input.DimensionConfigurations != null) {
        const memberEntries = serializeAws_queryCloudWatchDimensionConfigurations(input.DimensionConfigurations, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DimensionConfigurations.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCloudWatchDimensionConfiguration = (input, context) => {
    const entries = {};
    if (input.DimensionName != null) {
        entries["DimensionName"] = input.DimensionName;
    }
    if (input.DimensionValueSource != null) {
        entries["DimensionValueSource"] = input.DimensionValueSource;
    }
    if (input.DefaultDimensionValue != null) {
        entries["DefaultDimensionValue"] = input.DefaultDimensionValue;
    }
    return entries;
};
const serializeAws_queryCloudWatchDimensionConfigurations = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryCloudWatchDimensionConfiguration(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryConfigurationSet = (input, context) => {
    const entries = {};
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    return entries;
};
const serializeAws_queryConfigurationSetAttributeList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryContent = (input, context) => {
    const entries = {};
    if (input.Data != null) {
        entries["Data"] = input.Data;
    }
    if (input.Charset != null) {
        entries["Charset"] = input.Charset;
    }
    return entries;
};
const serializeAws_queryCreateConfigurationSetEventDestinationRequest = (input, context) => {
    const entries = {};
    if (input.ConfigurationSetName != null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
    }
    if (input.EventDestination != null) {
        const memberEntries = serializeAws_queryEventDestination(input.EventDestination, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EventDestination.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateConfigurationSetRequest = (input, context) => {
    const entries = {};
    if (input.ConfigurationSet != null) {
        const memberEntries = serializeAws_queryConfigurationSet(input.ConfigurationSet, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ConfigurationSet.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateConfigurationSetTrackingOptionsRequest = (input, context) => {
    const entries = {};
    if (input.ConfigurationSetName != null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
    }
    if (input.TrackingOptions != null) {
        const memberEntries = serializeAws_queryTrackingOptions(input.TrackingOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TrackingOptions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateCustomVerificationEmailTemplateRequest = (input, context) => {
    const entries = {};
    if (input.TemplateName != null) {
        entries["TemplateName"] = input.TemplateName;
    }
    if (input.FromEmailAddress != null) {
        entries["FromEmailAddress"] = input.FromEmailAddress;
    }
    if (input.TemplateSubject != null) {
        entries["TemplateSubject"] = input.TemplateSubject;
    }
    if (input.TemplateContent != null) {
        entries["TemplateContent"] = input.TemplateContent;
    }
    if (input.SuccessRedirectionURL != null) {
        entries["SuccessRedirectionURL"] = input.SuccessRedirectionURL;
    }
    if (input.FailureRedirectionURL != null) {
        entries["FailureRedirectionURL"] = input.FailureRedirectionURL;
    }
    return entries;
};
const serializeAws_queryCreateReceiptFilterRequest = (input, context) => {
    const entries = {};
    if (input.Filter != null) {
        const memberEntries = serializeAws_queryReceiptFilter(input.Filter, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateReceiptRuleRequest = (input, context) => {
    const entries = {};
    if (input.RuleSetName != null) {
        entries["RuleSetName"] = input.RuleSetName;
    }
    if (input.After != null) {
        entries["After"] = input.After;
    }
    if (input.Rule != null) {
        const memberEntries = serializeAws_queryReceiptRule(input.Rule, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Rule.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateReceiptRuleSetRequest = (input, context) => {
    const entries = {};
    if (input.RuleSetName != null) {
        entries["RuleSetName"] = input.RuleSetName;
    }
    return entries;
};
const serializeAws_queryCreateTemplateRequest = (input, context) => {
    const entries = {};
    if (input.Template != null) {
        const memberEntries = serializeAws_queryTemplate(input.Template, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Template.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDeleteConfigurationSetEventDestinationRequest = (input, context) => {
    const entries = {};
    if (input.ConfigurationSetName != null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
    }
    if (input.EventDestinationName != null) {
        entries["EventDestinationName"] = input.EventDestinationName;
    }
    return entries;
};
const serializeAws_queryDeleteConfigurationSetRequest = (input, context) => {
    const entries = {};
    if (input.ConfigurationSetName != null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
    }
    return entries;
};
const serializeAws_queryDeleteConfigurationSetTrackingOptionsRequest = (input, context) => {
    const entries = {};
    if (input.ConfigurationSetName != null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
    }
    return entries;
};
const serializeAws_queryDeleteCustomVerificationEmailTemplateRequest = (input, context) => {
    const entries = {};
    if (input.TemplateName != null) {
        entries["TemplateName"] = input.TemplateName;
    }
    return entries;
};
const serializeAws_queryDeleteIdentityPolicyRequest = (input, context) => {
    const entries = {};
    if (input.Identity != null) {
        entries["Identity"] = input.Identity;
    }
    if (input.PolicyName != null) {
        entries["PolicyName"] = input.PolicyName;
    }
    return entries;
};
const serializeAws_queryDeleteIdentityRequest = (input, context) => {
    const entries = {};
    if (input.Identity != null) {
        entries["Identity"] = input.Identity;
    }
    return entries;
};
const serializeAws_queryDeleteReceiptFilterRequest = (input, context) => {
    const entries = {};
    if (input.FilterName != null) {
        entries["FilterName"] = input.FilterName;
    }
    return entries;
};
const serializeAws_queryDeleteReceiptRuleRequest = (input, context) => {
    const entries = {};
    if (input.RuleSetName != null) {
        entries["RuleSetName"] = input.RuleSetName;
    }
    if (input.RuleName != null) {
        entries["RuleName"] = input.RuleName;
    }
    return entries;
};
const serializeAws_queryDeleteReceiptRuleSetRequest = (input, context) => {
    const entries = {};
    if (input.RuleSetName != null) {
        entries["RuleSetName"] = input.RuleSetName;
    }
    return entries;
};
const serializeAws_queryDeleteTemplateRequest = (input, context) => {
    const entries = {};
    if (input.TemplateName != null) {
        entries["TemplateName"] = input.TemplateName;
    }
    return entries;
};
const serializeAws_queryDeleteVerifiedEmailAddressRequest = (input, context) => {
    const entries = {};
    if (input.EmailAddress != null) {
        entries["EmailAddress"] = input.EmailAddress;
    }
    return entries;
};
const serializeAws_queryDeliveryOptions = (input, context) => {
    const entries = {};
    if (input.TlsPolicy != null) {
        entries["TlsPolicy"] = input.TlsPolicy;
    }
    return entries;
};
const serializeAws_queryDescribeActiveReceiptRuleSetRequest = (input, context) => {
    const entries = {};
    return entries;
};
const serializeAws_queryDescribeConfigurationSetRequest = (input, context) => {
    const entries = {};
    if (input.ConfigurationSetName != null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
    }
    if (input.ConfigurationSetAttributeNames != null) {
        const memberEntries = serializeAws_queryConfigurationSetAttributeList(input.ConfigurationSetAttributeNames, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ConfigurationSetAttributeNames.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDescribeReceiptRuleRequest = (input, context) => {
    const entries = {};
    if (input.RuleSetName != null) {
        entries["RuleSetName"] = input.RuleSetName;
    }
    if (input.RuleName != null) {
        entries["RuleName"] = input.RuleName;
    }
    return entries;
};
const serializeAws_queryDescribeReceiptRuleSetRequest = (input, context) => {
    const entries = {};
    if (input.RuleSetName != null) {
        entries["RuleSetName"] = input.RuleSetName;
    }
    return entries;
};
const serializeAws_queryDestination = (input, context) => {
    const entries = {};
    if (input.ToAddresses != null) {
        const memberEntries = serializeAws_queryAddressList(input.ToAddresses, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ToAddresses.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CcAddresses != null) {
        const memberEntries = serializeAws_queryAddressList(input.CcAddresses, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CcAddresses.${key}`;
            entries[loc] = value;
        });
    }
    if (input.BccAddresses != null) {
        const memberEntries = serializeAws_queryAddressList(input.BccAddresses, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BccAddresses.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryEventDestination = (input, context) => {
    const entries = {};
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    if (input.MatchingEventTypes != null) {
        const memberEntries = serializeAws_queryEventTypes(input.MatchingEventTypes, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MatchingEventTypes.${key}`;
            entries[loc] = value;
        });
    }
    if (input.KinesisFirehoseDestination != null) {
        const memberEntries = serializeAws_queryKinesisFirehoseDestination(input.KinesisFirehoseDestination, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `KinesisFirehoseDestination.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CloudWatchDestination != null) {
        const memberEntries = serializeAws_queryCloudWatchDestination(input.CloudWatchDestination, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CloudWatchDestination.${key}`;
            entries[loc] = value;
        });
    }
    if (input.SNSDestination != null) {
        const memberEntries = serializeAws_querySNSDestination(input.SNSDestination, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SNSDestination.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryEventTypes = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryExtensionField = (input, context) => {
    const entries = {};
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const serializeAws_queryExtensionFieldList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryExtensionField(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryGetCustomVerificationEmailTemplateRequest = (input, context) => {
    const entries = {};
    if (input.TemplateName != null) {
        entries["TemplateName"] = input.TemplateName;
    }
    return entries;
};
const serializeAws_queryGetIdentityDkimAttributesRequest = (input, context) => {
    const entries = {};
    if (input.Identities != null) {
        const memberEntries = serializeAws_queryIdentityList(input.Identities, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Identities.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryGetIdentityMailFromDomainAttributesRequest = (input, context) => {
    const entries = {};
    if (input.Identities != null) {
        const memberEntries = serializeAws_queryIdentityList(input.Identities, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Identities.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryGetIdentityNotificationAttributesRequest = (input, context) => {
    const entries = {};
    if (input.Identities != null) {
        const memberEntries = serializeAws_queryIdentityList(input.Identities, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Identities.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryGetIdentityPoliciesRequest = (input, context) => {
    const entries = {};
    if (input.Identity != null) {
        entries["Identity"] = input.Identity;
    }
    if (input.PolicyNames != null) {
        const memberEntries = serializeAws_queryPolicyNameList(input.PolicyNames, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PolicyNames.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryGetIdentityVerificationAttributesRequest = (input, context) => {
    const entries = {};
    if (input.Identities != null) {
        const memberEntries = serializeAws_queryIdentityList(input.Identities, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Identities.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryGetTemplateRequest = (input, context) => {
    const entries = {};
    if (input.TemplateName != null) {
        entries["TemplateName"] = input.TemplateName;
    }
    return entries;
};
const serializeAws_queryIdentityList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryKinesisFirehoseDestination = (input, context) => {
    const entries = {};
    if (input.IAMRoleARN != null) {
        entries["IAMRoleARN"] = input.IAMRoleARN;
    }
    if (input.DeliveryStreamARN != null) {
        entries["DeliveryStreamARN"] = input.DeliveryStreamARN;
    }
    return entries;
};
const serializeAws_queryLambdaAction = (input, context) => {
    const entries = {};
    if (input.TopicArn != null) {
        entries["TopicArn"] = input.TopicArn;
    }
    if (input.FunctionArn != null) {
        entries["FunctionArn"] = input.FunctionArn;
    }
    if (input.InvocationType != null) {
        entries["InvocationType"] = input.InvocationType;
    }
    return entries;
};
const serializeAws_queryListConfigurationSetsRequest = (input, context) => {
    const entries = {};
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
    }
    return entries;
};
const serializeAws_queryListCustomVerificationEmailTemplatesRequest = (input, context) => {
    const entries = {};
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const serializeAws_queryListIdentitiesRequest = (input, context) => {
    const entries = {};
    if (input.IdentityType != null) {
        entries["IdentityType"] = input.IdentityType;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
    }
    return entries;
};
const serializeAws_queryListIdentityPoliciesRequest = (input, context) => {
    const entries = {};
    if (input.Identity != null) {
        entries["Identity"] = input.Identity;
    }
    return entries;
};
const serializeAws_queryListReceiptFiltersRequest = (input, context) => {
    const entries = {};
    return entries;
};
const serializeAws_queryListReceiptRuleSetsRequest = (input, context) => {
    const entries = {};
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_queryListTemplatesRequest = (input, context) => {
    const entries = {};
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
    }
    return entries;
};
const serializeAws_queryMessage = (input, context) => {
    const entries = {};
    if (input.Subject != null) {
        const memberEntries = serializeAws_queryContent(input.Subject, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Subject.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Body != null) {
        const memberEntries = serializeAws_queryBody(input.Body, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Body.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryMessageDsn = (input, context) => {
    const entries = {};
    if (input.ReportingMta != null) {
        entries["ReportingMta"] = input.ReportingMta;
    }
    if (input.ArrivalDate != null) {
        entries["ArrivalDate"] = input.ArrivalDate.toISOString().split(".")[0] + "Z";
    }
    if (input.ExtensionFields != null) {
        const memberEntries = serializeAws_queryExtensionFieldList(input.ExtensionFields, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExtensionFields.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryMessageTag = (input, context) => {
    const entries = {};
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const serializeAws_queryMessageTagList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryMessageTag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryPolicyNameList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryPutConfigurationSetDeliveryOptionsRequest = (input, context) => {
    const entries = {};
    if (input.ConfigurationSetName != null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
    }
    if (input.DeliveryOptions != null) {
        const memberEntries = serializeAws_queryDeliveryOptions(input.DeliveryOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DeliveryOptions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryPutIdentityPolicyRequest = (input, context) => {
    const entries = {};
    if (input.Identity != null) {
        entries["Identity"] = input.Identity;
    }
    if (input.PolicyName != null) {
        entries["PolicyName"] = input.PolicyName;
    }
    if (input.Policy != null) {
        entries["Policy"] = input.Policy;
    }
    return entries;
};
const serializeAws_queryRawMessage = (input, context) => {
    const entries = {};
    if (input.Data != null) {
        entries["Data"] = context.base64Encoder(input.Data);
    }
    return entries;
};
const serializeAws_queryReceiptAction = (input, context) => {
    const entries = {};
    if (input.S3Action != null) {
        const memberEntries = serializeAws_queryS3Action(input.S3Action, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `S3Action.${key}`;
            entries[loc] = value;
        });
    }
    if (input.BounceAction != null) {
        const memberEntries = serializeAws_queryBounceAction(input.BounceAction, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BounceAction.${key}`;
            entries[loc] = value;
        });
    }
    if (input.WorkmailAction != null) {
        const memberEntries = serializeAws_queryWorkmailAction(input.WorkmailAction, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `WorkmailAction.${key}`;
            entries[loc] = value;
        });
    }
    if (input.LambdaAction != null) {
        const memberEntries = serializeAws_queryLambdaAction(input.LambdaAction, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LambdaAction.${key}`;
            entries[loc] = value;
        });
    }
    if (input.StopAction != null) {
        const memberEntries = serializeAws_queryStopAction(input.StopAction, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `StopAction.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AddHeaderAction != null) {
        const memberEntries = serializeAws_queryAddHeaderAction(input.AddHeaderAction, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddHeaderAction.${key}`;
            entries[loc] = value;
        });
    }
    if (input.SNSAction != null) {
        const memberEntries = serializeAws_querySNSAction(input.SNSAction, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SNSAction.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryReceiptActionsList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryReceiptAction(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryReceiptFilter = (input, context) => {
    const entries = {};
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    if (input.IpFilter != null) {
        const memberEntries = serializeAws_queryReceiptIpFilter(input.IpFilter, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpFilter.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryReceiptIpFilter = (input, context) => {
    const entries = {};
    if (input.Policy != null) {
        entries["Policy"] = input.Policy;
    }
    if (input.Cidr != null) {
        entries["Cidr"] = input.Cidr;
    }
    return entries;
};
const serializeAws_queryReceiptRule = (input, context) => {
    const entries = {};
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    if (input.TlsPolicy != null) {
        entries["TlsPolicy"] = input.TlsPolicy;
    }
    if (input.Recipients != null) {
        const memberEntries = serializeAws_queryRecipientsList(input.Recipients, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Recipients.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Actions != null) {
        const memberEntries = serializeAws_queryReceiptActionsList(input.Actions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Actions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ScanEnabled != null) {
        entries["ScanEnabled"] = input.ScanEnabled;
    }
    return entries;
};
const serializeAws_queryReceiptRuleNamesList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryRecipientDsnFields = (input, context) => {
    const entries = {};
    if (input.FinalRecipient != null) {
        entries["FinalRecipient"] = input.FinalRecipient;
    }
    if (input.Action != null) {
        entries["Action"] = input.Action;
    }
    if (input.RemoteMta != null) {
        entries["RemoteMta"] = input.RemoteMta;
    }
    if (input.Status != null) {
        entries["Status"] = input.Status;
    }
    if (input.DiagnosticCode != null) {
        entries["DiagnosticCode"] = input.DiagnosticCode;
    }
    if (input.LastAttemptDate != null) {
        entries["LastAttemptDate"] = input.LastAttemptDate.toISOString().split(".")[0] + "Z";
    }
    if (input.ExtensionFields != null) {
        const memberEntries = serializeAws_queryExtensionFieldList(input.ExtensionFields, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExtensionFields.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryRecipientsList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryReorderReceiptRuleSetRequest = (input, context) => {
    const entries = {};
    if (input.RuleSetName != null) {
        entries["RuleSetName"] = input.RuleSetName;
    }
    if (input.RuleNames != null) {
        const memberEntries = serializeAws_queryReceiptRuleNamesList(input.RuleNames, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RuleNames.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryS3Action = (input, context) => {
    const entries = {};
    if (input.TopicArn != null) {
        entries["TopicArn"] = input.TopicArn;
    }
    if (input.BucketName != null) {
        entries["BucketName"] = input.BucketName;
    }
    if (input.ObjectKeyPrefix != null) {
        entries["ObjectKeyPrefix"] = input.ObjectKeyPrefix;
    }
    if (input.KmsKeyArn != null) {
        entries["KmsKeyArn"] = input.KmsKeyArn;
    }
    return entries;
};
const serializeAws_querySendBounceRequest = (input, context) => {
    const entries = {};
    if (input.OriginalMessageId != null) {
        entries["OriginalMessageId"] = input.OriginalMessageId;
    }
    if (input.BounceSender != null) {
        entries["BounceSender"] = input.BounceSender;
    }
    if (input.Explanation != null) {
        entries["Explanation"] = input.Explanation;
    }
    if (input.MessageDsn != null) {
        const memberEntries = serializeAws_queryMessageDsn(input.MessageDsn, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MessageDsn.${key}`;
            entries[loc] = value;
        });
    }
    if (input.BouncedRecipientInfoList != null) {
        const memberEntries = serializeAws_queryBouncedRecipientInfoList(input.BouncedRecipientInfoList, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BouncedRecipientInfoList.${key}`;
            entries[loc] = value;
        });
    }
    if (input.BounceSenderArn != null) {
        entries["BounceSenderArn"] = input.BounceSenderArn;
    }
    return entries;
};
const serializeAws_querySendBulkTemplatedEmailRequest = (input, context) => {
    const entries = {};
    if (input.Source != null) {
        entries["Source"] = input.Source;
    }
    if (input.SourceArn != null) {
        entries["SourceArn"] = input.SourceArn;
    }
    if (input.ReplyToAddresses != null) {
        const memberEntries = serializeAws_queryAddressList(input.ReplyToAddresses, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReplyToAddresses.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ReturnPath != null) {
        entries["ReturnPath"] = input.ReturnPath;
    }
    if (input.ReturnPathArn != null) {
        entries["ReturnPathArn"] = input.ReturnPathArn;
    }
    if (input.ConfigurationSetName != null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
    }
    if (input.DefaultTags != null) {
        const memberEntries = serializeAws_queryMessageTagList(input.DefaultTags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DefaultTags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Template != null) {
        entries["Template"] = input.Template;
    }
    if (input.TemplateArn != null) {
        entries["TemplateArn"] = input.TemplateArn;
    }
    if (input.DefaultTemplateData != null) {
        entries["DefaultTemplateData"] = input.DefaultTemplateData;
    }
    if (input.Destinations != null) {
        const memberEntries = serializeAws_queryBulkEmailDestinationList(input.Destinations, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Destinations.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_querySendCustomVerificationEmailRequest = (input, context) => {
    const entries = {};
    if (input.EmailAddress != null) {
        entries["EmailAddress"] = input.EmailAddress;
    }
    if (input.TemplateName != null) {
        entries["TemplateName"] = input.TemplateName;
    }
    if (input.ConfigurationSetName != null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
    }
    return entries;
};
const serializeAws_querySendEmailRequest = (input, context) => {
    const entries = {};
    if (input.Source != null) {
        entries["Source"] = input.Source;
    }
    if (input.Destination != null) {
        const memberEntries = serializeAws_queryDestination(input.Destination, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Destination.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Message != null) {
        const memberEntries = serializeAws_queryMessage(input.Message, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Message.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ReplyToAddresses != null) {
        const memberEntries = serializeAws_queryAddressList(input.ReplyToAddresses, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReplyToAddresses.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ReturnPath != null) {
        entries["ReturnPath"] = input.ReturnPath;
    }
    if (input.SourceArn != null) {
        entries["SourceArn"] = input.SourceArn;
    }
    if (input.ReturnPathArn != null) {
        entries["ReturnPathArn"] = input.ReturnPathArn;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryMessageTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ConfigurationSetName != null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
    }
    return entries;
};
const serializeAws_querySendRawEmailRequest = (input, context) => {
    const entries = {};
    if (input.Source != null) {
        entries["Source"] = input.Source;
    }
    if (input.Destinations != null) {
        const memberEntries = serializeAws_queryAddressList(input.Destinations, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Destinations.${key}`;
            entries[loc] = value;
        });
    }
    if (input.RawMessage != null) {
        const memberEntries = serializeAws_queryRawMessage(input.RawMessage, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RawMessage.${key}`;
            entries[loc] = value;
        });
    }
    if (input.FromArn != null) {
        entries["FromArn"] = input.FromArn;
    }
    if (input.SourceArn != null) {
        entries["SourceArn"] = input.SourceArn;
    }
    if (input.ReturnPathArn != null) {
        entries["ReturnPathArn"] = input.ReturnPathArn;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryMessageTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ConfigurationSetName != null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
    }
    return entries;
};
const serializeAws_querySendTemplatedEmailRequest = (input, context) => {
    const entries = {};
    if (input.Source != null) {
        entries["Source"] = input.Source;
    }
    if (input.Destination != null) {
        const memberEntries = serializeAws_queryDestination(input.Destination, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Destination.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ReplyToAddresses != null) {
        const memberEntries = serializeAws_queryAddressList(input.ReplyToAddresses, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReplyToAddresses.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ReturnPath != null) {
        entries["ReturnPath"] = input.ReturnPath;
    }
    if (input.SourceArn != null) {
        entries["SourceArn"] = input.SourceArn;
    }
    if (input.ReturnPathArn != null) {
        entries["ReturnPathArn"] = input.ReturnPathArn;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryMessageTagList(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ConfigurationSetName != null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
    }
    if (input.Template != null) {
        entries["Template"] = input.Template;
    }
    if (input.TemplateArn != null) {
        entries["TemplateArn"] = input.TemplateArn;
    }
    if (input.TemplateData != null) {
        entries["TemplateData"] = input.TemplateData;
    }
    return entries;
};
const serializeAws_querySetActiveReceiptRuleSetRequest = (input, context) => {
    const entries = {};
    if (input.RuleSetName != null) {
        entries["RuleSetName"] = input.RuleSetName;
    }
    return entries;
};
const serializeAws_querySetIdentityDkimEnabledRequest = (input, context) => {
    const entries = {};
    if (input.Identity != null) {
        entries["Identity"] = input.Identity;
    }
    if (input.DkimEnabled != null) {
        entries["DkimEnabled"] = input.DkimEnabled;
    }
    return entries;
};
const serializeAws_querySetIdentityFeedbackForwardingEnabledRequest = (input, context) => {
    const entries = {};
    if (input.Identity != null) {
        entries["Identity"] = input.Identity;
    }
    if (input.ForwardingEnabled != null) {
        entries["ForwardingEnabled"] = input.ForwardingEnabled;
    }
    return entries;
};
const serializeAws_querySetIdentityHeadersInNotificationsEnabledRequest = (input, context) => {
    const entries = {};
    if (input.Identity != null) {
        entries["Identity"] = input.Identity;
    }
    if (input.NotificationType != null) {
        entries["NotificationType"] = input.NotificationType;
    }
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    return entries;
};
const serializeAws_querySetIdentityMailFromDomainRequest = (input, context) => {
    const entries = {};
    if (input.Identity != null) {
        entries["Identity"] = input.Identity;
    }
    if (input.MailFromDomain != null) {
        entries["MailFromDomain"] = input.MailFromDomain;
    }
    if (input.BehaviorOnMXFailure != null) {
        entries["BehaviorOnMXFailure"] = input.BehaviorOnMXFailure;
    }
    return entries;
};
const serializeAws_querySetIdentityNotificationTopicRequest = (input, context) => {
    const entries = {};
    if (input.Identity != null) {
        entries["Identity"] = input.Identity;
    }
    if (input.NotificationType != null) {
        entries["NotificationType"] = input.NotificationType;
    }
    if (input.SnsTopic != null) {
        entries["SnsTopic"] = input.SnsTopic;
    }
    return entries;
};
const serializeAws_querySetReceiptRulePositionRequest = (input, context) => {
    const entries = {};
    if (input.RuleSetName != null) {
        entries["RuleSetName"] = input.RuleSetName;
    }
    if (input.RuleName != null) {
        entries["RuleName"] = input.RuleName;
    }
    if (input.After != null) {
        entries["After"] = input.After;
    }
    return entries;
};
const serializeAws_querySNSAction = (input, context) => {
    const entries = {};
    if (input.TopicArn != null) {
        entries["TopicArn"] = input.TopicArn;
    }
    if (input.Encoding != null) {
        entries["Encoding"] = input.Encoding;
    }
    return entries;
};
const serializeAws_querySNSDestination = (input, context) => {
    const entries = {};
    if (input.TopicARN != null) {
        entries["TopicARN"] = input.TopicARN;
    }
    return entries;
};
const serializeAws_queryStopAction = (input, context) => {
    const entries = {};
    if (input.Scope != null) {
        entries["Scope"] = input.Scope;
    }
    if (input.TopicArn != null) {
        entries["TopicArn"] = input.TopicArn;
    }
    return entries;
};
const serializeAws_queryTemplate = (input, context) => {
    const entries = {};
    if (input.TemplateName != null) {
        entries["TemplateName"] = input.TemplateName;
    }
    if (input.SubjectPart != null) {
        entries["SubjectPart"] = input.SubjectPart;
    }
    if (input.TextPart != null) {
        entries["TextPart"] = input.TextPart;
    }
    if (input.HtmlPart != null) {
        entries["HtmlPart"] = input.HtmlPart;
    }
    return entries;
};
const serializeAws_queryTestRenderTemplateRequest = (input, context) => {
    const entries = {};
    if (input.TemplateName != null) {
        entries["TemplateName"] = input.TemplateName;
    }
    if (input.TemplateData != null) {
        entries["TemplateData"] = input.TemplateData;
    }
    return entries;
};
const serializeAws_queryTrackingOptions = (input, context) => {
    const entries = {};
    if (input.CustomRedirectDomain != null) {
        entries["CustomRedirectDomain"] = input.CustomRedirectDomain;
    }
    return entries;
};
const serializeAws_queryUpdateAccountSendingEnabledRequest = (input, context) => {
    const entries = {};
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    return entries;
};
const serializeAws_queryUpdateConfigurationSetEventDestinationRequest = (input, context) => {
    const entries = {};
    if (input.ConfigurationSetName != null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
    }
    if (input.EventDestination != null) {
        const memberEntries = serializeAws_queryEventDestination(input.EventDestination, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EventDestination.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryUpdateConfigurationSetReputationMetricsEnabledRequest = (input, context) => {
    const entries = {};
    if (input.ConfigurationSetName != null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
    }
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    return entries;
};
const serializeAws_queryUpdateConfigurationSetSendingEnabledRequest = (input, context) => {
    const entries = {};
    if (input.ConfigurationSetName != null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
    }
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    return entries;
};
const serializeAws_queryUpdateConfigurationSetTrackingOptionsRequest = (input, context) => {
    const entries = {};
    if (input.ConfigurationSetName != null) {
        entries["ConfigurationSetName"] = input.ConfigurationSetName;
    }
    if (input.TrackingOptions != null) {
        const memberEntries = serializeAws_queryTrackingOptions(input.TrackingOptions, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TrackingOptions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryUpdateCustomVerificationEmailTemplateRequest = (input, context) => {
    const entries = {};
    if (input.TemplateName != null) {
        entries["TemplateName"] = input.TemplateName;
    }
    if (input.FromEmailAddress != null) {
        entries["FromEmailAddress"] = input.FromEmailAddress;
    }
    if (input.TemplateSubject != null) {
        entries["TemplateSubject"] = input.TemplateSubject;
    }
    if (input.TemplateContent != null) {
        entries["TemplateContent"] = input.TemplateContent;
    }
    if (input.SuccessRedirectionURL != null) {
        entries["SuccessRedirectionURL"] = input.SuccessRedirectionURL;
    }
    if (input.FailureRedirectionURL != null) {
        entries["FailureRedirectionURL"] = input.FailureRedirectionURL;
    }
    return entries;
};
const serializeAws_queryUpdateReceiptRuleRequest = (input, context) => {
    const entries = {};
    if (input.RuleSetName != null) {
        entries["RuleSetName"] = input.RuleSetName;
    }
    if (input.Rule != null) {
        const memberEntries = serializeAws_queryReceiptRule(input.Rule, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Rule.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryUpdateTemplateRequest = (input, context) => {
    const entries = {};
    if (input.Template != null) {
        const memberEntries = serializeAws_queryTemplate(input.Template, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Template.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryVerifyDomainDkimRequest = (input, context) => {
    const entries = {};
    if (input.Domain != null) {
        entries["Domain"] = input.Domain;
    }
    return entries;
};
const serializeAws_queryVerifyDomainIdentityRequest = (input, context) => {
    const entries = {};
    if (input.Domain != null) {
        entries["Domain"] = input.Domain;
    }
    return entries;
};
const serializeAws_queryVerifyEmailAddressRequest = (input, context) => {
    const entries = {};
    if (input.EmailAddress != null) {
        entries["EmailAddress"] = input.EmailAddress;
    }
    return entries;
};
const serializeAws_queryVerifyEmailIdentityRequest = (input, context) => {
    const entries = {};
    if (input.EmailAddress != null) {
        entries["EmailAddress"] = input.EmailAddress;
    }
    return entries;
};
const serializeAws_queryWorkmailAction = (input, context) => {
    const entries = {};
    if (input.TopicArn != null) {
        entries["TopicArn"] = input.TopicArn;
    }
    if (input.OrganizationArn != null) {
        entries["OrganizationArn"] = input.OrganizationArn;
    }
    return entries;
};
const deserializeAws_queryAccountSendingPausedException = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryAddHeaderAction = (output, context) => {
    const contents = {
        HeaderName: undefined,
        HeaderValue: undefined,
    };
    if (output["HeaderName"] !== undefined) {
        contents.HeaderName = __expectString(output["HeaderName"]);
    }
    if (output["HeaderValue"] !== undefined) {
        contents.HeaderValue = __expectString(output["HeaderValue"]);
    }
    return contents;
};
const deserializeAws_queryAddressList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryAlreadyExistsException = (output, context) => {
    const contents = {
        Name: undefined,
        message: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryBounceAction = (output, context) => {
    const contents = {
        TopicArn: undefined,
        SmtpReplyCode: undefined,
        StatusCode: undefined,
        Message: undefined,
        Sender: undefined,
    };
    if (output["TopicArn"] !== undefined) {
        contents.TopicArn = __expectString(output["TopicArn"]);
    }
    if (output["SmtpReplyCode"] !== undefined) {
        contents.SmtpReplyCode = __expectString(output["SmtpReplyCode"]);
    }
    if (output["StatusCode"] !== undefined) {
        contents.StatusCode = __expectString(output["StatusCode"]);
    }
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    if (output["Sender"] !== undefined) {
        contents.Sender = __expectString(output["Sender"]);
    }
    return contents;
};
const deserializeAws_queryBulkEmailDestinationStatus = (output, context) => {
    const contents = {
        Status: undefined,
        Error: undefined,
        MessageId: undefined,
    };
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["Error"] !== undefined) {
        contents.Error = __expectString(output["Error"]);
    }
    if (output["MessageId"] !== undefined) {
        contents.MessageId = __expectString(output["MessageId"]);
    }
    return contents;
};
const deserializeAws_queryBulkEmailDestinationStatusList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryBulkEmailDestinationStatus(entry, context);
    });
};
const deserializeAws_queryCannotDeleteException = (output, context) => {
    const contents = {
        Name: undefined,
        message: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryCloneReceiptRuleSetResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryCloudWatchDestination = (output, context) => {
    const contents = {
        DimensionConfigurations: undefined,
    };
    if (output.DimensionConfigurations === "") {
        contents.DimensionConfigurations = [];
    }
    else if (output["DimensionConfigurations"] !== undefined &&
        output["DimensionConfigurations"]["member"] !== undefined) {
        contents.DimensionConfigurations = deserializeAws_queryCloudWatchDimensionConfigurations(__getArrayIfSingleItem(output["DimensionConfigurations"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryCloudWatchDimensionConfiguration = (output, context) => {
    const contents = {
        DimensionName: undefined,
        DimensionValueSource: undefined,
        DefaultDimensionValue: undefined,
    };
    if (output["DimensionName"] !== undefined) {
        contents.DimensionName = __expectString(output["DimensionName"]);
    }
    if (output["DimensionValueSource"] !== undefined) {
        contents.DimensionValueSource = __expectString(output["DimensionValueSource"]);
    }
    if (output["DefaultDimensionValue"] !== undefined) {
        contents.DefaultDimensionValue = __expectString(output["DefaultDimensionValue"]);
    }
    return contents;
};
const deserializeAws_queryCloudWatchDimensionConfigurations = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryCloudWatchDimensionConfiguration(entry, context);
    });
};
const deserializeAws_queryConfigurationSet = (output, context) => {
    const contents = {
        Name: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    return contents;
};
const deserializeAws_queryConfigurationSetAlreadyExistsException = (output, context) => {
    const contents = {
        ConfigurationSetName: undefined,
        message: undefined,
    };
    if (output["ConfigurationSetName"] !== undefined) {
        contents.ConfigurationSetName = __expectString(output["ConfigurationSetName"]);
    }
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryConfigurationSetDoesNotExistException = (output, context) => {
    const contents = {
        ConfigurationSetName: undefined,
        message: undefined,
    };
    if (output["ConfigurationSetName"] !== undefined) {
        contents.ConfigurationSetName = __expectString(output["ConfigurationSetName"]);
    }
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryConfigurationSets = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryConfigurationSet(entry, context);
    });
};
const deserializeAws_queryConfigurationSetSendingPausedException = (output, context) => {
    const contents = {
        ConfigurationSetName: undefined,
        message: undefined,
    };
    if (output["ConfigurationSetName"] !== undefined) {
        contents.ConfigurationSetName = __expectString(output["ConfigurationSetName"]);
    }
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryCreateConfigurationSetEventDestinationResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryCreateConfigurationSetResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryCreateConfigurationSetTrackingOptionsResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryCreateReceiptFilterResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryCreateReceiptRuleResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryCreateReceiptRuleSetResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryCreateTemplateResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryCustomVerificationEmailInvalidContentException = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryCustomVerificationEmailTemplate = (output, context) => {
    const contents = {
        TemplateName: undefined,
        FromEmailAddress: undefined,
        TemplateSubject: undefined,
        SuccessRedirectionURL: undefined,
        FailureRedirectionURL: undefined,
    };
    if (output["TemplateName"] !== undefined) {
        contents.TemplateName = __expectString(output["TemplateName"]);
    }
    if (output["FromEmailAddress"] !== undefined) {
        contents.FromEmailAddress = __expectString(output["FromEmailAddress"]);
    }
    if (output["TemplateSubject"] !== undefined) {
        contents.TemplateSubject = __expectString(output["TemplateSubject"]);
    }
    if (output["SuccessRedirectionURL"] !== undefined) {
        contents.SuccessRedirectionURL = __expectString(output["SuccessRedirectionURL"]);
    }
    if (output["FailureRedirectionURL"] !== undefined) {
        contents.FailureRedirectionURL = __expectString(output["FailureRedirectionURL"]);
    }
    return contents;
};
const deserializeAws_queryCustomVerificationEmailTemplateAlreadyExistsException = (output, context) => {
    const contents = {
        CustomVerificationEmailTemplateName: undefined,
        message: undefined,
    };
    if (output["CustomVerificationEmailTemplateName"] !== undefined) {
        contents.CustomVerificationEmailTemplateName = __expectString(output["CustomVerificationEmailTemplateName"]);
    }
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryCustomVerificationEmailTemplateDoesNotExistException = (output, context) => {
    const contents = {
        CustomVerificationEmailTemplateName: undefined,
        message: undefined,
    };
    if (output["CustomVerificationEmailTemplateName"] !== undefined) {
        contents.CustomVerificationEmailTemplateName = __expectString(output["CustomVerificationEmailTemplateName"]);
    }
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryCustomVerificationEmailTemplates = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryCustomVerificationEmailTemplate(entry, context);
    });
};
const deserializeAws_queryDeleteConfigurationSetEventDestinationResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryDeleteConfigurationSetResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryDeleteConfigurationSetTrackingOptionsResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryDeleteIdentityPolicyResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryDeleteIdentityResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryDeleteReceiptFilterResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryDeleteReceiptRuleResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryDeleteReceiptRuleSetResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryDeleteTemplateResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryDeliveryOptions = (output, context) => {
    const contents = {
        TlsPolicy: undefined,
    };
    if (output["TlsPolicy"] !== undefined) {
        contents.TlsPolicy = __expectString(output["TlsPolicy"]);
    }
    return contents;
};
const deserializeAws_queryDescribeActiveReceiptRuleSetResponse = (output, context) => {
    const contents = {
        Metadata: undefined,
        Rules: undefined,
    };
    if (output["Metadata"] !== undefined) {
        contents.Metadata = deserializeAws_queryReceiptRuleSetMetadata(output["Metadata"], context);
    }
    if (output.Rules === "") {
        contents.Rules = [];
    }
    else if (output["Rules"] !== undefined && output["Rules"]["member"] !== undefined) {
        contents.Rules = deserializeAws_queryReceiptRulesList(__getArrayIfSingleItem(output["Rules"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryDescribeConfigurationSetResponse = (output, context) => {
    const contents = {
        ConfigurationSet: undefined,
        EventDestinations: undefined,
        TrackingOptions: undefined,
        DeliveryOptions: undefined,
        ReputationOptions: undefined,
    };
    if (output["ConfigurationSet"] !== undefined) {
        contents.ConfigurationSet = deserializeAws_queryConfigurationSet(output["ConfigurationSet"], context);
    }
    if (output.EventDestinations === "") {
        contents.EventDestinations = [];
    }
    else if (output["EventDestinations"] !== undefined && output["EventDestinations"]["member"] !== undefined) {
        contents.EventDestinations = deserializeAws_queryEventDestinations(__getArrayIfSingleItem(output["EventDestinations"]["member"]), context);
    }
    if (output["TrackingOptions"] !== undefined) {
        contents.TrackingOptions = deserializeAws_queryTrackingOptions(output["TrackingOptions"], context);
    }
    if (output["DeliveryOptions"] !== undefined) {
        contents.DeliveryOptions = deserializeAws_queryDeliveryOptions(output["DeliveryOptions"], context);
    }
    if (output["ReputationOptions"] !== undefined) {
        contents.ReputationOptions = deserializeAws_queryReputationOptions(output["ReputationOptions"], context);
    }
    return contents;
};
const deserializeAws_queryDescribeReceiptRuleResponse = (output, context) => {
    const contents = {
        Rule: undefined,
    };
    if (output["Rule"] !== undefined) {
        contents.Rule = deserializeAws_queryReceiptRule(output["Rule"], context);
    }
    return contents;
};
const deserializeAws_queryDescribeReceiptRuleSetResponse = (output, context) => {
    const contents = {
        Metadata: undefined,
        Rules: undefined,
    };
    if (output["Metadata"] !== undefined) {
        contents.Metadata = deserializeAws_queryReceiptRuleSetMetadata(output["Metadata"], context);
    }
    if (output.Rules === "") {
        contents.Rules = [];
    }
    else if (output["Rules"] !== undefined && output["Rules"]["member"] !== undefined) {
        contents.Rules = deserializeAws_queryReceiptRulesList(__getArrayIfSingleItem(output["Rules"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryDkimAttributes = (output, context) => {
    return output.reduce((acc, pair) => {
        if (pair["value"] === null) {
            return acc;
        }
        return {
            ...acc,
            [pair["key"]]: deserializeAws_queryIdentityDkimAttributes(pair["value"], context),
        };
    }, {});
};
const deserializeAws_queryEventDestination = (output, context) => {
    const contents = {
        Name: undefined,
        Enabled: undefined,
        MatchingEventTypes: undefined,
        KinesisFirehoseDestination: undefined,
        CloudWatchDestination: undefined,
        SNSDestination: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["Enabled"] !== undefined) {
        contents.Enabled = __parseBoolean(output["Enabled"]);
    }
    if (output.MatchingEventTypes === "") {
        contents.MatchingEventTypes = [];
    }
    else if (output["MatchingEventTypes"] !== undefined && output["MatchingEventTypes"]["member"] !== undefined) {
        contents.MatchingEventTypes = deserializeAws_queryEventTypes(__getArrayIfSingleItem(output["MatchingEventTypes"]["member"]), context);
    }
    if (output["KinesisFirehoseDestination"] !== undefined) {
        contents.KinesisFirehoseDestination = deserializeAws_queryKinesisFirehoseDestination(output["KinesisFirehoseDestination"], context);
    }
    if (output["CloudWatchDestination"] !== undefined) {
        contents.CloudWatchDestination = deserializeAws_queryCloudWatchDestination(output["CloudWatchDestination"], context);
    }
    if (output["SNSDestination"] !== undefined) {
        contents.SNSDestination = deserializeAws_querySNSDestination(output["SNSDestination"], context);
    }
    return contents;
};
const deserializeAws_queryEventDestinationAlreadyExistsException = (output, context) => {
    const contents = {
        ConfigurationSetName: undefined,
        EventDestinationName: undefined,
        message: undefined,
    };
    if (output["ConfigurationSetName"] !== undefined) {
        contents.ConfigurationSetName = __expectString(output["ConfigurationSetName"]);
    }
    if (output["EventDestinationName"] !== undefined) {
        contents.EventDestinationName = __expectString(output["EventDestinationName"]);
    }
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryEventDestinationDoesNotExistException = (output, context) => {
    const contents = {
        ConfigurationSetName: undefined,
        EventDestinationName: undefined,
        message: undefined,
    };
    if (output["ConfigurationSetName"] !== undefined) {
        contents.ConfigurationSetName = __expectString(output["ConfigurationSetName"]);
    }
    if (output["EventDestinationName"] !== undefined) {
        contents.EventDestinationName = __expectString(output["EventDestinationName"]);
    }
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryEventDestinations = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryEventDestination(entry, context);
    });
};
const deserializeAws_queryEventTypes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryFromEmailAddressNotVerifiedException = (output, context) => {
    const contents = {
        FromEmailAddress: undefined,
        message: undefined,
    };
    if (output["FromEmailAddress"] !== undefined) {
        contents.FromEmailAddress = __expectString(output["FromEmailAddress"]);
    }
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryGetAccountSendingEnabledResponse = (output, context) => {
    const contents = {
        Enabled: undefined,
    };
    if (output["Enabled"] !== undefined) {
        contents.Enabled = __parseBoolean(output["Enabled"]);
    }
    return contents;
};
const deserializeAws_queryGetCustomVerificationEmailTemplateResponse = (output, context) => {
    const contents = {
        TemplateName: undefined,
        FromEmailAddress: undefined,
        TemplateSubject: undefined,
        TemplateContent: undefined,
        SuccessRedirectionURL: undefined,
        FailureRedirectionURL: undefined,
    };
    if (output["TemplateName"] !== undefined) {
        contents.TemplateName = __expectString(output["TemplateName"]);
    }
    if (output["FromEmailAddress"] !== undefined) {
        contents.FromEmailAddress = __expectString(output["FromEmailAddress"]);
    }
    if (output["TemplateSubject"] !== undefined) {
        contents.TemplateSubject = __expectString(output["TemplateSubject"]);
    }
    if (output["TemplateContent"] !== undefined) {
        contents.TemplateContent = __expectString(output["TemplateContent"]);
    }
    if (output["SuccessRedirectionURL"] !== undefined) {
        contents.SuccessRedirectionURL = __expectString(output["SuccessRedirectionURL"]);
    }
    if (output["FailureRedirectionURL"] !== undefined) {
        contents.FailureRedirectionURL = __expectString(output["FailureRedirectionURL"]);
    }
    return contents;
};
const deserializeAws_queryGetIdentityDkimAttributesResponse = (output, context) => {
    const contents = {
        DkimAttributes: undefined,
    };
    if (output.DkimAttributes === "") {
        contents.DkimAttributes = {};
    }
    else if (output["DkimAttributes"] !== undefined && output["DkimAttributes"]["entry"] !== undefined) {
        contents.DkimAttributes = deserializeAws_queryDkimAttributes(__getArrayIfSingleItem(output["DkimAttributes"]["entry"]), context);
    }
    return contents;
};
const deserializeAws_queryGetIdentityMailFromDomainAttributesResponse = (output, context) => {
    const contents = {
        MailFromDomainAttributes: undefined,
    };
    if (output.MailFromDomainAttributes === "") {
        contents.MailFromDomainAttributes = {};
    }
    else if (output["MailFromDomainAttributes"] !== undefined &&
        output["MailFromDomainAttributes"]["entry"] !== undefined) {
        contents.MailFromDomainAttributes = deserializeAws_queryMailFromDomainAttributes(__getArrayIfSingleItem(output["MailFromDomainAttributes"]["entry"]), context);
    }
    return contents;
};
const deserializeAws_queryGetIdentityNotificationAttributesResponse = (output, context) => {
    const contents = {
        NotificationAttributes: undefined,
    };
    if (output.NotificationAttributes === "") {
        contents.NotificationAttributes = {};
    }
    else if (output["NotificationAttributes"] !== undefined &&
        output["NotificationAttributes"]["entry"] !== undefined) {
        contents.NotificationAttributes = deserializeAws_queryNotificationAttributes(__getArrayIfSingleItem(output["NotificationAttributes"]["entry"]), context);
    }
    return contents;
};
const deserializeAws_queryGetIdentityPoliciesResponse = (output, context) => {
    const contents = {
        Policies: undefined,
    };
    if (output.Policies === "") {
        contents.Policies = {};
    }
    else if (output["Policies"] !== undefined && output["Policies"]["entry"] !== undefined) {
        contents.Policies = deserializeAws_queryPolicyMap(__getArrayIfSingleItem(output["Policies"]["entry"]), context);
    }
    return contents;
};
const deserializeAws_queryGetIdentityVerificationAttributesResponse = (output, context) => {
    const contents = {
        VerificationAttributes: undefined,
    };
    if (output.VerificationAttributes === "") {
        contents.VerificationAttributes = {};
    }
    else if (output["VerificationAttributes"] !== undefined &&
        output["VerificationAttributes"]["entry"] !== undefined) {
        contents.VerificationAttributes = deserializeAws_queryVerificationAttributes(__getArrayIfSingleItem(output["VerificationAttributes"]["entry"]), context);
    }
    return contents;
};
const deserializeAws_queryGetSendQuotaResponse = (output, context) => {
    const contents = {
        Max24HourSend: undefined,
        MaxSendRate: undefined,
        SentLast24Hours: undefined,
    };
    if (output["Max24HourSend"] !== undefined) {
        contents.Max24HourSend = __strictParseFloat(output["Max24HourSend"]);
    }
    if (output["MaxSendRate"] !== undefined) {
        contents.MaxSendRate = __strictParseFloat(output["MaxSendRate"]);
    }
    if (output["SentLast24Hours"] !== undefined) {
        contents.SentLast24Hours = __strictParseFloat(output["SentLast24Hours"]);
    }
    return contents;
};
const deserializeAws_queryGetSendStatisticsResponse = (output, context) => {
    const contents = {
        SendDataPoints: undefined,
    };
    if (output.SendDataPoints === "") {
        contents.SendDataPoints = [];
    }
    else if (output["SendDataPoints"] !== undefined && output["SendDataPoints"]["member"] !== undefined) {
        contents.SendDataPoints = deserializeAws_querySendDataPointList(__getArrayIfSingleItem(output["SendDataPoints"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryGetTemplateResponse = (output, context) => {
    const contents = {
        Template: undefined,
    };
    if (output["Template"] !== undefined) {
        contents.Template = deserializeAws_queryTemplate(output["Template"], context);
    }
    return contents;
};
const deserializeAws_queryIdentityDkimAttributes = (output, context) => {
    const contents = {
        DkimEnabled: undefined,
        DkimVerificationStatus: undefined,
        DkimTokens: undefined,
    };
    if (output["DkimEnabled"] !== undefined) {
        contents.DkimEnabled = __parseBoolean(output["DkimEnabled"]);
    }
    if (output["DkimVerificationStatus"] !== undefined) {
        contents.DkimVerificationStatus = __expectString(output["DkimVerificationStatus"]);
    }
    if (output.DkimTokens === "") {
        contents.DkimTokens = [];
    }
    else if (output["DkimTokens"] !== undefined && output["DkimTokens"]["member"] !== undefined) {
        contents.DkimTokens = deserializeAws_queryVerificationTokenList(__getArrayIfSingleItem(output["DkimTokens"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryIdentityList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryIdentityMailFromDomainAttributes = (output, context) => {
    const contents = {
        MailFromDomain: undefined,
        MailFromDomainStatus: undefined,
        BehaviorOnMXFailure: undefined,
    };
    if (output["MailFromDomain"] !== undefined) {
        contents.MailFromDomain = __expectString(output["MailFromDomain"]);
    }
    if (output["MailFromDomainStatus"] !== undefined) {
        contents.MailFromDomainStatus = __expectString(output["MailFromDomainStatus"]);
    }
    if (output["BehaviorOnMXFailure"] !== undefined) {
        contents.BehaviorOnMXFailure = __expectString(output["BehaviorOnMXFailure"]);
    }
    return contents;
};
const deserializeAws_queryIdentityNotificationAttributes = (output, context) => {
    const contents = {
        BounceTopic: undefined,
        ComplaintTopic: undefined,
        DeliveryTopic: undefined,
        ForwardingEnabled: undefined,
        HeadersInBounceNotificationsEnabled: undefined,
        HeadersInComplaintNotificationsEnabled: undefined,
        HeadersInDeliveryNotificationsEnabled: undefined,
    };
    if (output["BounceTopic"] !== undefined) {
        contents.BounceTopic = __expectString(output["BounceTopic"]);
    }
    if (output["ComplaintTopic"] !== undefined) {
        contents.ComplaintTopic = __expectString(output["ComplaintTopic"]);
    }
    if (output["DeliveryTopic"] !== undefined) {
        contents.DeliveryTopic = __expectString(output["DeliveryTopic"]);
    }
    if (output["ForwardingEnabled"] !== undefined) {
        contents.ForwardingEnabled = __parseBoolean(output["ForwardingEnabled"]);
    }
    if (output["HeadersInBounceNotificationsEnabled"] !== undefined) {
        contents.HeadersInBounceNotificationsEnabled = __parseBoolean(output["HeadersInBounceNotificationsEnabled"]);
    }
    if (output["HeadersInComplaintNotificationsEnabled"] !== undefined) {
        contents.HeadersInComplaintNotificationsEnabled = __parseBoolean(output["HeadersInComplaintNotificationsEnabled"]);
    }
    if (output["HeadersInDeliveryNotificationsEnabled"] !== undefined) {
        contents.HeadersInDeliveryNotificationsEnabled = __parseBoolean(output["HeadersInDeliveryNotificationsEnabled"]);
    }
    return contents;
};
const deserializeAws_queryIdentityVerificationAttributes = (output, context) => {
    const contents = {
        VerificationStatus: undefined,
        VerificationToken: undefined,
    };
    if (output["VerificationStatus"] !== undefined) {
        contents.VerificationStatus = __expectString(output["VerificationStatus"]);
    }
    if (output["VerificationToken"] !== undefined) {
        contents.VerificationToken = __expectString(output["VerificationToken"]);
    }
    return contents;
};
const deserializeAws_queryInvalidCloudWatchDestinationException = (output, context) => {
    const contents = {
        ConfigurationSetName: undefined,
        EventDestinationName: undefined,
        message: undefined,
    };
    if (output["ConfigurationSetName"] !== undefined) {
        contents.ConfigurationSetName = __expectString(output["ConfigurationSetName"]);
    }
    if (output["EventDestinationName"] !== undefined) {
        contents.EventDestinationName = __expectString(output["EventDestinationName"]);
    }
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidConfigurationSetException = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidDeliveryOptionsException = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidFirehoseDestinationException = (output, context) => {
    const contents = {
        ConfigurationSetName: undefined,
        EventDestinationName: undefined,
        message: undefined,
    };
    if (output["ConfigurationSetName"] !== undefined) {
        contents.ConfigurationSetName = __expectString(output["ConfigurationSetName"]);
    }
    if (output["EventDestinationName"] !== undefined) {
        contents.EventDestinationName = __expectString(output["EventDestinationName"]);
    }
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidLambdaFunctionException = (output, context) => {
    const contents = {
        FunctionArn: undefined,
        message: undefined,
    };
    if (output["FunctionArn"] !== undefined) {
        contents.FunctionArn = __expectString(output["FunctionArn"]);
    }
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidPolicyException = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidRenderingParameterException = (output, context) => {
    const contents = {
        TemplateName: undefined,
        message: undefined,
    };
    if (output["TemplateName"] !== undefined) {
        contents.TemplateName = __expectString(output["TemplateName"]);
    }
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidS3ConfigurationException = (output, context) => {
    const contents = {
        Bucket: undefined,
        message: undefined,
    };
    if (output["Bucket"] !== undefined) {
        contents.Bucket = __expectString(output["Bucket"]);
    }
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidSNSDestinationException = (output, context) => {
    const contents = {
        ConfigurationSetName: undefined,
        EventDestinationName: undefined,
        message: undefined,
    };
    if (output["ConfigurationSetName"] !== undefined) {
        contents.ConfigurationSetName = __expectString(output["ConfigurationSetName"]);
    }
    if (output["EventDestinationName"] !== undefined) {
        contents.EventDestinationName = __expectString(output["EventDestinationName"]);
    }
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidSnsTopicException = (output, context) => {
    const contents = {
        Topic: undefined,
        message: undefined,
    };
    if (output["Topic"] !== undefined) {
        contents.Topic = __expectString(output["Topic"]);
    }
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidTemplateException = (output, context) => {
    const contents = {
        TemplateName: undefined,
        message: undefined,
    };
    if (output["TemplateName"] !== undefined) {
        contents.TemplateName = __expectString(output["TemplateName"]);
    }
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidTrackingOptionsException = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryKinesisFirehoseDestination = (output, context) => {
    const contents = {
        IAMRoleARN: undefined,
        DeliveryStreamARN: undefined,
    };
    if (output["IAMRoleARN"] !== undefined) {
        contents.IAMRoleARN = __expectString(output["IAMRoleARN"]);
    }
    if (output["DeliveryStreamARN"] !== undefined) {
        contents.DeliveryStreamARN = __expectString(output["DeliveryStreamARN"]);
    }
    return contents;
};
const deserializeAws_queryLambdaAction = (output, context) => {
    const contents = {
        TopicArn: undefined,
        FunctionArn: undefined,
        InvocationType: undefined,
    };
    if (output["TopicArn"] !== undefined) {
        contents.TopicArn = __expectString(output["TopicArn"]);
    }
    if (output["FunctionArn"] !== undefined) {
        contents.FunctionArn = __expectString(output["FunctionArn"]);
    }
    if (output["InvocationType"] !== undefined) {
        contents.InvocationType = __expectString(output["InvocationType"]);
    }
    return contents;
};
const deserializeAws_queryLimitExceededException = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryListConfigurationSetsResponse = (output, context) => {
    const contents = {
        ConfigurationSets: undefined,
        NextToken: undefined,
    };
    if (output.ConfigurationSets === "") {
        contents.ConfigurationSets = [];
    }
    else if (output["ConfigurationSets"] !== undefined && output["ConfigurationSets"]["member"] !== undefined) {
        contents.ConfigurationSets = deserializeAws_queryConfigurationSets(__getArrayIfSingleItem(output["ConfigurationSets"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = __expectString(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryListCustomVerificationEmailTemplatesResponse = (output, context) => {
    const contents = {
        CustomVerificationEmailTemplates: undefined,
        NextToken: undefined,
    };
    if (output.CustomVerificationEmailTemplates === "") {
        contents.CustomVerificationEmailTemplates = [];
    }
    else if (output["CustomVerificationEmailTemplates"] !== undefined &&
        output["CustomVerificationEmailTemplates"]["member"] !== undefined) {
        contents.CustomVerificationEmailTemplates = deserializeAws_queryCustomVerificationEmailTemplates(__getArrayIfSingleItem(output["CustomVerificationEmailTemplates"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = __expectString(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryListIdentitiesResponse = (output, context) => {
    const contents = {
        Identities: undefined,
        NextToken: undefined,
    };
    if (output.Identities === "") {
        contents.Identities = [];
    }
    else if (output["Identities"] !== undefined && output["Identities"]["member"] !== undefined) {
        contents.Identities = deserializeAws_queryIdentityList(__getArrayIfSingleItem(output["Identities"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = __expectString(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryListIdentityPoliciesResponse = (output, context) => {
    const contents = {
        PolicyNames: undefined,
    };
    if (output.PolicyNames === "") {
        contents.PolicyNames = [];
    }
    else if (output["PolicyNames"] !== undefined && output["PolicyNames"]["member"] !== undefined) {
        contents.PolicyNames = deserializeAws_queryPolicyNameList(__getArrayIfSingleItem(output["PolicyNames"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryListReceiptFiltersResponse = (output, context) => {
    const contents = {
        Filters: undefined,
    };
    if (output.Filters === "") {
        contents.Filters = [];
    }
    else if (output["Filters"] !== undefined && output["Filters"]["member"] !== undefined) {
        contents.Filters = deserializeAws_queryReceiptFilterList(__getArrayIfSingleItem(output["Filters"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryListReceiptRuleSetsResponse = (output, context) => {
    const contents = {
        RuleSets: undefined,
        NextToken: undefined,
    };
    if (output.RuleSets === "") {
        contents.RuleSets = [];
    }
    else if (output["RuleSets"] !== undefined && output["RuleSets"]["member"] !== undefined) {
        contents.RuleSets = deserializeAws_queryReceiptRuleSetsLists(__getArrayIfSingleItem(output["RuleSets"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = __expectString(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryListTemplatesResponse = (output, context) => {
    const contents = {
        TemplatesMetadata: undefined,
        NextToken: undefined,
    };
    if (output.TemplatesMetadata === "") {
        contents.TemplatesMetadata = [];
    }
    else if (output["TemplatesMetadata"] !== undefined && output["TemplatesMetadata"]["member"] !== undefined) {
        contents.TemplatesMetadata = deserializeAws_queryTemplateMetadataList(__getArrayIfSingleItem(output["TemplatesMetadata"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = __expectString(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryListVerifiedEmailAddressesResponse = (output, context) => {
    const contents = {
        VerifiedEmailAddresses: undefined,
    };
    if (output.VerifiedEmailAddresses === "") {
        contents.VerifiedEmailAddresses = [];
    }
    else if (output["VerifiedEmailAddresses"] !== undefined &&
        output["VerifiedEmailAddresses"]["member"] !== undefined) {
        contents.VerifiedEmailAddresses = deserializeAws_queryAddressList(__getArrayIfSingleItem(output["VerifiedEmailAddresses"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryMailFromDomainAttributes = (output, context) => {
    return output.reduce((acc, pair) => {
        if (pair["value"] === null) {
            return acc;
        }
        return {
            ...acc,
            [pair["key"]]: deserializeAws_queryIdentityMailFromDomainAttributes(pair["value"], context),
        };
    }, {});
};
const deserializeAws_queryMailFromDomainNotVerifiedException = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryMessageRejected = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryMissingRenderingAttributeException = (output, context) => {
    const contents = {
        TemplateName: undefined,
        message: undefined,
    };
    if (output["TemplateName"] !== undefined) {
        contents.TemplateName = __expectString(output["TemplateName"]);
    }
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryNotificationAttributes = (output, context) => {
    return output.reduce((acc, pair) => {
        if (pair["value"] === null) {
            return acc;
        }
        return {
            ...acc,
            [pair["key"]]: deserializeAws_queryIdentityNotificationAttributes(pair["value"], context),
        };
    }, {});
};
const deserializeAws_queryPolicyMap = (output, context) => {
    return output.reduce((acc, pair) => {
        if (pair["value"] === null) {
            return acc;
        }
        return {
            ...acc,
            [pair["key"]]: __expectString(pair["value"]),
        };
    }, {});
};
const deserializeAws_queryPolicyNameList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryProductionAccessNotGrantedException = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryPutConfigurationSetDeliveryOptionsResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryPutIdentityPolicyResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryReceiptAction = (output, context) => {
    const contents = {
        S3Action: undefined,
        BounceAction: undefined,
        WorkmailAction: undefined,
        LambdaAction: undefined,
        StopAction: undefined,
        AddHeaderAction: undefined,
        SNSAction: undefined,
    };
    if (output["S3Action"] !== undefined) {
        contents.S3Action = deserializeAws_queryS3Action(output["S3Action"], context);
    }
    if (output["BounceAction"] !== undefined) {
        contents.BounceAction = deserializeAws_queryBounceAction(output["BounceAction"], context);
    }
    if (output["WorkmailAction"] !== undefined) {
        contents.WorkmailAction = deserializeAws_queryWorkmailAction(output["WorkmailAction"], context);
    }
    if (output["LambdaAction"] !== undefined) {
        contents.LambdaAction = deserializeAws_queryLambdaAction(output["LambdaAction"], context);
    }
    if (output["StopAction"] !== undefined) {
        contents.StopAction = deserializeAws_queryStopAction(output["StopAction"], context);
    }
    if (output["AddHeaderAction"] !== undefined) {
        contents.AddHeaderAction = deserializeAws_queryAddHeaderAction(output["AddHeaderAction"], context);
    }
    if (output["SNSAction"] !== undefined) {
        contents.SNSAction = deserializeAws_querySNSAction(output["SNSAction"], context);
    }
    return contents;
};
const deserializeAws_queryReceiptActionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryReceiptAction(entry, context);
    });
};
const deserializeAws_queryReceiptFilter = (output, context) => {
    const contents = {
        Name: undefined,
        IpFilter: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["IpFilter"] !== undefined) {
        contents.IpFilter = deserializeAws_queryReceiptIpFilter(output["IpFilter"], context);
    }
    return contents;
};
const deserializeAws_queryReceiptFilterList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryReceiptFilter(entry, context);
    });
};
const deserializeAws_queryReceiptIpFilter = (output, context) => {
    const contents = {
        Policy: undefined,
        Cidr: undefined,
    };
    if (output["Policy"] !== undefined) {
        contents.Policy = __expectString(output["Policy"]);
    }
    if (output["Cidr"] !== undefined) {
        contents.Cidr = __expectString(output["Cidr"]);
    }
    return contents;
};
const deserializeAws_queryReceiptRule = (output, context) => {
    const contents = {
        Name: undefined,
        Enabled: undefined,
        TlsPolicy: undefined,
        Recipients: undefined,
        Actions: undefined,
        ScanEnabled: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["Enabled"] !== undefined) {
        contents.Enabled = __parseBoolean(output["Enabled"]);
    }
    if (output["TlsPolicy"] !== undefined) {
        contents.TlsPolicy = __expectString(output["TlsPolicy"]);
    }
    if (output.Recipients === "") {
        contents.Recipients = [];
    }
    else if (output["Recipients"] !== undefined && output["Recipients"]["member"] !== undefined) {
        contents.Recipients = deserializeAws_queryRecipientsList(__getArrayIfSingleItem(output["Recipients"]["member"]), context);
    }
    if (output.Actions === "") {
        contents.Actions = [];
    }
    else if (output["Actions"] !== undefined && output["Actions"]["member"] !== undefined) {
        contents.Actions = deserializeAws_queryReceiptActionsList(__getArrayIfSingleItem(output["Actions"]["member"]), context);
    }
    if (output["ScanEnabled"] !== undefined) {
        contents.ScanEnabled = __parseBoolean(output["ScanEnabled"]);
    }
    return contents;
};
const deserializeAws_queryReceiptRuleSetMetadata = (output, context) => {
    const contents = {
        Name: undefined,
        CreatedTimestamp: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["CreatedTimestamp"] !== undefined) {
        contents.CreatedTimestamp = __expectNonNull(__parseRfc3339DateTime(output["CreatedTimestamp"]));
    }
    return contents;
};
const deserializeAws_queryReceiptRuleSetsLists = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryReceiptRuleSetMetadata(entry, context);
    });
};
const deserializeAws_queryReceiptRulesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryReceiptRule(entry, context);
    });
};
const deserializeAws_queryRecipientsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryReorderReceiptRuleSetResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryReputationOptions = (output, context) => {
    const contents = {
        SendingEnabled: undefined,
        ReputationMetricsEnabled: undefined,
        LastFreshStart: undefined,
    };
    if (output["SendingEnabled"] !== undefined) {
        contents.SendingEnabled = __parseBoolean(output["SendingEnabled"]);
    }
    if (output["ReputationMetricsEnabled"] !== undefined) {
        contents.ReputationMetricsEnabled = __parseBoolean(output["ReputationMetricsEnabled"]);
    }
    if (output["LastFreshStart"] !== undefined) {
        contents.LastFreshStart = __expectNonNull(__parseRfc3339DateTime(output["LastFreshStart"]));
    }
    return contents;
};
const deserializeAws_queryRuleDoesNotExistException = (output, context) => {
    const contents = {
        Name: undefined,
        message: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryRuleSetDoesNotExistException = (output, context) => {
    const contents = {
        Name: undefined,
        message: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryS3Action = (output, context) => {
    const contents = {
        TopicArn: undefined,
        BucketName: undefined,
        ObjectKeyPrefix: undefined,
        KmsKeyArn: undefined,
    };
    if (output["TopicArn"] !== undefined) {
        contents.TopicArn = __expectString(output["TopicArn"]);
    }
    if (output["BucketName"] !== undefined) {
        contents.BucketName = __expectString(output["BucketName"]);
    }
    if (output["ObjectKeyPrefix"] !== undefined) {
        contents.ObjectKeyPrefix = __expectString(output["ObjectKeyPrefix"]);
    }
    if (output["KmsKeyArn"] !== undefined) {
        contents.KmsKeyArn = __expectString(output["KmsKeyArn"]);
    }
    return contents;
};
const deserializeAws_querySendBounceResponse = (output, context) => {
    const contents = {
        MessageId: undefined,
    };
    if (output["MessageId"] !== undefined) {
        contents.MessageId = __expectString(output["MessageId"]);
    }
    return contents;
};
const deserializeAws_querySendBulkTemplatedEmailResponse = (output, context) => {
    const contents = {
        Status: undefined,
    };
    if (output.Status === "") {
        contents.Status = [];
    }
    else if (output["Status"] !== undefined && output["Status"]["member"] !== undefined) {
        contents.Status = deserializeAws_queryBulkEmailDestinationStatusList(__getArrayIfSingleItem(output["Status"]["member"]), context);
    }
    return contents;
};
const deserializeAws_querySendCustomVerificationEmailResponse = (output, context) => {
    const contents = {
        MessageId: undefined,
    };
    if (output["MessageId"] !== undefined) {
        contents.MessageId = __expectString(output["MessageId"]);
    }
    return contents;
};
const deserializeAws_querySendDataPoint = (output, context) => {
    const contents = {
        Timestamp: undefined,
        DeliveryAttempts: undefined,
        Bounces: undefined,
        Complaints: undefined,
        Rejects: undefined,
    };
    if (output["Timestamp"] !== undefined) {
        contents.Timestamp = __expectNonNull(__parseRfc3339DateTime(output["Timestamp"]));
    }
    if (output["DeliveryAttempts"] !== undefined) {
        contents.DeliveryAttempts = __strictParseLong(output["DeliveryAttempts"]);
    }
    if (output["Bounces"] !== undefined) {
        contents.Bounces = __strictParseLong(output["Bounces"]);
    }
    if (output["Complaints"] !== undefined) {
        contents.Complaints = __strictParseLong(output["Complaints"]);
    }
    if (output["Rejects"] !== undefined) {
        contents.Rejects = __strictParseLong(output["Rejects"]);
    }
    return contents;
};
const deserializeAws_querySendDataPointList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_querySendDataPoint(entry, context);
    });
};
const deserializeAws_querySendEmailResponse = (output, context) => {
    const contents = {
        MessageId: undefined,
    };
    if (output["MessageId"] !== undefined) {
        contents.MessageId = __expectString(output["MessageId"]);
    }
    return contents;
};
const deserializeAws_querySendRawEmailResponse = (output, context) => {
    const contents = {
        MessageId: undefined,
    };
    if (output["MessageId"] !== undefined) {
        contents.MessageId = __expectString(output["MessageId"]);
    }
    return contents;
};
const deserializeAws_querySendTemplatedEmailResponse = (output, context) => {
    const contents = {
        MessageId: undefined,
    };
    if (output["MessageId"] !== undefined) {
        contents.MessageId = __expectString(output["MessageId"]);
    }
    return contents;
};
const deserializeAws_querySetActiveReceiptRuleSetResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_querySetIdentityDkimEnabledResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_querySetIdentityFeedbackForwardingEnabledResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_querySetIdentityHeadersInNotificationsEnabledResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_querySetIdentityMailFromDomainResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_querySetIdentityNotificationTopicResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_querySetReceiptRulePositionResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_querySNSAction = (output, context) => {
    const contents = {
        TopicArn: undefined,
        Encoding: undefined,
    };
    if (output["TopicArn"] !== undefined) {
        contents.TopicArn = __expectString(output["TopicArn"]);
    }
    if (output["Encoding"] !== undefined) {
        contents.Encoding = __expectString(output["Encoding"]);
    }
    return contents;
};
const deserializeAws_querySNSDestination = (output, context) => {
    const contents = {
        TopicARN: undefined,
    };
    if (output["TopicARN"] !== undefined) {
        contents.TopicARN = __expectString(output["TopicARN"]);
    }
    return contents;
};
const deserializeAws_queryStopAction = (output, context) => {
    const contents = {
        Scope: undefined,
        TopicArn: undefined,
    };
    if (output["Scope"] !== undefined) {
        contents.Scope = __expectString(output["Scope"]);
    }
    if (output["TopicArn"] !== undefined) {
        contents.TopicArn = __expectString(output["TopicArn"]);
    }
    return contents;
};
const deserializeAws_queryTemplate = (output, context) => {
    const contents = {
        TemplateName: undefined,
        SubjectPart: undefined,
        TextPart: undefined,
        HtmlPart: undefined,
    };
    if (output["TemplateName"] !== undefined) {
        contents.TemplateName = __expectString(output["TemplateName"]);
    }
    if (output["SubjectPart"] !== undefined) {
        contents.SubjectPart = __expectString(output["SubjectPart"]);
    }
    if (output["TextPart"] !== undefined) {
        contents.TextPart = __expectString(output["TextPart"]);
    }
    if (output["HtmlPart"] !== undefined) {
        contents.HtmlPart = __expectString(output["HtmlPart"]);
    }
    return contents;
};
const deserializeAws_queryTemplateDoesNotExistException = (output, context) => {
    const contents = {
        TemplateName: undefined,
        message: undefined,
    };
    if (output["TemplateName"] !== undefined) {
        contents.TemplateName = __expectString(output["TemplateName"]);
    }
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryTemplateMetadata = (output, context) => {
    const contents = {
        Name: undefined,
        CreatedTimestamp: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["CreatedTimestamp"] !== undefined) {
        contents.CreatedTimestamp = __expectNonNull(__parseRfc3339DateTime(output["CreatedTimestamp"]));
    }
    return contents;
};
const deserializeAws_queryTemplateMetadataList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryTemplateMetadata(entry, context);
    });
};
const deserializeAws_queryTestRenderTemplateResponse = (output, context) => {
    const contents = {
        RenderedTemplate: undefined,
    };
    if (output["RenderedTemplate"] !== undefined) {
        contents.RenderedTemplate = __expectString(output["RenderedTemplate"]);
    }
    return contents;
};
const deserializeAws_queryTrackingOptions = (output, context) => {
    const contents = {
        CustomRedirectDomain: undefined,
    };
    if (output["CustomRedirectDomain"] !== undefined) {
        contents.CustomRedirectDomain = __expectString(output["CustomRedirectDomain"]);
    }
    return contents;
};
const deserializeAws_queryTrackingOptionsAlreadyExistsException = (output, context) => {
    const contents = {
        ConfigurationSetName: undefined,
        message: undefined,
    };
    if (output["ConfigurationSetName"] !== undefined) {
        contents.ConfigurationSetName = __expectString(output["ConfigurationSetName"]);
    }
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryTrackingOptionsDoesNotExistException = (output, context) => {
    const contents = {
        ConfigurationSetName: undefined,
        message: undefined,
    };
    if (output["ConfigurationSetName"] !== undefined) {
        contents.ConfigurationSetName = __expectString(output["ConfigurationSetName"]);
    }
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryUpdateConfigurationSetEventDestinationResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryUpdateConfigurationSetTrackingOptionsResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryUpdateReceiptRuleResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryUpdateTemplateResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryVerificationAttributes = (output, context) => {
    return output.reduce((acc, pair) => {
        if (pair["value"] === null) {
            return acc;
        }
        return {
            ...acc,
            [pair["key"]]: deserializeAws_queryIdentityVerificationAttributes(pair["value"], context),
        };
    }, {});
};
const deserializeAws_queryVerificationTokenList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryVerifyDomainDkimResponse = (output, context) => {
    const contents = {
        DkimTokens: undefined,
    };
    if (output.DkimTokens === "") {
        contents.DkimTokens = [];
    }
    else if (output["DkimTokens"] !== undefined && output["DkimTokens"]["member"] !== undefined) {
        contents.DkimTokens = deserializeAws_queryVerificationTokenList(__getArrayIfSingleItem(output["DkimTokens"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryVerifyDomainIdentityResponse = (output, context) => {
    const contents = {
        VerificationToken: undefined,
    };
    if (output["VerificationToken"] !== undefined) {
        contents.VerificationToken = __expectString(output["VerificationToken"]);
    }
    return contents;
};
const deserializeAws_queryVerifyEmailIdentityResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryWorkmailAction = (output, context) => {
    const contents = {
        TopicArn: undefined,
        OrganizationArn: undefined,
    };
    if (output["TopicArn"] !== undefined) {
        contents.TopicArn = __expectString(output["TopicArn"]);
    }
    if (output["OrganizationArn"] !== undefined) {
        contents.OrganizationArn = __expectString(output["OrganizationArn"]);
    }
    return contents;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        const parser = new XMLParser({
            attributeNamePrefix: "",
            htmlEntities: true,
            ignoreAttributes: false,
            ignoreDeclaration: true,
            parseTagValue: false,
            trimValues: false,
            tagValueProcessor: (_, val) => (val.trim() === "" && val.includes("\n") ? "" : undefined),
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        const parsedObj = parser.parse(encoded);
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
            parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
            delete parsedObjToReturn[textNodeName];
        }
        return __getValueFromTextNode(parsedObjToReturn);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
    }
    return value;
};
const buildFormUrlencodedString = (formEntries) => Object.entries(formEntries)
    .map(([key, value]) => __extendedEncodeURIComponent(key) + "=" + __extendedEncodeURIComponent(value))
    .join("&");
const loadQueryErrorCode = (output, data) => {
    if (data.Error.Code !== undefined) {
        return data.Error.Code;
    }
    if (output.statusCode == 404) {
        return "NotFound";
    }
};
