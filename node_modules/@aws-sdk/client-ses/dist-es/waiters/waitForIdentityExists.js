import { __assign, __awaiter, __generator, __values } from "tslib";
import { checkExceptions, createWaiter, WaiterState } from "@aws-sdk/util-waiter";
import { GetIdentityVerificationAttributesCommand, } from "../commands/GetIdentityVerificationAttributesCommand";
var checkState = function (client, input) { return __awaiter(void 0, void 0, void 0, function () {
    var reason, result_1, returnComparator, allStringEq_4, _a, _b, element_3, exception_1;
    var e_1, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _d.trys.push([0, 2, , 3]);
                return [4, client.send(new GetIdentityVerificationAttributesCommand(input))];
            case 1:
                result_1 = _d.sent();
                reason = result_1;
                try {
                    returnComparator = function () {
                        var objectProjection_2 = Object.values(result_1.VerificationAttributes).map(function (element_1) {
                            return element_1.VerificationStatus;
                        });
                        return objectProjection_2;
                    };
                    allStringEq_4 = returnComparator().length > 0;
                    try {
                        for (_a = __values(returnComparator()), _b = _a.next(); !_b.done; _b = _a.next()) {
                            element_3 = _b.value;
                            allStringEq_4 = allStringEq_4 && element_3 == "Success";
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    if (allStringEq_4) {
                        return [2, { state: WaiterState.SUCCESS, reason: reason }];
                    }
                }
                catch (e) { }
                return [3, 3];
            case 2:
                exception_1 = _d.sent();
                reason = exception_1;
                return [3, 3];
            case 3: return [2, { state: WaiterState.RETRY, reason: reason }];
        }
    });
}); };
export var waitForIdentityExists = function (params, input) { return __awaiter(void 0, void 0, void 0, function () {
    var serviceDefaults;
    return __generator(this, function (_a) {
        serviceDefaults = { minDelay: 3, maxDelay: 120 };
        return [2, createWaiter(__assign(__assign({}, serviceDefaults), params), input, checkState)];
    });
}); };
export var waitUntilIdentityExists = function (params, input) { return __awaiter(void 0, void 0, void 0, function () {
    var serviceDefaults, result;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                serviceDefaults = { minDelay: 3, maxDelay: 120 };
                return [4, createWaiter(__assign(__assign({}, serviceDefaults), params), input, checkState)];
            case 1:
                result = _a.sent();
                return [2, checkExceptions(result)];
        }
    });
}); };
