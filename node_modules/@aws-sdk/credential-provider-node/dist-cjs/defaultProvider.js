"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultProvider = void 0;
const credential_provider_env_1 = require("@aws-sdk/credential-provider-env");
const credential_provider_ini_1 = require("@aws-sdk/credential-provider-ini");
const credential_provider_process_1 = require("@aws-sdk/credential-provider-process");
const credential_provider_sso_1 = require("@aws-sdk/credential-provider-sso");
const credential_provider_web_identity_1 = require("@aws-sdk/credential-provider-web-identity");
const property_provider_1 = require("@aws-sdk/property-provider");
const shared_ini_file_loader_1 = require("@aws-sdk/shared-ini-file-loader");
const remoteProvider_1 = require("./remoteProvider");
const defaultProvider = (init = {}) => {
    const options = {
        profile: process.env[shared_ini_file_loader_1.ENV_PROFILE],
        ...init,
        ...(!init.loadedConfig && { loadedConfig: (0, shared_ini_file_loader_1.loadSharedConfigFiles)(init) }),
    };
    const providerChain = (0, property_provider_1.chain)(...(options.profile ? [] : [(0, credential_provider_env_1.fromEnv)()]), (0, credential_provider_sso_1.fromSSO)(options), (0, credential_provider_ini_1.fromIni)(options), (0, credential_provider_process_1.fromProcess)(options), (0, credential_provider_web_identity_1.fromTokenFile)(options), (0, remoteProvider_1.remoteProvider)(options), async () => {
        throw new property_provider_1.CredentialsProviderError("Could not load credentials from any providers", false);
    });
    return (0, property_provider_1.memoize)(providerChain, (credentials) => credentials.expiration !== undefined && credentials.expiration.getTime() - Date.now() < 300000, (credentials) => credentials.expiration !== undefined);
};
exports.defaultProvider = defaultProvider;
