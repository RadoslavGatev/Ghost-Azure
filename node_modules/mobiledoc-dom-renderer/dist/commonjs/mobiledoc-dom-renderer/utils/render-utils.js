'use strict';

exports.defaultSectionElementRenderer = defaultSectionElementRenderer;
exports.defaultMarkupElementRenderer = defaultMarkupElementRenderer;

var _utilsTagNames = require('../utils/tag-names');

var _sanitizationUtils = require('./sanitization-utils');

var VALID_ATTRIBUTES = ['data-md-text-align'];

exports.VALID_ATTRIBUTES = VALID_ATTRIBUTES;
function _isValidAttribute(attr) {
  return VALID_ATTRIBUTES.indexOf(attr) !== -1;
}

function handleMarkupSectionAttribute(element, attributeKey, attributeValue) {
  if (!_isValidAttribute(attributeKey)) {
    throw new Error('Cannot use attribute: ' + attributeKey);
  }

  element.setAttribute(attributeKey, attributeValue);
}

function defaultSectionElementRenderer(tagName, dom) {
  var attrsObj = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  var element = undefined;
  if ((0, _utilsTagNames.isMarkupSectionElementName)(tagName)) {
    element = dom.createElement(tagName);

    Object.keys(attrsObj).forEach(function (k) {
      handleMarkupSectionAttribute(element, k, attrsObj[k]);
    });
  } else {
    element = dom.createElement('div');
    element.setAttribute('class', tagName);
  }

  return element;
}

function sanitizeAttribute(tagName, attrName, attrValue) {
  if (tagName === 'a' && attrName === 'href') {
    return (0, _sanitizationUtils.sanitizeHref)(attrValue);
  } else {
    return attrValue;
  }
}

function defaultMarkupElementRenderer(tagName, dom, attrsObj) {
  var element = dom.createElement(tagName);
  Object.keys(attrsObj).forEach(function (attrName) {
    var attrValue = attrsObj[attrName];
    attrValue = sanitizeAttribute(tagName, attrName, attrValue);
    element.setAttribute(attrName, attrValue);
  });
  return element;
}